{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Atoolo","text":"<p>Web Data Processing Suite</p>"},{"location":"#overview","title":"Overview","text":"<p>Atoolo is a comprehensive collection of PHP libraries and tools specifically designed to optimize the processing of pre-produced data for websites. Atoolo is not a stand-alone framework, but serves as a supplement to the Symfony framework. It extends projects with special functionalities that are not included in Symfony as standard. Atoolo contains various Symfony bundles that integrate seamlessly into Symfony projects. Atoolo takes on the task of a front-end delivery system and prepares the data of a content management system (CMS) for the requirements of a front-end system.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#graphql-interface","title":"GraphQL interface","text":"<p>Atoolo facilitates the creation and deployment of GraphQL interfaces. These interfaces enable web applications to access structured data, perform complex search queries and interact with the components of the suite for dynamic data processing.</p>"},{"location":"#full-text-index-integration","title":"Full-text index integration","text":"<p>Atoolo provides tools and methods for full-text indexing of data. This functionality enables large amounts of data to be searched efficiently and relevant information to be found quickly.</p>"},{"location":"#form-processing","title":"Form processing","text":"<p>Atoolo offers a comprehensive system for form processing. The forms defined by the CMS system are validated and the submitted form data is further processed. The form processing system is highly customizable and can be adapted to the specific requirements of the web application.</p>"},{"location":"#webaccount","title":"WebAccount","text":"<p>The WebAccount is a central user account with which users can register and log in to a website. It is used for identification, authorization and personalization within a site.</p>"},{"location":"#seo","title":"SEO","text":"<p>Atoolo provides a set of tools for search engine optimization (SEO). These tools help to improve the visibility of web applications in search engine results and increase the number of visitors to the site. (Currently only the sitemap XML functionality is offered.)</p>"},{"location":"#microsites","title":"Microsites","text":"<p>Atoolo offers a system to support microsites. Microsites are compact, thematically focused websites that deal exclusively with a specific topic. They are often used to highlight specific topics such as events, projects, offers or campaigns.</p>"},{"location":"#url-rewriting","title":"URL rewriting","text":"<p>Atoolo offers a URL rewriting system that allows URLs to be manipulated centrally. This system is used to manipulate URLs that are returned by the system via a centralized point. The URL rewriter can be used to manipulate URLs within returned JSON or XML data, for example.</p>"},{"location":"#runtime-checks","title":"Runtime checks","text":"<p>To ensure the proper functioning of web applications, Atoolo offers a series of runtime checks. These monitoring mechanisms help to detect potential problems at an early stage and ensure the reliability and stability of the application.</p>"},{"location":"#deployment","title":"Deployment","text":"<p>Atoolo provides various tools and methods to facilitate and automate the deployment of web applications.</p>"},{"location":"concepts/","title":"Concepts","text":"<p>Over the course of time, numerous proven concepts have become established in the implementation of websites, which are used time and again. Atoolo takes up these concepts and provides a variety of functions, bundles and APIs to facilitate their implementation. This section introduces the supported concepts and explains how Atoolo helps to integrate them efficiently into projects.</p> Name Description Resource The resource represents a data object published by the IES Resource Channel The resource channel is the area in which the IES publishes resources Microsites Microsites are small, independent websites that usually only have a few pages and are tailored to a specific topic or target group. Navigation The navigation of a website is a central interface element. It enables structured access to pages and content and depicts the information architecture logically and visually. In this way, it helps users to find their way around the application efficiently."},{"location":"concepts/microsites/","title":"Microsites","text":"<p>A microsite is a compact, thematically focused website that often serves as a supplement to a main website. It is often used to highlight specific topics such as events, projects, offers or campaigns. Microsites are characterized by their clear structure, targeted content and independent design, which often differs from the main website.</p> <p>Microsites offer the opportunity to address specific target groups without overloading the main website. They make it possible to present content flexibly and independently of the existing structure of the main website, for example for time-limited projects or special occasions. This allows specific topics to be communicated and highlighted more effectively.</p> <p>As a rule, microsites adopt the basic design of the main website to ensure visual consistency. At the same time, however, they can be individualized with accents such as adapted colors, logos or other design elements. The design of the homepage or category pages can also differ from the main website in order to meet the specific requirements of the microsite. In addition, the footer can be adapted or completely redesigned to optimally support the content and objectives of the microsite.</p>"},{"location":"concepts/microsites/#integration-with-the-main-website-and-other-microsites","title":"Integration with the main website and other microsites","text":"<p>Although microsites are independent areas, they can also integrate content from the main website or other microsites, for example in the form of links or teasers. In addition, the search can be configured to include pages from the main website or other microsites to ensure a seamless user experience.</p>"},{"location":"concepts/microsites/#teaser","title":"Teaser","text":"<p>Teasers of articles provided by the main website or another microsite are given a customized \"kicker\". The kicker is used to provide additional context to the content of the teaser, for example by indicating the category. However, if such a teaser is displayed on a microsite, the original kicker often no longer fits the context. Therefore, the teaser's kicker is overwritten and replaced by the name of the main website or the corresponding microsite.</p>"},{"location":"concepts/microsites/#microsites_1","title":"Microsites","text":"<p>Microsites are websites that belong to a superordinate website, but are outsourced to a separate area for content reasons. Microsites are compact, thematically focused websites that deal exclusively with a specific topic. They are often used to highlight specific topics such as events, projects, offers or campaigns.</p> <p>Microsites are characterized by their clear structure, targeted content and independent design, which often differs from the main website. At the same time, they generally adopt basic functions and the design of the main website, but can be adapted in selected areas.</p>"},{"location":"concepts/microsites/#features-of-microsites","title":"Features of microsites","text":"<p>Microsites have the following characteristic features:</p> <ul> <li>Own homepage and navigation: Microsites have their own homepage and navigation structure.</li> <li>Customizable theming: Depending on the project-specific implementation, microsites can use other color schemes or design elements.</li> <li>Individual header and footer: Microsites often have their own header and footer that are different from the main website.</li> <li>Own logo: Microsites can use their own logo that emphasizes their individuality.</li> <li>Different page structure: The structure of the homepage and category pages may differ from the main website.</li> <li>Limited or extended range of functions: Microsites can either offer fewer functions compared to the main website or add specific functions that are only available for the microsite.</li> <li>Common Resource Channel: Microsites use the same resource channels as the main website.</li> <li>Assignment to the main website: Each microsite is assigned to a specific main website.</li> <li>Full text search: Microsites use the full-text index of the main website, but can restrict the search to their own area.</li> <li>Domain options: Microsites can either be accessible via the domain of the main website (e.g. <code>/microsite/[name]</code>) or via their own domain. In the case of a separate domain, a redirect is made from the main website to the microsite domain.</li> </ul>"},{"location":"concepts/microsites/#integration-with-the-main-website-and-other-microsites_1","title":"Integration with the main website and other microsites","text":"<p>Although microsites are independent areas, they can integrate content from the main website or other microsites, for example in the form of links or teasers. In addition, the search can be configured to include pages from the main website or other microsites to ensure a seamless user experience.</p>"},{"location":"concepts/microsites/#teaser_1","title":"Teaser","text":"<p>Teasers of articles provided by the main website or another microsite are given a customized \"kicker\". The kicker is used to provide additional context to the content of the teaser, for example by indicating the category. However, if such a teaser is displayed on a microsite, the original kicker often no longer fits the context. Therefore, the teaser's kicker is overwritten and replaced by the name of the main website or the corresponding microsite.</p>"},{"location":"concepts/microsites/#microsites-with-their-own-domain","title":"Microsites with their own domain","text":"<p>If a microsite is operated with its own domain, the following points must be observed:</p> <ul> <li>Forwarding: It must be ensured that the pages can no longer be accessed via the main website, but redirect to the microsite domain.</li> <li>Statistics: A separate site must be defined for Matomo or other analysis tools in order to record the call statistics for the microsite domain.</li> <li>Domain change for links: Pages linked from the main website continue to use the domain of the main website. When such a link is clicked, the domain is changed.</li> </ul>"},{"location":"concepts/microsites/#mount-pages-of-the-main-website-in-microsites-microsite-mounting","title":"Mount pages of the main website in microsites (microsite mounting)","text":"<p>If the microsite is operated via its own domain, it may be desirable for some of the main website to be displayed via the microsite domain and in the microsite design. There are two options for this:</p>"},{"location":"concepts/microsites/#blanket-marking-via-the-article-type","title":"Blanket marking via the article type","text":"<p>Article types can be defined whose articles are always displayed in the appearance of the microsite when they are accessed via the microsite. These pages are added to the navigation directly below the microsite homepage, but are not visible as a menu item. The breadcrumb trail only shows the homepage and the page itself. These pages are not found via the microsite-specific search.</p>"},{"location":"concepts/microsites/#marking-by-adding-to-the-microsite-navigation","title":"Marking by adding to the microsite navigation","text":"<p>Alternatively, articles can be added directly to the microsite navigation. These articles are visible in the navigation and can also be found via the microsite-specific search.</p>"},{"location":"concepts/navigation/","title":"Navigation","text":"<p>The navigation of a website is a central interface element. It enables structured access to pages and content and depicts the information architecture logically and visually. In this way, it helps users to find their way around the application efficiently.</p> <p>In Atoolo, navigation has a special meaning: it not only maps the page structure, but can also influence the behavior of pages or teasers - depending on how they are arranged in the navigation.</p> <p>Each resource knows its direct superordinate and subordinate resources. The top elements of the navigation hierarchy - so-called root elements or homepages - are specially marked.</p> <p>A resource can be attached to several nodes in the navigation hierarchy. However, there must be no circularity. This means that a resource can have several higher-level resources - even from different hierarchies, i.e. below different homepages.</p> <p>The associated homepage of a resource is determined by following the link upwards. If there are several higher-level resources, one of them is marked as the primary link. This results in the primary path of the resource.</p> <p>Some properties of the website - such as theming information, header or footer - are stored on the homepage resource. This information is determined by identifying the associated homepage and reading its data. For example, the primary color of a page can be controlled centrally.</p> <p>This principle can be extended: Information can be stored not only directly on the homepage, but also on another resource within the navigation path. For example, a special header or footer can be configured on a rubric page. The current page then scrolls up the navigation path until the information is found. This allows data to be \"inherited\" recursively via the navigation - e.g. the kicker of a teaser.</p> <p>The following diagram shows how \"Page A.1\" is linked in the navigation. There is a primary path (via section A) and two secondary paths (via rubric B and via the microsite section).</p> <pre><code>graph TB\n    subgraph \"Main Website\"\n        H1[\"Homepage\n          (id:1)\"]\n        A[\"Rubric A\n          (id:2)\"]\n        B[\"Rubric B\n          (id:3)\"]\n        A1[\"Page A.1\n          (id:4)\"]\n        B1[\"Page B.1\n          (id:5)\"]\n    end\n\n    subgraph \"Microsite\"\n        M1[\"Microsite Homepage\n          (id:6)\"]\n        C[\"Microsite Rubric\n          (id:7)\"]\n    end\n\n    A --primary--&gt; H1\n    A1 --primary--&gt; A\n    B --primary--&gt; H1\n    B1 --primary--&gt; B\n    A1 --&gt; B1\n\n    C --primary--&gt; M1\n    A1 --&gt; C</code></pre>"},{"location":"concepts/navigation/#the-p-parameter","title":"The P parameter","text":"<p>By default, only the primary path of a resource is used. If you want to use a secondary path instead, this must be specified explicitly - via the so-called P parameter.</p> <p>The P parameter (P stands for path) is a URL parameter that specifies the IDs of the resources in the navigation path, comma-separated from the homepage ID to the target resource:</p> <pre><code>?p=1,3,5,4\n</code></pre> <p>In the above example, there are two alternative paths to \"Page A.1\":</p> <ul> <li><code>?p=1,3,5,4</code>: Secondary path via \"Page B.1\" within the main website</li> <li><code>?p=6,7,4</code>: Secondary path via the microsite rubric</li> </ul> <p>Only valid and known paths are accepted.</p>"},{"location":"concepts/navigation/#p-parameter-with-foreign-parent","title":"P parameter with foreign parent","text":"<p>In some cases, a page should not be displayed under its defined navigation, but below a search page, for example. A typical use case is an event calendar search for a specific area (e.g. \"Culture\"). In the event of a hit, the target page should appear below the search page - even though they are not linked in the navigation.</p> <p>The extended P parameter with external parent is available for this purpose. The parent node is not specified by ID, but by its Resource-Location. The last element remains the ID of the resource to be displayed:</p> <pre><code>?p=1,3,/culture/events-search.php,20\n</code></pre> <p>To prevent manipulation, this parameter is signed by the PHP backend. A valid link then looks like this, for example:</p> <pre><code>?psig=gec7eqn32dlq1ncg,1,3,/culture/events-search.php,20\n</code></pre> <p>Only P -parameters generated and signed by the PHP backend are accepted for these special cases.</p>"},{"location":"concepts/resource-channel/","title":"Resource channel","text":"<p>The resource channel is the area in which the IES publishes resources. A channel is a directory that is always assigned to a specific virtual host.</p> <p>Directory layout For example, for the <code>www</code> area:</p> <pre><code>/var/www/example.com/www/\n\u251c\u2500\u2500 app/ (symlink to application directory)\n\u2502   \u2514\u2500\u2500 bin/\n\u2502   \u2502   \u2514\u2500\u2500 console\n\u2502   \u251c\u2500\u2500 public/\n\u2502   \u2502   \u2514\u2500\u2500 index.php\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 frontend/ (symlink to frontend dirctory)\n\u2502   \u2514\u2500\u2500 public/\n\u2514\u2500\u2500 resources/\n    \u251c\u2500\u2500 objects/\n    \u251c\u2500\u2500 media/\n    \u2502   \u251c\u2500\u2500 public/\n    \u2502   \u2514\u2500\u2500 protected/\n    \u251c\u2500\u2500 security/\n    \u251c\u2500\u2500 redirects/\n    \u251c\u2500\u2500 configs/\n    \u2514\u2500\u2500 context.php\n</code></pre> <p>The resource channel is the directory <code>/var/www/example.com/www/resources/</code>. This directory is described exclusively by the IES.</p>"},{"location":"concepts/resource/","title":"Resource","text":"<p>The resource represents a data object published by the IES. This can be an article but also other objects that can be published by CMS.</p> <p>A resource has the following properties:</p> <ul> <li><code>location</code> - The path to the aggregated file</li> <li><code>id</code> - An ID assigned by the CMS for the object</li> <li><code>name</code> - Name of the resource</li> <li><code>objectType</code> - Specifies the type of the object. These types are managed in the CMS.</li> <li><code>lang</code> - Language of the resource data.</li> <li><code>data</code> - A generic data object containing the data structure of the resource. Depending on the object type, the schema of the data can be different.</li> </ul>"},{"location":"concepts/teaser/","title":"Teaser","text":"<p>A teaser is a short text that is used to introduce a topic or content. It is used to give readers a brief overview of what they can expect. Teasers are usually concise and appealing to grab the reader's attention and encourage them to read on.</p> <p>Depending on the item they describe, these can be structured differently and also contain different information. As a rule, however, they contain the following elements:</p> <ul> <li>Kicker</li> <li>Title</li> <li>Description</li> <li>Image / Symbol image</li> </ul> <p>Kickers can be inherited via the navigation hierarchy of the article, set individually by the editor or defined via the article type.</p> <p>Symbol image can be inherited via the navigation hierarchy of the article, set individually by editors or defined via the article type.</p> <p>Examples of extended teasers are</p> <ul> <li>News teaser: A date or category can be included here.</li> <li>Event teaser: Dates or categories can be included here.</li> <li>Contact teaser: Contact details or contact persons can be included here.</li> </ul>"},{"location":"concepts/web-account/","title":"WebAccount","text":"<p>The WebAccount is a central user account with which users can register and log in to a website. It is used for identification, authorization and personalization within a site.</p>"},{"location":"concepts/web-account/#use-cases","title":"Use cases","text":"<p>Registration &amp; login: Users can register themselves or be invited by administrators. After registration, extended functions are available.</p> <p>Personalized access: Content and functions of the website are activated individually depending on the authorization level (e.g. only for logged-in users or certain groups).</p> <p>Access-restricted areas: Used for extranet solutions, among other things.</p> <p>External content management: External users can use their WebAccount to maintain events, for example, without requiring internal access to the system administration.</p>"},{"location":"concepts/web-account/#authentication","title":"Authentication","text":"<p>WebAccount users are managed in the IES. If a user wants to authenticate themselves, a request is sent to the web server. The web server does not receive the request and in turn sends a request to the IES to carry out the authentication. The IES checks the access data and returns the user data if authentication is successful. A JWT token containing the user data is then generated on the web server side. This token is stored in a cookie and used for future requests to identify and authenticate the user.</p> <pre><code>sequenceDiagram\n    participant User as User\n    participant WebServer as Webserver\n    participant IES as IES\n\n    User-&gt;&gt;WebServer: Request with credentials\n    WebServer-&gt;&gt;IES: Authenticate user\n    IES--&gt;&gt;WebServer: Return user data\n    WebServer--&gt;&gt;User: Set JWT cookie and return response</code></pre> <p>Currently, authentication is only possible via user name and password. Other authentication mechanisms are conceivable and can be implemented depending on the project requirements.</p> <p>Already implemented authentication mechanisms are:</p> <ul> <li>LDAP authentication via the IES: The IES does not check the user name and password against its user administration but transfers the access data to an LDAP system which carries out the authentication.</li> </ul> <p>Other possible implementations would be:</p> <ul> <li> <p>Authentication mechanisms via the IES: The IES can support various authentication mechanisms.</p> <ul> <li> <p>Username and password authentication with 2FA: This is an addition to the existing authentication mechanism in which the IES supports two-factor authentication (2FA). The user enters their username and password and must also enter a confirmation code (<code>TOTP</code> - Time-based One-Time Password), which is generated via an authentication app.</p> </li> <li> <p>OpenID Connect via the IES: OpenID Connect authentication can be set up in the IES, which makes it possible to log in via external identity providers. The IES acts as an OpenID Connect client and forwards the authentication requests to the respective provider. Two scenarios are conceivable for the possible role assignments:</p> <ul> <li> <p>Claims mapping: Here, the user's claims, which are provided by the external identity provider, are mapped to the roles and authorizations in the IES. This enables fine-grained access control based on the user attributes. In this scenario, it is not necessary for the IES to create the users in the system, as authentication takes place directly via the external identity provider.</p> </li> <li> <p>Role assignment in the IES: In this scenario, the roles and authorizations are assigned manually in the IES. The IES receives the authentication information from the external identity provider and assigns the corresponding roles based on the rules defined in the IES. This enables central management of user roles and authorizations in the IES, independent of the external identity providers. In this scenario, it is necessary for the IES to create the users in the system, as authentication takes place directly via the external identity provider.</p> </li> </ul> </li> <li> <p>WebAuthn (Passkeys): WebAuthn is an open standard for authentication that allows users to log in securely and user-friendly with biometric data or hardware tokens. The IES can support WebAuthn to provide a modern and secure authentication method.</p> </li> </ul> </li> <li> <p>Authentication mechanisms directly in the web server It is possible for the web server itself to support various authentication mechanisms and therefore not be dependent on the IES. The prerequisite for this is that the authentication provider is accessible from the web server and can return the user data with the authentication. Possibly also data that can be used for role mapping.</p> <ul> <li> <p>LDAP authentication: The web server performs authentication directly against an LDAP directory. Role assignments must be made via mapping using the attributes or groups returned by the LDAP server.</p> </li> <li> <p>OAuth2/OpenID Connect: The web server can use OpenID Connect to authenticate users via external identity providers. Role assignments must be made via claims mapping.</p> </li> </ul> </li> </ul>"},{"location":"contribute/","title":"Contributing to Atoolo","text":"<p>Thank you for your interest in contributing to Atoolo! Your contributions help us to improve and develop this project. Here are some guidelines and information to help you make your contribution.</p>"},{"location":"contribute/#code-of-conduct","title":"Code of Conduct","text":"<p>Please read the following Code of Conduct before you start contributing. We expect all contributors to adhere to these guidelines in order to create a respectful and welcoming environment.</p>"},{"location":"contribute/#bug-reports","title":"Bug Reports","text":"<p>If you have found a bug, please follow these steps:</p> <ol> <li>Search for similar issues: Check if the issue has already been reported by searching in the.</li> <li>Create a new issue: If the issue has not yet been reported, create a new issue and provide as many details as possible:</li> <li>A clear and concise description of the problem.</li> <li>Steps to reproduce the bug.</li> <li>Expected behavior vs. actual behavior.</li> <li>Environment (PHP version, operating system, etc.).</li> </ol>"},{"location":"contribute/#feature-requests","title":"Feature Requests","text":"<p>We are always open to new ideas and improvements! If you would like to suggest a new feature:</p> <ol> <li>Discuss your idea: Open an issue and describe the proposed feature. We look forward to your feedback and ideas.    2 Be detailed: Describe why the feature is useful and how it could be implemented.</li> </ol>"},{"location":"contribute/#pull-requests","title":"Pull Requests","text":"<p>We look forward to your pull requests! To make sure everything goes smoothly, please follow these steps:</p> <ol> <li>Fork the repository: Make a copy of this repository in your own GitHub account.</li> <li>Create a new branch: Work on a separate branch of <code>main</code>, e.g. <code>feature/your-function</code> or <code>bugfix/your-bugfix</code>.</li> <li>Make sure that all coding rules are followed: Use the appropriate tools in the projects.</li> <li>Write meaningful commits: Provide clear and concise commit messages that describe the changes made. Adhere to the Conventional Commits Specification.</li> <li>Create the pull request: Open a pull request and describe your changes. Link any relevant issues.</li> </ol>"},{"location":"contribute/#coding-style","title":"Coding Style","text":"<p>This project uses the PER Coding Style 2.0. Please make sure that your code complies with these guidelines. Further information can be found in the PER Coding Style 2.0 documentation.</p>"},{"location":"contribute/#conventional-commits","title":"Conventional commits","text":"<p>This project uses the Conventional Commits Specification. Please adhere to this specification when creating commits.</p>"},{"location":"contribute/#tests","title":"Tests","text":"<p>Make sure that all tests are successful and add new tests for your changes if possible. Execute the tests before creating a pull request.</p>"},{"location":"contribute/#code-coverage","title":"Code Coverage","text":"<p>Make sure that your changes do not reduce the code coverage. The goal is 100% code coverage. Where 100% means that the code is tested that should be tested. It is legitimate to work with <code>@codeCoverageIgnore</code> if the code cannot be tested.</p> <p>The aim of the tests should also be to determine whether the entire project is also executable for future PHP versions.</p>"},{"location":"contribute/#documentation","title":"Documentation","text":"<p>If your changes affect the documentation, make sure that the documentation is updated. To do this, create a new pull request in the project Atoolo Docs</p>"},{"location":"contribute/#contact","title":"Contact","text":"<p>If you have any questions or need help, please do not hesitate create an issue.</p> <p>Thank you for your contribution!</p> <p>Atoolo Team</p>"},{"location":"develop/","title":"Develop with Atoolo","text":""},{"location":"develop/#components","title":"Components","text":"<p>Atoolo components are individual, preferably independent libraries that cover a defined functional area.</p> <p>Components</p>"},{"location":"develop/#bundles","title":"Bundles","text":"<p>Atoolo Bundles are Symfony Bundles that extend Symfony projects with certain Atoolo functionalities.</p> <p>Bundels</p>"},{"location":"develop/#graphql-api","title":"GraphQL API","text":"<p>Atoolo makes it easy to create and deploy GraphQL interfaces, allowing web applications to access structured data and perform complex search queries and interact with the suite's components for dynamic data handling.</p> <p>GraphQL API</p>"},{"location":"develop/symfony-flex-integration/","title":"Symfony Flex integration","text":"<p>Symfony-Flex is a powerful tool designed to simplify dependency management and configuration for Symfony projects. It aims to enhance developer productivity and efficiency. The main goals of Symfony-Flex are:</p> <ol> <li> <p>Simplified Installation and Management of Packages:    Symfony-Flex integrates with Composer to streamline the installation and updating of dependencies. It provides a user-friendly way to add and configure Symfony bundles and other PHP libraries.</p> </li> <li> <p>Automatic Configuration:    When a new package is installed, Symfony-Flex automatically configures it by creating the necessary configuration files and folders. This reduces the manual effort typically required for configuring new packages.</p> </li> <li> <p>Optimized Project Structure:    Symfony-Flex promotes best practices and a standardized structure for Symfony projects. It establishes a uniform directory structure and best practices that make maintaining and evolving applications easier.</p> </li> <li> <p>Reduction of Boilerplate Code:    By automating configuration and providing predefined recipes for many common libraries and bundles, Symfony-Flex reduces the amount of boilerplate code developers need to write. This accelerates development and simplifies the implementation of new features.</p> </li> <li> <p>Facilitates Migration and Updates:    Symfony-Flex helps manage dependencies and configurations during the migration or updating of Symfony projects. It ensures that the latest versions of packages and their configurations are smoothly integrated.</p> </li> <li> <p>Improved Developer Experience:    Overall, Symfony-Flex enhances the developer experience by simplifying dependency management, configuration, and project structure. It offers seamless integration and tools that optimize the development process.</p> </li> </ol> <p>Through these features, Symfony-Flex aims to make the development of Symfony applications more efficient, consistent, and less error-prone.</p>"},{"location":"develop/symfony-flex-integration/#sitepark-flex-repository","title":"Sitepark Flex Repository","text":"<p>Sitepark provides its own Symfony Flex repository, which contains recipes for various Symfony bundles and libraries. These recipes are tailored to Atoolo Suite and ensure that the configurations are set up correctly. By using the Sitepark Flex repository, developers can benefit from preconfigured recipes that are optimized for Symfony projects in conjunction with Atoolo.</p> <p>To use the Sitepark Flex repository, add the following entry to the <code>composer.json</code> file of your Symfony project:</p> <pre><code>composer config extra.symfony.allow-contrib true\ncomposer config --json extra.symfony.endpoint \\\n'[\"'\\\n'https://api.github.com/repos/sitepark/'\\\n'symfony-recipes/contents/index.json'\\\n'?ref=flex/main'\\\n'\"]'\ncomposer config --json --merge extra.symfony.endpoint \\\n'[\"flex://defaults\"]'\n</code></pre>"},{"location":"develop/bundles/","title":"Atoolo Bundles","text":"<p>Atoolo Bundles are Symfony Bundles that extend Symfony projects with certain Atoolo functionalities.</p>"},{"location":"develop/bundles/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing a bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install any of the Atoolo Bundles in your PHP project. Further information on the installation of Symfony bundles can be found here.</p> <pre><code>composer require atoolo/[bundle]\n</code></pre>"},{"location":"develop/bundles/#all-atoolo-bundles","title":"All Atoolo Bundles","text":"Name Description <code>atoolo/deployment-bundle</code> Symfony bundle to react to the deploy and undeploy of a project. <code>atoolo/runtime-check-bundle</code> Symfony bundle to react to the deploy and undeploy of a project. <code>atoolo/resource-bundle</code> Symfony bundle which contains tools that can be used to check whether the current runtime environment is set up as expected. <code>atoolo/search-bundle</code> Provides services with which a Solr index can be filled and searched for resources via this index. <code>atoolo/graphql-search-bundle</code> This bundle extends the GraphQL interface with a search. <code>atoolo/seo-bundle</code> This bundle contains features for search engine optimization. <code>atoolo/rewrite-bundle</code> This bundle contains functions for URL rewriting. <code>atoolo/microsite-bundle</code> This bundle provides the functionalities of microsites. <code>atoolo/citygov-bundle</code> CityGov is a product of Sitepark. The main areas of application of CityGov are the Internet presences of municipalities and district administrations as well as their employee portals on the intranet. <code>atoolo/citycall-bundle</code> CityCall is a software solution developed specifically for municipal service centers to enable employees to quickly and efficiently research and provide information for citizen inquiries. This platform serves as a central point of contact for telephone enquiries by optimizing access to complete and up-to-date information. By improving the provision of information, CityCall helps to speed up service for citizens and make the work of service center staff easier. <code>atoolo/events-calendar</code> The event calendar is a Sitepark product that enables the publication and management of events on websites. It offers various options for integrating events, including internal management via the content management system (CMS), external entry via web forms and import from other databases. Visitors to the website can search for events filtered by category, keyword and time period, enabling targeted and interest-based navigation. This module is a powerful tool for website operators to efficiently provide and manage information about upcoming events. It also provides integrations to external event calendars. <code>atoolo/web-account</code> The Web Account Bundle provides support for user registration and authentication directly on the website. It enables personalized features for registered users, such as commenting, managing personal event entries (with appropriate permissions), and other user-specific functionality."},{"location":"develop/bundles/citycall/","title":"CityGov Bundle","text":"<p>CityCall is a software solution developed specifically for municipal service centers to enable employees to quickly and efficiently research and provide information for citizen inquiries. This platform serves as a central point of contact for telephone enquiries by optimizing access to complete and up-to-date information. By improving the provision of information, CityCall helps to speed up service for citizens and make the work of service center staff easier.</p>"},{"location":"develop/bundles/citycall/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/atoolo-citycall-bundle.</p>"},{"location":"develop/bundles/citycall/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/citycall-bundle\n</code></pre>"},{"location":"develop/bundles/citycall/#extended-indexing","title":"Extended indexing","text":"<p>The bundle contains Document Enricher, which extends the full-text index for the search with CityCall-specific fields. This allows CityCall-specific searches to be created.</p>"},{"location":"develop/bundles/citygov/","title":"CityGov Bundle","text":"<p>CityGov is a product of Sitepark. The main areas of application of CityGov are the Internet presences of municipalities and district administrations as well as their employee portals on the intranet.</p>"},{"location":"develop/bundles/citygov/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/atoolo-citygov-bundle.</p>"},{"location":"develop/bundles/citygov/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/citygov-bundle\n</code></pre>"},{"location":"develop/bundles/citygov/#extended-indexing","title":"Extended indexing","text":"<p>The bundle contains Document Enricher, which extends the full-text index for the search with CityGov-specific fields. This allows CityGov-specific searches to be created.</p>"},{"location":"develop/bundles/deployment/","title":"Deployment Bundle","text":"<p>Symfony bundle to react to the deploy and undeploy of a project.</p>"},{"location":"develop/bundles/deployment/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/atoolo-deployment-bundle.</p>"},{"location":"develop/bundles/deployment/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/deployment-bundle\n</code></pre>"},{"location":"develop/bundles/deployment/#deployment-strategy","title":"Deployment strategy","text":"<p>There are various strategies for deploying PHP frameworks. The strategy for deploying Atoolo projects in the IES context is described below.</p> <p>The strategy is designed so that files no longer need to be loaded from a Git or Composer repository for deployment. The deployment is carried out by providing the project with all dependencies in a <code>tar.gz</code> archive. This archive is unpacked on the target server into a directory specifically created for this archive. E.G.</p> <pre><code>/apps/myproject-1.0.0\n</code></pre> <p>This deployment bundle provides a 'deploy' command that is now executed in the project.</p> <pre><code>/apps/myproject-1.0.0/bin/console deployment:deploy\n</code></pre> <p>Execute the command for the following steps:</p> <ol> <li>a Platform Check is performed to ensure that the required PHP version and the required PHP extensions are installed.</li> <li>create the Symfony caches for e.g. containers, routing, etc.</li> <li>execute bundle- and project-specific deployment task</li> </ol> <p>The project may only be activated once all steps have been successfully completed. This is done by setting a symlink to the directory that the web server uses for the relevant host.</p> <pre><code>/apps/myproject -&gt; /apps/myproject-1.0.0/\n</code></pre> <p>This enables a smooth update to a new version. It is also possible to roll back to a previous version.</p> <p>By using a symlink, however, there are a few things to consider for the PHP project.</p> <ul> <li>In the standard configuration, opcache does not recognize when the real path to a PHP file changes. However, this is the case if the symlink points to a new version. The option   <pre><code>opcache.revalidate_path = 1\n</code></pre>   can change this behavior. This means that the opcache checks whether the real path has changed with every request. This can be done in the web server configuration. For Apache, for example, in the VirtualHost configuration.   <pre><code>SetEnv PHP_VALUE \"opcache.revalidate_path = 1\"\n</code></pre>   This means that the configuration is retained even after a PHP minor update if the system creates a new configuration directory for the PHP version.</li> <li>The configuration of the web server must also be adapted. The web server must be configured so that it follows the symlink. In Apache, for example, this can be achieved with the <code>FollowSymLinks</code> option.</li> <li>When using the Symfony message bus, there are workers that wait for the messages. These workers must be restarted after a deployment.</li> </ul>"},{"location":"develop/bundles/deployment/#deployment-task","title":"Deployment-Task","text":"<p>You can implement your own deployment task. This bundle makes the interface <code>Atoolo\\Deployment\\Service\\DeploymentExecutable</code> available for this purpose.</p> <pre><code>namespace Example;\n\nuse Atoolo\\Deployment\\Service\\DeploymentExecutable;\n\nclass MyDeploymentTask implements DeploymentExecutable\n{\n    public function execute(): void\n    {\n        // Do something\n    }\n}\n</code></pre> <p>The task must then be registered in the service configuration.</p> <p><code>config/services.yaml</code></p> <pre><code>services:\n  Example\\MyDeploymentTask:\n    tags:\n      - { name: \"atoolo_deployment.deploy_executor\" }\n</code></pre>"},{"location":"develop/bundles/deployment/#automated-stopping-of-the-worker-after-deployment","title":"Automated stopping of the worker after deployment","text":"<p>This bundle starts a listener that checks whether a deployment has taken place. This is recognized by the fact that the original path of the project has changed. If this is the case, the worker processes its current queue and is then stopped.</p> <p>When using <code>supervisor</code> to manage the worker processes, the process is automatically restarted when it is terminated. This behavior can be influenced by the configuration of <code>supervisor</code>. This ensures that the worker processes are active again after a deployment.</p>"},{"location":"develop/bundles/deployment/#run-deployment-via-fpm","title":"Run deployment via FPM","text":"<p>The project also provides the route <code>/api/admin/deploy</code> to start the deployment process via FPM. This is useful if the deployment process cannot be started via the console. As the deploy command must be executed before it is activated, this cannot be done via an HTTP request, as this only reaches the already active project.</p> <p>The request must therefore be made directly via the FastCGI protocol, which is also used by the web server to address the FMP process.</p> <p>This can be done via the script <code>cgi-fcgi</code>, for example.</p> <p>Install <code>cgi-fcgi</code>:</p> <pre><code>sudo apt-get install libfcgi0ldbl\n</code></pre> <p>First of all, a JWT token is required sie also atoolo/security-bundle:</p> <pre><code>JWT_DIR=/path/to/jwt-keys\nJWT_SECRET_KEY=$JWT_DIR/private.pem\nJWT_PUBLIC_KEY=$JWT_DIR/public.pem\nDOCUMENT_ROOT=/apps/myproject-1.0.0/public\nSCRIPT_FILENAME=$DOCUMENT_ROOT/index.php\nFPM_SOCKET=127.0.0.1:9000\n# Access via the unix socket must be via 'root' or the user 'www-data'\n#FPM_SOCKET=/run/php/php-fpm.sock\n#FPM_SOCKET=/run/php/php8.3-fpm.sock\n\nJSON_DATA='{\"username\":\"api\", \"password\":\"__REPLACE_WITH_PASSWORD__\"}'\nREQUEST_PATH=/api/login_check\n\necho $JSON_DATA | \\\nJWT_SECRET_KEY=$JWT_SECRET_KEY \\\nJWT_PUBLIC_KEY=$JWT_PUBLIC_KEY \\\nJWT_PASSPHRASE= \\\nSCRIPT_FILENAME=$SCRIPT_FILENAME \\\nDOCUMENT_ROOT=$DOCUMENT_ROOT \\\nCONTENT_TYPE=application/json \\\nCONTENT_LENGTH=${#JSON_DATA} \\\nREQUEST_METHOD=POST \\\nREQUEST_URI=$REQUEST_PATH \\\ncgi-fcgi -bind -connect $FPM_SOCKET\n</code></pre> <p>The deployment process can then be started with the token:</p> <pre><code>REQUEST_PATH=/api/admin/deploy\nJWT=__REPLACE_WITH_JWT_TOKEN__\n\nJWT_SECRET_KEY=$JWT_SECRET_KEY \\\nJWT_PUBLIC_KEY=$JWT_PUBLIC_KEY \\\nJWT_PASSPHRASE= \\\nSCRIPT_FILENAME=$SCRIPT_FILENAME \\\nDOCUMENT_ROOT=$DOCUMENT_ROOT \\\nREQUEST_METHOD=GET \\\nREQUEST_URI=$REQUEST_PATH \\\nHTTP_AUTHORIZATION=\"Bearer $JWT\" \\\ncgi-fcgi -bind -connect $FPM_SOCKET\n</code></pre>"},{"location":"develop/bundles/events-calendar/","title":"Events Calendar Bundle","text":"<p>The event calendar is a Sitepark product that enables the publication and management of events on websites. It offers various options for integrating events, including internal management via the content management system (CMS), external entry via web forms and import from other databases. Visitors to the website can search for events filtered by category, keyword and time period, enabling targeted and interest-based navigation. This module is a powerful tool for website operators to efficiently provide and manage information about upcoming events. It also provides integrations to external event calendars.</p>"},{"location":"develop/bundles/events-calendar/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/atoolo-events-calendar-bundle.</p>"},{"location":"develop/bundles/events-calendar/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/events-calendar-bundle\n</code></pre>"},{"location":"develop/bundles/events-calendar/#rce-event-integration","title":"RCE-Event integration","text":"<p>RCE-Event is establishing itself as the standard in German-speaking countries for the recording, administration, distribution and publication of events.</p> <p>This bundle provides an indexer that transfers the events from RCE-Event to the search index. This allows the events to be found as an external page via the search.</p> <p>To activate the RCE event indexer, the file <code>config/rce-event.php</code> must be created in the resource channel. This is usually done via a configuration article in the CMS. To activate the scheduler, the following service must be activated in the <code>config/services.yaml</code> of the project:</p> <pre><code>Atoolo\\EventsCalendar\\Service\\Indexer\\RceEventIndexerScheduler:\n  arguments:\n    - \"%atoolo_events_calendar.indexer.rce_event_indexer_scheduler.cron%\"\n</code></pre> <p>The parameter <code>%atoolo_events_calendar.indexer.rce_event_indexer_scheduler.cron%</code> has the default value <code>'0 6-20/2 * * *</code> (every 2 hours from 6am to 8pm)</p>"},{"location":"develop/bundles/form/","title":"Form Bundle","text":"<p>This bundle provides an HTTP interface via which forms can be displayed and processed with the help of JSON Forms.</p> <p>See also Form API.</p>"},{"location":"develop/bundles/form/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/atoolo-form-bundle.</p>"},{"location":"develop/bundles/form/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/form-bundle\n</code></pre>"},{"location":"develop/bundles/form/#submit-processors","title":"Submit Processors","text":"<p>The form data is submitted to the Form API. This is then processed by one or more submit processors.</p> <p>All submit processors implement the <code>SubmitProcessor</code>- interface and process the form data in a chain of processors.</p> <pre><code>/**\n * @template T of SubmitProcessorOptions\n */\n#[AutoconfigureTag('atoolo_form.processor')]\ninterface SubmitProcessor\n{\n    /**\n     * @template E of T\n     * @param E $options\n     */\n    public function process(FormSubmission $submission, SubmitProcessorOptions $options): FormSubmission;\n}\n</code></pre> <p>Each processor must have a key. This key is specified in the configuration of the form definition to define which processor processes the data. This can be done via the PHP attribute <code>AsTaggedItem</code>. It is also important to specify the priority, as the processors are executed in the order of priority.</p> <pre><code>#[AsTaggedItem(index: 'my-processor', priority: 21)]\nclass MyProcessor implements SubmitProcessor\n{\n    public function process(FormSubmission $submission, SubmitProcessorOptions $options): FormSubmission\n    {\n        return $submission;\n    }\n}\n</code></pre> <p>The form definition can be used to determine which processors are to be used. However, the sequence cannot be influenced.</p> <p>The bundle is used to define default processors that are always used. However, these can also be overwritten.</p> <p><code>config/packages/atoolo_form.yaml</code></p> <pre><code>parameters:\n  atoolo_form_default_processors:\n    \"ip-limiter\": ~\n    \"submit-limiter\": ~\n    \"json-schema-validator\": ~\n</code></pre> <p>The order of the processors can be controlled via the priority. The higher the priority, the earlier the processor is executed.</p>"},{"location":"develop/bundles/form/#iplimiter-ip-limiter-priority-80","title":"IpLimiter (<code>ip-limiter, priority: 80</code>)","text":"<p>The IP limiter is used to limit the number of form submissions per IP address.</p> <p>The configuration can be changed in the project via a customized configuration.</p> <p><code>config/packages/rate_limiter.yaml</code></p> <pre><code>rate_limiter:\n  form_submit_by_ip:\n    # https://symfony.com/doc/current/rate_limiter.html#token-bucket-rate-limiter\n    policy: \"token_bucket\"\n    limit: 20\n    rate: { interval: \"15 minutes\", amount: 5 }\n</code></pre>"},{"location":"develop/bundles/form/#submitlimiter-submit-limiter-priority-70","title":"SubmitLimiter (<code>submit-limiter, priority: 70</code>)","text":"<p>The submit limiter is used to limit the number of form submissions across all forms and IP addresses.</p> <p>The configuration can be changed in the project via a customized configuration.</p> <p><code>config/packages/rate_limiter.yaml</code></p> <pre><code>rate_limiter:\n  form_submit_total:\n    # https://symfony.com/doc/current/rate_limiter.html#token-bucket-rate-limiter\n    policy: \"token_bucket\"\n    limit: 1000\n    rate: { interval: \"15 minutes\", amount: 100 }\n</code></pre>"},{"location":"develop/bundles/form/#jsonschemavalidator-json-schema-validator-priority-20","title":"JsonSchemaValidator (<code>json-schema-validator, priority: 20</code>)","text":"<p>The <code>JsonSchemaValidator</code>-SubmitProcessor can be used to validate form data against a JSON schema.</p> <p>For the validation of non-standardized formats, separate format validators can be implemented. These must implement the <code>FormatConstraint</code> interface.</p> <pre><code>#[AutoconfigureTag('atoolo_form.jsonSchemaConstraint')]\ninterface Constraint {}\n\ninterface FormatConstraint extends Constraint\n{\n    /**\n     * Returns the JSON-Schema type that this constraint applies to.\n     */\n    public function getType(): string;\n\n    /**\n     * Returns the format name to which this constraint applies.\n     */\n    public function getName(): string;\n\n    /**\n     * Validates the given value against the format constraint.\n     *\n     * @param mixed $value The value to validate.\n     * @param stdClass $schema The schema that defines the format constraint.\n     * @return bool Whether the value is valid.\n     */\n    public function check(mixed $value, stdClass $schema): bool;\n}\n</code></pre>"},{"location":"develop/bundles/form/#emailsender-email-sender-priority-10","title":"EmailSender (<code>email-sender, priority: 10</code>)","text":"<p>The <code>EmailSender</code>-SubmitProcessor can be used to send form data by e-mail.</p>"},{"location":"develop/bundles/form/#e-mail-template","title":"E-Mail Template","text":"<p>The html email is generated from a Twig template. There are 3 templates for this</p> <code>@AtooloForm/email.html.twig</code> Contains the frame HTML with header and footer <code>@AtooloForm/email.html.summary.twig</code> : Contains a summary of the submitted forms. Contains a summary of the transmitted form data <code>@AtooloForm/email.html.styles.css</code> : Contains the CSS styles. Contains the CSS styles for the e-mail template <p>If necessary, these can also be overwritten in your own project by storing the corresponding templates in your own project under <code>templates/bundles/AtooloFormBundle</code>.</p>"},{"location":"develop/bundles/microsite/","title":"Microsite Bundle","text":"<p>Microsites are compact, thematically focused websites that deal exclusively with a specific topic. They are often used to highlight specific topics such as events, projects, offers or campaigns. Further information can be found in the microsite concept.</p> <p>This bundle provides the functionalities of microsites.</p>"},{"location":"develop/bundles/microsite/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/atoolo-microsite-bundle.</p>"},{"location":"develop/bundles/microsite/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/microsite-bundle\n</code></pre>"},{"location":"develop/bundles/microsite/#configuration","title":"Configuration","text":"<p>Pages from the main website or other microsites can be integrated into microsites. A so-called \"mounting\" is used for this purpose. This is defined in the microsite configuration.</p> <p><code>config/package/microsite.yaml</code></p> <pre><code>atoolo_microsite:\n  mountable_object_types: [\"event\"]\n</code></pre>"},{"location":"develop/bundles/resource/","title":"Resource Bundle","text":"<p>In the Atoolo context, resources from IES are aggregated data that can be handled through this library.</p> <p>There can be different formats in which the resource is aggregated by the CMS. The current format is the <code>SiteKit</code> format. Here, a PHP file is created for each article in which the data is stored in the form of PHP arrays. The data is read out via the corresponding <code>ResourceLoader</code> and made available in a <code>Resource</code> object.</p> <p>These resources created by the IES are referred to as \"internal\" resources. The term \"external\" resources is used when the resource object is filled with data that does not originate from the IES.</p>"},{"location":"develop/bundles/resource/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/atoolo-resource-bundle.</p>"},{"location":"develop/bundles/resource/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/resource-bundle\n</code></pre>"},{"location":"develop/bundles/resource/#the-resource","title":"The Resource","text":"<p>The resource represents a data object published by the IES. This can be an article but also other objects that can be published by CMS.</p> <p>See Resource for more information.</p> <p>The data is held in a <code>DataBag</code>, via which it can be read in a typed form. A string with dot notation can be used to retrieve more deeply nested data.</p> <p>For a given data structure:</p> <pre><code>{\n  \"id\": 1,\n  \"name\": \"name\",\n  \"groupPath\": [\n    {\n      \"id\": 123,\n      \"name\": \"A\"\n    },\n    {\n      \"id\": 456,\n      \"name\": \"B\"\n    }\n  ],\n  \"base\": {\n    \"teaser\": {\n      \"date\": 1713516141,\n      \"headline\": \"Headline\",\n      \"text\": \"Text\"\n    }\n  }\n}\n</code></pre> <p>The data can be queried as follows, for example.</p> <ul> <li><code>$resource-&gt;data-&gt;getInt('base.teaser.date')</code></li> <li><code>$resource-&gt;data-&gt;getString('base.teaser.headline', 'Untitled')</code></li> <li><code>$resource-&gt;data-&gt;getArray('groupPath')</code></li> <li><code>$resource-&gt;data-&gt;getAssociativeArray('base.teaser')</code></li> </ul>"},{"location":"develop/bundles/resource/#loading-a-resource","title":"Loading a resource","text":"<p>Resources are loaded via a <code>ResourceLoader</code>. Depending on the format in which the data is aggregated, a corresponding ResourceLoader must be used. The current format is the <code>SiteKit</code> format. The <code>Atoolo\\Resource\\Loader\\SiteKitLoader</code> is available for this. The <code>SiteKitLoader</code> also requires a <code>ResourceChannel</code>.</p>"},{"location":"develop/bundles/resource/#resourcechannel","title":"<code>ResourceChannel</code>","text":"<p>The IES recognizes various channels through which resources can be published. A channel is a directory that is always assigned to a specific virtual host.</p> <p>See Resource channel for more information.</p> <p>A <code>ResourceChannel</code> can be created via a <code>ResourceChannelFactory</code>.</p> <pre><code>$resourceChannel = $resourceChannelFactory-&gt;create();\n</code></pre>"},{"location":"develop/bundles/resource/#resourcechannelfactory","title":"<code>ResourceChannelFactory</code>","text":"<p>The <code>ResourceChannelFactory</code> is an interface. The only implemented class is the <code>SiteKitResourceChannelFactory</code>.</p> <pre><code>use Atoolo\\Resource\\SiteKitResourceChannelFactory;\n\n$resourceChannelFactory = new SiteKitResourceChannelFactory($resourceRoot);\n$resourceChannel = $resourceChannelFactory-&gt;create();\n</code></pre>"},{"location":"develop/bundles/resource/#sitekitloader","title":"<code>SiteKitLoader</code>","text":"<p>The <code>ResourceChannel</code> can be used to create the <code>SiteKitLoader</code>.</p> <pre><code>use Atoolo\\Resource\\Loader\\SiteKitLoader;\nuse Atoolo\\Resource\\ResourceLocation;\n\n$loader = new SiteKitLoader($resourceChannel);\n</code></pre> <p>Resources can now be loaded.</p> <pre><code>$location = ResourceLocation::of ('/index.php');\n$resource = $loader-&gt;load(location);\n</code></pre>"},{"location":"develop/bundles/resource/#cachedresourceloader","title":"<code>CachedResourceLoader</code>","text":"<p>The <code>CachedResourceLoader</code> class is used to load resources from a given location and cache them for future use. The cache is stored in memory and is not persistent. The <code>CachedResourceLoader</code> wrapped another <code>ResourceLoader</code> and caches the resources loaded by the wrapped loader.</p> <pre><code>use Atoolo\\Resource\\Loader\\CachedResourceLoader;\nuse Atoolo\\Resource\\ResourceLocation;\n\n$cachedloader = new CachedResourceLoader($loader);\n$location = ResourceLocation::of('/index.php');\n$resource = $cachedloader-&gt;load($location);\n</code></pre>"},{"location":"develop/bundles/resource/#loading-resource-hierarchy","title":"Loading resource hierarchy","text":"<p>Resources can be linked to each other hierarchically. This is the case, for example, via the navigation. Here the root element is the homepage. Category resources are another case. Categories can also be structured hierarchically. These hierarchies can be read out with the <code>ResourceHierarchyLoader</code>.</p> <p>There is a special case for navigation. Here, every resource (except the homepage) has a navigation parent. If no parent is explicitly defined, the current directory and all higher-level directories are searched for an <code>index.php</code> and checked to see if it is the homepage. If it is found, this is the implicit parent for the resource. Therefore, there is a special <code>SiteKitNavigationHierarchyLoader</code> for the navigation. The <code>SiteKitResourceHierarchyLoader</code> is used for all other cases.</p> <p><code>ResourceHierarchyLoader</code> also require a <code>ResourceLoader</code> (see above).</p> <p>Create <code>SiteKitNavigationHierarchyLoader</code>:</p> <pre><code>$hierarchyLoader = new SiteKitNavigationHierarchyLoader($loader);\n</code></pre> <p>or create a <code>SiteKitResourceHierarchyLoader</code>. The name of the hierarachy type is still required here. In this case for categories.</p> <pre><code>$hierarchyLoader = new SiteKitResourceHierarchyLoader($loader, 'category');\n</code></pre> <p>Once the hierarchy loader has been created, the hierarchies can be queried. For example to load the root.</p> <pre><code>$location = ResourceLocation::of('/a/b/c.php');\n$rootResource = $hierarchyLoader-&gt;loadRoot($location');\n</code></pre>"},{"location":"develop/bundles/resource/#p-parameter-service","title":"P Parameter Service","text":"<p>The <code>Atoolo\\Resource\\Service\\PParameterService</code> (<code>atoolo_resource.p_parameter_service</code>) can be used to generate P parameters with foreign parent.</p> <p>For more information, see P parameter with foreign parent.</p> <pre><code>$pParameter = $pParameterService-&gt;getPParameterForForeignParent(\n  ResourceLocation::ofPath('/culture/event-search.php'),\n  ResourceLocation::ofPath('/service/events-calendar/some-event'),\n);\n</code></pre>"},{"location":"develop/bundles/resource/#using-symfony-parameter-and-services","title":"Using Symfony parameter and services","text":"<p>The bundle defines the parameter <code>atoolo_resource.resource_root</code> which is used to determine.</p> <pre><code>parameters:\n  atoolo_resource.resource_root: \"%env(RESOURCE_ROOT)%\"\n</code></pre> <p>If the environment variable <code>RESOURCE_ROOT</code> is not set, the <code>Atoolo\\Resource\\Env\\EnvVarLoader</code> intervenes. This can determine the resource root for command line calls via the path of the <code>bin/console</code> script if the script was called via the host path. Like e.g.</p> <pre><code>/var/www/example.com/www/app/bin/console\n</code></pre> <p>The bundle provides the corresponding classes via service IDs. These can be used in a Symfony project via dependency injection.</p> Service-Id Description <code>atoolo_resource.resource_channel</code> The <code>ResourceChannel</code> <code>atoolo_resource.resource_loader</code> currently the <code>SiteKitLoader</code> <code>atoolo_resource.navigation_hierarchy_loader</code> currently the <code>SiteKitNavigationHierarchyLoader</code> <code>atoolo_resource.category_hierarchy_loader</code> currently the <code>SiteKitResourceHierarchyLoader</code>"},{"location":"develop/bundles/resource/#using-resourcehierarchywalker","title":"Using ResourceHierarchyWalker","text":"<p>The <code>ResourceHierarchyWalker</code> class is used to traverse a hierarchy of resources. The walker needs a base resource to start with. This can be set with <code>init()</code>.</p> <p>The walker can then be moved up and down in the hierarchy with the help of methods like</p> <ul> <li><code>down()</code></li> <li><code>child()</code></li> <li><code>up()</code></li> <li><code>nextSibling()</code></li> <li><code>previousSibling()</code></li> <li><code>next()</code></li> </ul> <p>With these methods, the walker can only move below the base resource. To move above the base resource, the methods <code>primaryParent()</code> and <code>parent()</code> can be used.</p> <p>The walker can also be used to traverse the entire hierarchy with the help of the <code>walk()</code> method.</p> <pre><code>use Atoolo\\Resource\\ResourceHierarchyWalker;\n\n$walker = new ResourceHierarchyWalker($hierarchyLoader);\n\n// step by step\n$location = ResourceLocation::of('/index.php');\n$walker-&gt;init($location);\n$walker-&gt;down();\n$walker-&gt;nextSibling();\n$walker-&gt;next();\n// ...\n\n// walk through the hierarchy\n$walker-&gt;walk($location, function ($resource) {\n  // do something with the resource\n});\n</code></pre>"},{"location":"develop/bundles/resource/#using-resourcehierarchyfinder","title":"Using ResourceHierarchyFinder","text":"<p>The <code>ResourceHierarchyFinder</code> class is used to find a resource in a hierarchy. Use <code>findFirst()</code> to find the first resource that matches the given condition.</p> <pre><code>use Atoolo\\Resource\\ResourceHierarchyFinder;\n\n$finder = new ResourceHierarchyFinder($this-&gt;loader);\n$anchor = \"anchor-to-find\";\n$location = ResourceLocation::of('/index.php');\n$resource = $finder-&gt;findFirst(\n    $location,\n    function ($resource) use ($anchor) {\n        $resourceAnchor =\n            $resource-&gt;getData()-&gt;getString('anchor');\n        return $resourceAnchor === $anchor;\n    }\n);\n</code></pre>"},{"location":"develop/bundles/rewrite/","title":"Rewrite Bundle","text":"<p>This bundle contains functions for URL rewriting.</p>"},{"location":"develop/bundles/rewrite/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/atoolo-rewrite-bundle.</p>"},{"location":"develop/bundles/rewrite/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/rewrite-bundle\n</code></pre>"},{"location":"develop/bundles/rewrite/#url-rewriting","title":"Url rewriting","text":"<p>The url rewriter enables the manipulation of URLs via a central point. For this, however, it is necessary that the URLs to be manipulated are passed to the URL rewriter by the services to which these URLs are known.</p> <p>For the central URL rewriter, the class <code>Atoolo\\Rewrite\\Service\\UrlRewriteHandlerCollection</code> is available as a Symfony service under the alias <code>atoolo_rewrite.url_rewriter</code>. Various handlers can be registered for the <code>UrlRewriteHandlerCollection</code>. To do this, the handler must implement the interface <code>Atoolo\\Rewrite\\Service\\UrlRewriterHandler</code>.</p> <p>Example of a handler:</p> <pre><code>use Atoolo\\Rewrite\\Dto\\Url;\nuse Atoolo\\Rewrite\\Dto\\UrlRewriterHandlerContext;\nuse Atoolo\\Rewrite\\Dto\\UrlRewriteType;\n\nclass MyUrlRewriteHandler implements UrlRewriterHandler\n{\n    public function rewrite(\n        Url $url,\n        UrlRewriterHandlerContext $context,\n    ): Url {\n      $manipulatedUrl = $url-&gt;toBuilder()\n          // manipulate the url\n          -&gt;build();\n\n      return $manipulatedUrl;\n    }\n}\n</code></pre> <p>The handler can then be registered via tagging in the Symfony service configuration:</p> <pre><code>services:\n  MyUrlRewriteHandler:\n    class: MyUrlRewriteHandler\n    tags:\n      - { name: atoolo_rewrite.url_rewrite_handler }\n</code></pre>"},{"location":"develop/bundles/rewrite/#using-the-rewriter","title":"Using the rewriter","text":"<p>The rewriter can be used in a Symfony service:</p> <pre><code>use Atoolo\\Rewrite\\Dto\\UrlRewriteOptions;\nuse Atoolo\\Rewrite\\Dto\\UrlRewriteType;\nuse Atoolo\\Rewrite\\Service\\UrlRewriter;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;\n\nclass MyService\n{\n    public function __construct(\n        #[Autowire(service: 'atoolo_rewrite.url_rewriter')]\n        private readonly UrlRewriter $urlRewriter,\n    ) {}\n\n    public function doSomething(): void\n    {\n        $url = $this-&gt;urlRewriter-&gt;rewrite(\n            'https://example.com',\n            UrlRewriteType::Link,\n            UrlRewriteOptions::none(),\n        );\n    }\n</code></pre> <p>All URLs transferred in this way can then be manipulated centrally via the various handlers.</p> <p>There may be cases where only certain types of URLs are to be changed. Therefore, the type of URL must always be specified. The possible types are</p> Type Description <code>Link</code> The URL is a link. <code>Image</code> The URL is an image. <code>Media</code> The url is a medium e.g. a PDF."},{"location":"develop/bundles/rewrite/#build-in-handler","title":"Build-in Handler","text":"<p>The bundle provides several handlers that are already available for the standard URL rewriter (<code>atoolo_rewrite.url_rewriter</code>).</p>"},{"location":"develop/bundles/rewrite/#language-prefix-handler-atoolo_rewriteurl_rewrite_handlerlang_prefix","title":"Language prefix handler (<code>atoolo_rewrite.url_rewrite_handler.lang_prefix</code>)","text":"<p>This handler is used to set a prefix path for a language. Various rules apply to determine the language code to be used.</p> <p>The parameter <code>atoolo_rewrite.url_rewrite_handler.lang_prefix.default</code> can be used to specify a default code in the format <code>[lang-code]:[redirect-to-default-lang-prefix]</code> (e.g. <code>en:false</code>).</p> <p><code>config/service.xml</code></p> <pre><code>parameters:\n  atoolo_rewrite.url_rewrite_handler.lang_prefix.default: 'en:false'\n</code></pre> <p>This defines what the default language is and whether or not the prefix should be set for the default language.</p> <p>The language to be used can be specified to the rewriter via the <code>UrlRewriteOptions</code>:</p> <pre><code>UrlRewriteOptions::builder()-&gt;lang('en')-&gt;build();\n</code></pre> <p>If the language is not specified via the <code>UrlRewriteOptions</code>, the language is determined via the request. This checks whether the language code has been specified as a path prefix for the request.</p>"},{"location":"develop/bundles/rewrite/#php-suffix-handler-atoolo_rewriteurl_rewrite_handlerphp_suffix","title":"<code>.php</code> suffix handler (<code>atoolo_rewrite.url_rewrite_handler.php_suffix</code>)","text":"<p>URLs with the extension <code>.php</code> are removed.</p> <p><code>/foo/bar.php</code> becomes <code>/foo/bar</code>. A special case here is when the URL ends with <code>/index.php</code>. In this case, <code>index.php</code> is removed so that the URL ends with <code>/</code>. For example, <code>/foo/bar/index.php</code> becomes <code>/foo/bar/</code>.</p>"},{"location":"develop/bundles/rewrite/#special-url-rewriter","title":"Special url rewriter","text":"<p>Wenn nicht der zentrale URL-Rewriter genutzt werde soll, sonder nur bestimmte Handler verwendet werden soll, kann auch ein eigenen Service definiert werden.</p> <p><code>config/service.yml</code></p> <pre><code>services:\n  my.url_rewriter:\n    class: Atoolo\\Rewrite\\Service\\UrlRewriteHandlerCollection\n    arguments:\n      - [\"@my_handler\"]\n</code></pre>"},{"location":"develop/bundles/runtime-check/","title":"Runtime Check Bundle","text":"<p>Symfony bundle which contains tools that can be used to check whether the current runtime environment is set up as expected.</p>"},{"location":"develop/bundles/runtime-check/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/runtime-check-bundle.</p>"},{"location":"develop/bundles/runtime-check/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/runtime-check-bundle\n</code></pre>"},{"location":"develop/bundles/runtime-check/#motivation","title":"Motivation","text":"<p>The bundle is an addition to the Runtime component. Unlike the Runtime component, the checks are not carried out each time they are called, but must be triggered explicitly. This can be done via a command line command or via an HTTP request. The aim is to provide a possibility to check the project for its executability. It should support PHP updates by allowing the checks to be carried out before the new PHP version is activated.</p> <p>Furthermore, the project or other bundles should be able to extend the checks. The checks are also intended to be executed regularly by a monitoring system.</p>"},{"location":"develop/bundles/runtime-check/#usage","title":"Usage","text":"<p>The use of the bundle is described under Operate / Runtime check.</p>"},{"location":"develop/bundles/runtime-check/#custom-checks","title":"Custom Checks","text":"<p>The bundle provides an interface <code>Atoolo\\Runtime\\Check\\Service\\Checker\\Checker</code>, which can be used to implement your own checks.</p> <p>Here is an example for your own check:</p> <pre><code>declare(strict_types=1);\n\nnamespace Example\\Service\\Checker;\n\nuse Atoolo\\Runtime\\Check\\Service\\Checker;\nuse Atoolo\\Runtime\\Check\\Service\\CheckStatus;\n\nclass MyChecker implements Checker\n{\n    public function getScope(): string\n    {\n        return \"myscope\";\n    }\n\n    public function check(): CheckStatus\n    {\n\n        $success = ... // check if the check is successful\n\n        if (!$success) {\n          $status = CheckStatus::createFailure();\n          $status-&gt;addReport($this-&gt;getScope(), [\n            'myfield' =&gt; 'myvalue'\n            // any other data\n          ]);\n          $status-&gt;addMessage($this-&gt;getScope(), \"My error message\");\n          return $status;\n        }\n\n        $status = CheckStatus::createSuccess();\n        $status-&gt;addReport($this-&gt;getScope(), [\n          'myfield' =&gt; 'myvalue'\n          // any other data\n        ]);\n\n        return $status;\n    }\n}\n</code></pre> <p>If the check is successful, a status is created with <code>CheckStatus::createSuccess()</code>. If the check fails, the status is created with <code>CheckStatus::createFailure()</code>. Report data can be added in both cases. In the event of an error, at least one error message should be added with <code>$status-&gt;addMessage()</code>.</p> <p>The scope is any name that is assigned to the check. The checks can be grouped via the scope.</p> <p>The check must still be registered as a service:</p> <p><code>services.yaml</code></p> <pre><code>Example\\Service\\Checker\\MyChecker:\n  tags:\n    - { name: \"atoolo_runtime_check.checker\" }\n</code></pre>"},{"location":"develop/bundles/security/","title":"Security Bundle","text":"<p>The Atoolo Security Bundle is based on the Security Bundle and contains Atoolo-specific configurations and extensions for a role and user management system that can be maintained via the IES.</p> <p>If necessary, it contains the necessary settings to secure individual queries of the GraphQL interface.</p>"},{"location":"develop/bundles/security/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/atoolo-security-bundle.</p>"},{"location":"develop/bundles/security/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/security-bundle\n</code></pre>"},{"location":"develop/bundles/security/#description","title":"Description","text":"<p>The Atoolo security bundle extends the Symfony security bundle. It is used to secure API access to the website and to protect resources provided by the IES. The protection of resources via the security bundle is intended for simple cases. The CMS itself provides another option for protecting resources, which is much more powerful.</p> <p>This bundle uses a user and role concept to control access. There are currently two ways to define users and roles.</p> <ol> <li><code>realm.properties</code> file</li> <li>PHP files for users and roles below the <code>RESOURCE_ROOT/security</code> directory</li> </ol>"},{"location":"develop/bundles/security/#realmproperties-file","title":"<code>realm.properties</code> file","text":"<p>The property file is loaded via the <code>Atoolo\\Security\\RealmPropertiesUserLoader</code>. This expects a path to the property file.</p> <p>A user name and a password are expected per line in the file, separated by a colon. The roles of the user can be specified after the password, separated by a comma.</p> <pre><code>; comments are allowed\n[username]: [password],[role1],[role2],...\n</code></pre>"},{"location":"develop/bundles/security/#user-and-access-php-files","title":"User and access PHP files","text":"<p>These PHP files are stored in a directory <code>RESOURCE_ROOT/security</code>. They are intended to be created by the CMS. This allows simple user administration to be realized with CMS means.</p> <p>User files have the extension <code>.users.php</code> and access files have the extension <code>.access.php</code>.</p> <p>User files are structured as follows:</p> <pre><code>return [\n    ['username' =&gt; 'a', 'password' =&gt; 'hash:a', 'roles' =&gt; ['user']],\n    ['username' =&gt; 'b', 'password' =&gt; 'hash:b', 'roles' =&gt; ['user', 'admin']],\n];\n</code></pre> <p>Access files are structured as follows:</p> <pre><code>&lt;?php\n\nreturn [\n    ['path' =&gt; '^/path-a/', 'roles' =&gt; ['a']],\n    ['path' =&gt; '^/path-b/', 'roles' =&gt; ['b']],\n    ['path' =&gt; '^/path-c/', 'ips' =&gt; ['192.168.0.1/24'], 'roles' =&gt; ['c']]\n];\n</code></pre> <p>The roles file can be used to define which roles can access which paths.</p> <p>Here this security bundle uses the <code>PathRequestMatcher</code> and <code>IpsRequestMatcher</code> from Symfony.</p>"},{"location":"develop/bundles/seo/","title":"Seo Bundle","text":"<p>This bundle contains features for search engine optimization. Included are:</p> <ul> <li>Controller for providing the Sitemap-XML</li> </ul>"},{"location":"develop/bundles/seo/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/atoolo-seo-bundle.</p>"},{"location":"develop/bundles/seo/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/seo-bundle\n</code></pre>"},{"location":"develop/bundles/seo/#sitemap-xml","title":"Sitemap-XML","text":"<p>The bundle provides a controller that generates a sitemap XML for the pages managed by the IES. The sitemap XML is provided under the URL <code>/sitemap.xml</code>. The number of entries in a sitemap XML is limited. The entries are therefore split across several requests. For this reason, the URL <code>/sitemap.xml</code> initially only provides an index with further references to the actual Sitemap XML files. See also Large Sitemaps.</p> <p>The IES can also be used to manage subordinate microsites for a site. Optionally, these microsites can also be delivered via their own domain. In this case, the microsite provides its own <code>robots.xml</code>. In this case, entries may have to be removed from the <code>sitemap.xml</code> of the main site. This is done via an additional parameter <code>siteExcludes=1124,2324</code> in the URL. Example: <code>/sitemap.xml?siteExcludes=1124,2324</code>. The site IDs of the microsites are transferred as the parameter value.</p> <p>The <code>sitemap.xml</code> of the corresponding microsite may only contain the entries of the microsite. As the entries are determined via the search index and all entries are contained there, the entries must be filtered. This is done using the parameter <code>siteIncludes=1124</code> in the URL. Example: <code>/sitemap.xml?siteIncludes=1124</code>. The site ID of the microsite is passed as the parameter value.</p> Routes Description <code>/sitemap.xml</code> Returns the sitemap index <code>/sitemap-{page}.xml</code> Returns the sitemap entries of the corresponding page"},{"location":"develop/bundles/seo/#multilingual-site","title":"Multilingual site","text":"<p>If the site is operated in multiple languages (with automatic translation by the IES), the sitemap XML also contains the entries for the other languages. And also the references between the individual languages. See also Localized Versions of your Pages</p>"},{"location":"develop/bundles/seo/#use","title":"Use","text":"<p>If the bundle is installed, the two routes are available. The prerequisite is that the file <code>config/routes/seo.yaml</code> has also been created and the <code>config/bundles.php</code> was extended in the project via Flex. Otherwise, this must be done manually.</p> <p><code>config/bundles.php</code></p> <pre><code>&lt;?php\n\nreturn [\n  // ...\n  Atoolo\\Seo\\AtooloSeoBundle::class =&gt; ['all' =&gt; true],\n];\n</code></pre> <p><code>config/routes/seo.yaml</code></p> <pre><code>controller:\n  resource: \"@AtooloSeoBundle/Controller/\"\n  type: attribute\n</code></pre>"},{"location":"develop/bundles/translator/","title":"Translator Bundle","text":"<p>The IES supports the automatic translation of texts managed by the CMS. In most cases, a translation via PHP is therefore not necessary. However, there are cases where external content is provided via PHP, which then also needs to be translated. This translator can be used for this purpose. An example of this is an external RSS feed that is to be displayed on the website as a teaser list.</p> <p>With this bundle, texts can be translated via an external translation service (such as DeepL). Caches ensure that the texts do not have to be retranslated with every request.</p>"},{"location":"develop/bundles/translator/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/atoolo-translator-bundle.</p>"},{"location":"develop/bundles/translator/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/translator-bundle\n</code></pre>"},{"location":"develop/bundles/translator/#usage","title":"Usage","text":""},{"location":"develop/bundles/translator/#cache-configuration","title":"Cache configuration","text":"<p>To be able to use the Translator, a cache is required which saves the texts that have already been translated so that they do not have to be translated again with every request.</p> <p>A Redis cache can be used for this purpose, for example. The corresponding configuration must be made in the Symfony project.</p> <p><code>config/packages/cache.yaml</code></p> <pre><code>parameters:\n  redis_host: \"%env(REDIS_HOST)%\"\n  env(REDIS_HOST): localhost\n\nframework:\n  cache:\n    default_redis_provider: \"redis://%redis_host%\"\n\n    pools:\n      translation.cache:\n        adapter: cache.adapter.redis\n</code></pre> <p>The name of the pool <code>translation.cache</code> is relavant and cannot be changed. See: Creating Custom (Namespaced) Pools</p> <p>With the standard installation of Redis, the backup file is created at regular intervals according to certain rules.</p> <p>Possible standard configuration of Redis <code>/etc/redis/redis.conf</code>:</p> <pre><code># Unless specified otherwise, by default Redis will save the DB:\n#   * After 3600 seconds (an hour) if at least 1 change was performed\n#   * After 300 seconds (5 minutes) if at least 100 changes were performed\n#   * After 60 seconds if at least 10000 changes were performed\n#\n# You can set these explicitly by uncommenting the following line.\n#\n# save 3600 1 300 100 60 10000\n</code></pre> <p>This is not optimal for the translations. The configuration should therefore be adapted.</p> <pre><code>save 60 1 30 100 10 10000\n</code></pre>"},{"location":"develop/bundles/translator/#service-configuration","title":"Service configuration","text":"<p>Der Service ben\u00f6tigt noch Konfigurations-Parameter</p> <p><code>config/services.yaml</code></p> <pre><code>parameters:\n  atoolo_translator.adapter.deepl.authKey: \"%env(resolve:DEEPL_AUTH_KEY)%\"\n  atoolo_translator.translator.ttl: \"P1D\"\n</code></pre> Name Description <code>atoolo_translator.adapter.deepl.authKey</code> The Auth-Key for the Deepl API. <code>atoolo_translator.translator.ttl</code> Specifies how long the translation should be kept in the cache. See: format"},{"location":"develop/bundles/translator/#service-usage","title":"Service usage","text":"<p>The service is now available via the alias <code>atoolo_translator.translator</code> and can now be used via dependency injection. E.g. via autowiring:</p> <pre><code>use Atoolo\\Translator\\Dto\\Format;\nuse Atoolo\\Translator\\Dto\\TranslationParameter;\nuse Atoolo\\Translator\\Service\\Translator;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;\n\nclass MyService\n{\n    public function __construct(\n        #[Autowire(service: 'atoolo_translator.translator')]\n        private readonly Translator $translator,\n    ) {\n    }\n\n    public function toSomething(): void\n    {\n\n        $textEn = 'Hello World';\n        $parameter = new TranslationParameter(\n            sourceLang: 'en',\n            targetLang: 'de',\n            format: Format::TEXT,\n        );\n\n        $translated = $this-&gt;translator-&gt;translate([$text], $parameter);\n\n        $textDe = $translated[0];\n    }\n}\n</code></pre>"},{"location":"develop/bundles/web-account/","title":"WebAccount Bundle","text":"<p>The Web Account Bundle provides support for user registration and authentication directly on the website. It enables personalized features for registered users, such as commenting, managing personal event entries (with appropriate permissions), and other user-specific functionality.</p> <p>This bundle integrates seamlessly with the Sitepark CMS and follows Symfony best practices for security, extensibility, and modularity.</p>"},{"location":"develop/bundles/web-account/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/atoolo-web-account-bundle.</p>"},{"location":"develop/bundles/web-account/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/web-account-bundle\n</code></pre>"},{"location":"develop/bundles/web-account/#graphql-api","title":"GraphQL API","text":"<p>The Web Account Bundle provides a GraphQL API for user authentication. This allows for flexible integration with frontend applications.</p> <p>See also [GraphQL API](../graphql/web-account/index.md</p>"},{"location":"develop/bundles/web-account/#symfony-security-integration","title":"Symfony Security Integration","text":"<p>The WebAccount Bundle integrates with Symfony's security system to manage user authorization.</p> <p>The following components are provided:</p> <ul> <li><code>atoolo_web_account.user_provider</code>: Symfony Security User Provider. WebAccount users are authenticated via the GrahQL interface and not the Symfony security system. The user provider can neither load nor update user data and is only used to avoid error messages from Symfony, as Symfony requires a user provider.</li> <li><code>atoolo_web_account.authenticator</code>: Symfony Security Custom Authenticator. This reads the <code>WEB_ACCOUNT_TOKEN</code> cookie and authenticates the user if the token is valid.</li> <li><code>atoolo_web_account.unauthorized_entry_point</code>: Symfony Security Entry Point. This entry point is used to redirect unauthenticated users to a login page when they try to access protected resources.</li> </ul> <p>Different roles are set depending on the user's authorizations. The role names are formed from the ID of the role in the CMS: <code>IES_ID_&lt;role_id&gt;</code>. If an anchor is assigned to the role in the CMS, the anchor is converted into a role notation. All letters are converted to capital letters, all separators are replaced by underscores. Example: <code>usrp.internetwebsite.protected</code> becomes <code>USRP_INTERNETWEBSITE_PROTECTED</code>. In addition, the role <code>WEB_ACCOUNT</code> is set for each authenticated user.</p> <p>These roles can be used for access protection within the Symfony application. See also Access Control (Authorization).</p> <p>For security reasons, Symfony does not offer the option of adding the configuration directly when installing the bundle. Therefore, the configuration must be added manually in the file <code>config/packages/security.yaml</code>.</p> <p><code>config/packages/security.yaml</code></p> <pre><code>security:\n  providers:\n    web_account_users:\n      id: atoolo_web_account.user_provider\n\n    all_users:\n      chain:\n        providers: [..., \"web_account_users\"]\n\n  firewalls:\n    web_account:\n      lazy: true\n      provider: web_account_users\n      custom_authenticators:\n        - atoolo_web_account.authenticator\n      entry_point: atoolo_web_account.unauthorized_entry_point\n      stateless: false\n</code></pre>"},{"location":"develop/bundles/graphql-search/","title":"GraphQL Search Bundle","text":"<p>The GraphQL Search Bundle uses the functionalities of the Search bundle and extends the GraphQL interface with the ability to perform searches.</p>"},{"location":"develop/bundles/graphql-search/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/atoolo-graphql-search-bundle.</p>"},{"location":"develop/bundles/graphql-search/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/graphql-search-bundle\n</code></pre>"},{"location":"develop/bundles/graphql-search/config/","title":"Config","text":"<p>This bundle comes with a custom config: <code>config/package/atoolo_graphql.yaml</code>.  Usually, it will be created automatically during installation by a symfony flex recipe.</p> <p>Here's an example config:</p> <pre><code># config/package/atoolo_graphql.yaml\natoolo_graphql:\n    graphql_query_dirs:\n        - '%kernel.project_dir%/src/resources/graphql/queries'\n</code></pre>"},{"location":"develop/bundles/graphql-search/config/#configuration-reference","title":"Configuration reference","text":"Key Type Default Description <code>graphql_query_dirs</code> <code>array</code> <code>[]</code> A list of directories to scan for <code>.graphql</code> files."},{"location":"develop/bundles/graphql-search/customization/","title":"Customization","text":""},{"location":"develop/bundles/graphql-search/customization/#teaser-customization","title":"Teaser Customization","text":""},{"location":"develop/bundles/graphql-search/customization/#teaser-type","title":"Teaser-Type","text":"<p>To make a new teaser available, a class must be created that implements the interface <code>Teaser</code>.</p> <pre><code>class NewsTeaser extends Teaser\n{\n    public function __construct(\n        ?Link $link,\n        public readonly ?string $headline,\n        public readonly ?string $text,\n        public readonly Resource $resource\n    ) {\n        parent::__construct($link);\n    }\n}\n</code></pre>"},{"location":"develop/bundles/graphql-search/customization/#teaser-factory","title":"Teaser-Factory","text":"<p>A teaser factory must implement the interface <code>TeaserFactory</code>. The factory is used to create a teaser object from a resource object.</p> <p>Creates a teaser object with the basic data of a teaser, which can be derived from the resource without any effort.</p> <p>For the factory, the method <code>TeaserFactory::create(Resource $resource): Teaser</code> must be implemented.</p> <pre><code>class NewsTeaserFactory implements TeaserFactory\n{\n    public function __construct(\n        private readonly LinkFactory $linkFactory,\n    ) {\n    }\n\n     public function create(Resource $resource): Teaser\n    {\n        $link = $this-&gt;linkFactory-&gt;create(\n            $resource,\n        );\n\n        $headline = $resource-&gt;data-&gt;getString(\n            'base.teaser.headline',\n            $resource-&gt;name,\n        );\n        $text = $resource-&gt;data-&gt;getString('base.teaser.text');\n\n        return new NewsTeaser(\n            $link,\n            $headline,\n            $text === '' ? null : $text,\n            $resource,\n        );\n    }\n}\n</code></pre> <p>More complex determinations should be made using the teaser resolver. This can provide a method for individual fields, which is only executed if the field is requested in the GraphQL query.</p> <p>A factory can be defined as a Symfony service.</p> <pre><code>services:\n  atoolo_graphql_search.resolver.news_teaser_factory:\n    class: 'Atoolo\\GraphQL\\Search\\Resolver\\NewsTeaserFactory'\n    arguments:\n      - \"@atoolo_graphql_search.resolver.url_rewriter\"\n    tags:\n      - { name: \"atoolo_graphql_search.teaser_factory\", objectType: \"news\" }\n</code></pre> <p>Tagging the service with <code>atoolo_graphql_search.teaser_factory</code> registers it as a teaser factory. The <code>objectType</code> parameter specifies the object type for which the factory is to be used.</p>"},{"location":"develop/bundles/graphql-search/customization/#teaser-resolver","title":"Teaser-Resolver","text":"<p>A teaser resolver is a service that implements the interface <code>TeaserResolver</code>. The resolver is used to determine the data of a teaser that cannot be derived directly from the resource and therefore requires a more complex determination. The resolver can make a method available for individual fields, which is only executed if the field is requested in the GraphQL query.</p> <p>A teaser resolver can have getter methods that provide the data for the individual fields of the teaser. These methods must have a specific signature in order to be called by the GraphQL query.</p> <p>The first argument of the method is the teaser for which the data is to be determined. This has previously been created by the corresponding teaser factory.</p> <p>The second argument is optional and is only necessary if the GraphQL field variables is provided.</p> <p>Here is an example of a method without variables:</p> <pre><code>class NewsTeaserResolver implements Resolver\n{\n    public function __construct(\n        private readonly ResourceDateTimeResolver $dateResolver,\n    ) {}\n\n    public function getDate(\n        NewsTeaser $teaser,\n    ): ?DateTime {\n        return $this-&gt;dateResolver-&gt;getDate($teaser-&gt;resource);\n    }\n}\n</code></pre> <p>Here is an example of a method with variables:</p> <pre><code>use Overblog\\GraphQLBundle\\Definition\\ArgumentInterface;\n\nclass NewsTeaserResolver implements Resolver\n{\n    public function __construct(\n        private readonly ResourceAssetResolver $assetResolver,\n    ) {}\n\n    public function getAsset(\n        NewsTeaser $teaser,\n        ArgumentInterface $args,\n    ): ?Asset {\n        return $this-&gt;assetResolver-&gt;getAsset($teaser-&gt;resource, $args);\n    }\n}\n</code></pre> <p>A resolver can be defined as a Symfony service.</p> <pre><code>services:\n  Atoolo\\GraphQL\\Search\\Resolver\\NewsTeaserResolver:\n    arguments:\n      - '@Atoolo\\GraphQL\\Search\\Resolver\\ArticleTeaserResolver'\n    tags:\n      - { name: \"atoolo_graphql_search.resolver\" }\n</code></pre> <p>In the above case, the <code>ArticleTeaserResolver</code> is still required in the constructor of the <code>NewsTeaserResolver</code>. This is passed as an argument.</p> <p>By tagging the service with <code>atoolo_graphql_search.resolver</code>, it is registered as a teaser resolver.</p>"},{"location":"develop/bundles/graphql-search/customization/#url-rewriter","title":"Url-Rewriter","text":"<p>The URL rewriter is a service that implements the interface <code>UrlRewriter</code>. The rewriter is used to rewrite URLs in the teaser object. URL rewriters are needed to influence the URL's that are returned in the teasers.</p> <p>In the standard case, the <code>DoNothingUrlRewriter</code> is used, which returns the URLs unchanged.</p> <pre><code>services:\n  atoolo_graphql_search.resolver.url_rewriter:\n    class: Atoolo\\GraphQL\\Search\\Resolver\\DoNothingUrlRewriter\n</code></pre> <p>However, this can be replaced by a separate URL rewriter if necessary.</p>"},{"location":"develop/bundles/graphql-search/server-side-queries/","title":"Server-side GraphQL queries","text":"<p>While the primary purpose of the <code>atoolo/graphql-search-bundle</code> is to expose a GraphQL API over HTTP for external clients (like a browser), it also includes features for executing queries directly on the server within your PHP application.</p> <p>This allows you to reuse your existing GraphQL logic for internal application needs, avoiding the overhead of making an HTTP request to your own API.</p>"},{"location":"develop/bundles/graphql-search/server-side-queries/#config-setup","title":"Config setup","text":"<p>Ensure that you have configured the <code>graphql_query_dirs</code> parameter in your <code>config/packages/atoolo_graphql.yaml</code> file (see reference). This tells the bundle where to look for your GraphQL operation definitions.</p>"},{"location":"develop/bundles/graphql-search/server-side-queries/#defining-a-graphql-operation","title":"Defining a GraphQL operation","text":"<p>Inside of one of the configured graphql query directories, you can define any <code>.graphql</code> file as usual.</p> <p>Example: <pre><code># src/resources/graphql/queries/search.graphql\nquery exampleOperation($input: SearchInput!){ \n  search(input: $input){\n    results {\n      id\n      name\n      # ...\n    }\n  }\n}\n</code></pre></p> <p>The operation name, <code>exampleOperation</code> in this case, is what you will use to reference this query in your PHP code. It has to be unique in the scope of your application.</p> <p>All operations defined in <code>.graphql</code> files will be loaded and passed to the <code>GraphQLQueryManager</code> service during the compilation of the symfony cache.</p>"},{"location":"develop/bundles/graphql-search/server-side-queries/#execute-the-query-in-php","title":"Execute the query in PHP","text":"<p>You can execute the operation from any PHP service by using the <code>GraphQLQueryExecutor</code> service. You can inject this service via dependency injection and call its execute method.</p> <p>Example: <pre><code>namespace App\\Service;\n\nuse Atoolo\\GraphQL\\SearchBundle\\Query\\GraphQLQueryExecutor;\n\nclass MyService\n{\n    private GraphQLQueryExecutor $queryExecutor;\n\n    public function __construct(\n      private readonly GraphQLQueryExecutor $queryExecutor\n    ){}\n\n    public function performSearch(array $searchInput): array\n    {\n        // Define the variables for your GraphQL query\n        $variables = [\n            'input' =&gt; $searchInput,\n        ];\n\n        // Execute the query by referencing its operation name\n        $result = $this-&gt;queryExecutor-&gt;execute('exampleOperation', $variables);\n\n        $data = $result-&gt;getData();\n        /*\n          $data: [\n            'search' =&gt; [ \n              'results' =&gt; [\n                  ['id' =&gt; 1, 'name' =&gt; 'foo'],\n                  ['id' =&gt; 2, 'name' =&gt; 'bar'],\n                  ...\n              ]\n            ]\n          ]\n        */\n    }\n}\n</code></pre></p>"},{"location":"develop/bundles/search/","title":"Search Component","text":"<p>Provides services with which a Solr index can be filled and searched for resources via a index.</p>"},{"location":"develop/bundles/search/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/atoolo-search-bundle.</p>"},{"location":"develop/bundles/search/#installation","title":"Installation","text":"<p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/search-bundle\n</code></pre>"},{"location":"develop/bundles/search/#index-name","title":"Index name","text":"<p>The index name is used to determine which index should be searched. An index is always assigned to a Resource Channel. The name of the index can be determined via the <code>ResourceChannel</code>.</p> <p>The IES supports multilingual resource channels. Editorial content is only ever written in one language and is automatically translated into the other languages by the CMS. A multilingual resource channel then contains several resources for an article, each of which is published in a different language. For the search, a separate full text index is created for each language, which also takes into account language-specific features such as stop words and stemming.</p> <p>The name of the index can be determined via the interface <code>IndexName</code>. A method <code>IndexName::name(ResourceLanguage $lang): string</code> is made available for this purpose.</p> <p>Currently, only the class <code>ResourceChannelBasedIndexName</code> implements the interface <code>IndexName</code>. This class determines the index name based on the resource channel. See also: Resource Channel.</p> <pre><code>$indexName = new ResourceChannelBasedIndexName($resourceChannel);\n$lang = ResourceLanguage::of('en');\n$index = $indexName-&gt;name($lang);\n</code></pre> <p>If there is no index for the specified language, the index for the base language of the resource channel is returned.</p>"},{"location":"develop/bundles/search/#indexing","title":"Indexing","text":"<p>To be able to search in a Solr index, it must first be filled. This is done via the indexer.</p> <p>Resources are indexed. These are stored as files in the file system. The indexer can search an entire directory structure for the resources and thus rebuild an entire index. The resources are loaded via the files and mapped to index documents. The mapping is carried out via document enricher that read the resource data and set the corresponding fields of the index document. The index document are passed to Solr so that they can be indexed. Searches can then be performed on a Solr index created in this way.</p> <p>An Indexer service is available for indexing, which can be used to index and remove data from the index.</p>"},{"location":"develop/bundles/search/#internal-resource-indexer","title":"Internal Resource Indexer","text":"<p>The Internal Resource Indexer is the standard indexer of this bundle and is used to index the internal resources. The internal resources are the resources that are usually managed in the CMS. The indexer can be used to index and remove the internal resources.</p>"},{"location":"develop/bundles/search/#protected-resources","title":"Protected Resources","text":"<p>The IES offers the option of making certain resources visible only to a defined user group. These resources are marked as \"protected\". The resources are indexed, but only for user groups that are authorized to see these resources. To ensure that the protected resources are also returned via the search, the group IDs of the user groups must be stored in the PHP session via the <code>auth-groups</code> key in a comma-separated form.</p>"},{"location":"develop/bundles/search/#solr-xml-indexer","title":"Solr Xml Indexer","text":"<p>In order to better convert systems with existing indexers, the SolrXMLIndexer can be used to read the existing Solr-XML files and thus integrate them into the Atoolo-Indexer technology.</p> <p>Example of the integration of the SolrXMLIndexer:</p> <p><code>services.yaml</code></p> <pre><code>customer.indexer.mysource_aborter:\n  class: Atoolo\\Search\\Service\\Indexer\\IndexingAborter\n  arguments:\n    - \"%kernel.project_dir%/var/cache/\"\n    - \"mysource\"\n\ncustomer.indexer.mysource_progress_state:\n  class: Atoolo\\Search\\Service\\Indexer\\IndexerProgressState\n  arguments:\n    - \"@atoolo_search.index_name\"\n    - \"@atoolo_search.indexer.status_store\"\n    - \"mysource\"\n\ncustomer.indexer.mysource_indexer:\n  class: Atoolo\\Search\\Service\\Indexer\\SolrXmlIndexer\n  arguments:\n    - \"@atoolo_search.index_name\"\n    - \"@customer.indexer.mysource_progress_state\"\n    - \"@customer.indexer.mysource_aborter\"\n    - \"@atoolo_search.indexer.solr_index_service\"\n    - \"@atoolo_search.indexer.configuration_loader\"\n    - \"@atoolo_search.indexer.solr_xml_reader\"\n    - \"mysource\"\n  tags: [\"atoolo_search.indexer\"]\n\ncustomer.indexer.mysource_indexer_scheduler:\n  class: Atoolo\\Search\\Service\\Indexer\\SolrXmlIndexerScheduler\n  arguments:\n    - \"0 6-20/2 * * *\" # cron expression, every 2 hours from 6am to 8pm\n    - \"@customer.indexer.mysource_indexer\"\n  tags:\n    - scheduler.schedule_provider: { name: \"mysource-indexer-scheduler\" }\n</code></pre>"},{"location":"develop/bundles/search/#custom-document-enricher","title":"Custom Document Enricher","text":"<p>Document Enricher allow the document that is passed to Solr for indexing to be enriched with the desired fields. Here it is possible to react to product or customer-specific object types and to set the document according to requirements.</p> <p>The document to be filled must adhere to the schema stored in Solr. Only the fields that are known in the schema can be set. Currently the schema <code>2.1</code> is used. The implementation <code>IndexSchema2xDocument</code> of the <code>IndexDocument</code> interface is available for this purpose. The document enricher must implement the interface <code>DocumentEnricher</code>.</p> <pre><code>declare(strict_types=1);\n\nnamespace Atoolo\\Examples\\Search\\Indexer\\Enricher;\n\nuse Atoolo\\Resource\\Resource;\nuse Atoolo\\Search\\Service\\Indexer\\DocumentEnricher;\nuse Atoolo\\Search\\Service\\Indexer\\IndexDocument;\nuse Atoolo\\Search\\Service\\Indexer\\IndexSchema2xDocument;\n\n/**\n * @implements DocumentEnricher&lt;IndexSchema2xDocument&gt;\n */\nclass CustomDocumentEnricher implements DocumentEnricher\n{\n    public function enrichDocument(\n        Resource $resource,\n        IndexDocument $doc,\n        string $processId\n    ): IndexDocument {\n        if (\n            $resource-&gt;getObjectType() !== 'myObjectType'\n        ) {\n            return $doc;\n        }\n\n        // ... enrich document\n\n        return $doc;\n    }\n}\n</code></pre> <p>The document enricher is required, for example, in the GraphQL Search Bundle. This offers a mutation that is also used by the IES to trigger indexing. See also GraphQl Indexing. So that your own document enricher can be used, it must be registered as tagged Symfony service.</p> <p><code>services.yaml</code></p> <pre><code>services:\n  Atoolo\\Examples\\Search\\Indexer\\Enricher\\CustomDocumentEnricher:\n    tags:\n      - {\n          name: \"atoolo_search.indexer.document_enricher.schema2x\",\n          priority: 10,\n        }\n</code></pre>"},{"location":"develop/bundles/search/#custom-content-matcher","title":"Custom Content Matcher","text":"<p>For the full-text search, the 'content' field is filled with all content relevant to the search. It may be necessary for special content to be extracted from the resources and written to the <code>content</code> field. A <code>ContentMatcher</code> can be implemented for this purpose.</p> <p>The <code>content</code> array of the resource is run through recursively and the <code>ContentMatcher</code> is called for each value. The <code>ContentMatcher</code> can then check whether the value should be written to the <code>content</code> field. The value can also be an array so that the <code>ContentMatcher</code> can extract the required value from the underlying structure.</p> <pre><code>declare(strict_types=1);\n\nnamespace Atoolo\\Examples\\Search\\Indexer\\Matcher;\n\nuse Atoolo\\Resource\\Resource;\n\nclass CustomContentMatcher implements ContentMatcher\n{\n    public function match(Resource $resource, string $key, $value): string:bool\n    {\n        $len = count($path);\n        if ($len &lt; 2) {\n            return false;\n        }\n\n        if (\n            $path[$len - 2] !== 'items' ||\n            $path[$len - 1] !== 'model'\n        ) {\n            return false;\n        }\n\n        $headline = $value['headline'] ?? false;\n        return is_string($headline) ? $headline : false;\n    }\n}\n</code></pre> <p>So that your own content matcher can be used, it must be registered as tagged Symfony service.</p> <p><code>services.yaml</code></p> <pre><code>services:\n  Atoolo\\Search\\Service\\Indexer\\SiteKit\\HeadlineMatcher:\n    tags:\n      - { name: \"atoolo_search.indexer.sitekit.content_matcher\", priority: 10 }\n</code></pre>"},{"location":"develop/bundles/search/#searching","title":"Searching","text":"<p>You can search the index to find resources. The Search service interface is available for this purpose. The SolrSearch is a common implementation of this interface.</p>"},{"location":"develop/bundles/search/#query","title":"Query","text":"<p>The <code>search()</code> method expects a <code>SearchQuery</code> object that contains the filter rules, for example. To create a <code>SearchQuery</code> object, only the <code>SearchQueryBuilder</code> must be used to ensure that a valid <code>SearchQuery</code> object is always created.</p> <p>Example of a query:</p> <pre><code>$builder = new SearchQueryBuilder();\n$builder-&gt;text('chocolate')\n\n$query = $builder-&gt;build();\n$result = $searcher-&gt;search($query);\n</code></pre>"},{"location":"develop/bundles/search/#full-text-search","title":"Full text search","text":"<p>To find resources using a full-text search, the text is specified using the builder methode <code>$builder-text()</code>. The index is searched for the text and the corresponding hits are returned. The search is performed word by word. If several words (separated by spaces) are entered, an OR search is carried out in the standard case and the hits must contain both words. An AND search can also be carried out. To do this, the builder method <code>$builder-&gt;queryDefaultOperator()</code> must be specified with <code>QueryOperator::AND</code>:</p> <pre><code>$builder = new SearchQueryBuilder();\n$builder-&gt;text('cacao coffee')\n  -&gt;defaultQueryOperator(QueryOperator::AND);\n</code></pre>"},{"location":"develop/bundles/search/#sorting","title":"Sorting","text":"<p>Sort criteria can be used to specify how the result should be sorted. Multiple sorting criteria can be specified, which are applied to the result one after the other. The second sort criterion is used if the first is the same and so on.</p> <p>If no sorting criterion is specified, the result is sorted by relevance. The <code>Score</code>-class is used here, which is higher the more precisely the hit matches the search.</p> <p>The following sorting criteria classes are possible:</p> Search criteria Class Description <code>Name</code> This is sorted by the name of the article. In some cases, the name is preceded by a numerical prefix to achieve the desired sorting in the CMS and is therefore not always identical to the headline. <code>Headline</code> Sort by the title of the article. <code>Date</code> In many cases, an editorial date can be set for the article that is used here. Otherwise it is the last modification date of the article. <code>Natural</code> In most cases, a sort field is written to the index, which should describe the natural sorting of the entry. For normal articles, this is usually the heading. For news or events, however, it is the date, for example. This sort field is used in this case. <code>Score</code> The score is determined during the search and describes how closely the individual hits match the search query. This sorting is useful for full-text searches in order to obtain the most accurate results first. Here it is sorted according to relevance. <code>Custom</code> This sort criterion allows you to use your own fields from the search index for sorting. <p>The sorting can be defined as follows via the QueryBuilder:</p> <pre><code>$builder = new SearchQueryBuilder();\n$builder-&gt;text('chocolate')\n  -&gt;sort([\n    new Sort('name', SortDirection::ASC),\n    new Sort('date', SortDirection::DESC)\n    ]);\n</code></pre>"},{"location":"develop/bundles/search/#filter","title":"Filter","text":"<p>Filters can be defined to limit search results. The following filters are available here:</p> Filter Class Description <code>ObjectTypesFilter</code> Object types describe the different types of pages that are used in the website. These can be, for example, news pages, events, normal content pages or any other types that are part of the project. <code>ContentSectionsFilter</code> Content section types are types of sections that are included in a page. These can be text sections, image sections and all others that the project provides for the website. For example, a search can be defined in which all pages containing a YouTube video can be found. <code>CategoriesFilter</code> The CMS can be used to define any number of category trees that can be used to categorize articles. These categories can be filtered using their ID. The hierarchy of the category is also taken into account. This means that if you filter by a category that has subcategories, the articles that are linked to the subcategory are also found. <code>GroupsFilter</code> In the CMS, articles are organized in hierarchical groups. For example, all articles in a rubric are managed in substructures of the rubric group. The groups filter can be used to restrict the search to groups. The hierarchy of the groups is also taken into account so that all articles in a group are found, even if they are contained in further nested subgroups. <code>SitesFilter</code> Several websites can be managed within the CMS. These can be several main websites, but also microsites that are subordinate to a main website. The Sites filter can be used to restrict the search to a single site. For example, you can define a search that only returns hits from a microsite. Without this filter, a search for the main website can be realized, for example, in which the pages of the microsites are also found. <code>IdFilter</code> An IdFilter can be used to filter directly for specific resources using their IDs <code>SourceFilter</code> The source filter can be used to filter entries that have been transferred to the search index via a specific indexer <code>ContentTypeFilter</code> Filters according to the content type of the entry. For <code>text/html</code>, <code>text/html*</code> should also be specified, as it contains an encoding such as <code>text/html; charset=UTF-8</code>. <code>GeoLocatedFilter</code> This filter is used to find entries that are geo-localized. <code>SpatialOrbitalFilter</code> Filter for a geo radius search. <code>SpatialArbitraryRectangleFilter</code> Filter for a geo radius search. For performance reasons, a rectangle rather than a circle is selected for the search area. <code>AbsoluteDateRangeFilter</code> Filter that filters over an absolute date range <code>RelativeDateRangeFilter</code> Filter that filters over an relative date range <code>AndFilter</code> The AND filter is used to combine several filters. This means that only the hits are returned that match all the filters. <code>OrFilter</code> The OR filter is used to combine several filters. This means that the hits are returned that match at least one of the filters. <code>NotFilter</code> The NOT filter is used to exclude hits that match the filter. <code>QueryFilter</code> This filter accepts a query that is passed directly to the search engine. This filter should only be used in absolute exceptions where the fields of the current schema must be specified directly. <p>Warning</p> <p><code>QueryFilter</code>: If the schema is changed, the specified queries for these filters may no longer work.</p> <p>The filters can be defined as follows via the builder:</p> <pre><code>$builder = new SearchQueryBuilder();\n$builder-&gt;text('chocolate')\n  -&gt;filter([\n    new ObjectTypesFilter(['news', 'events']),\n    new CategoriesFilter(['15949']),\n    new GroupsFilter(['16811']),\n    new SitesFilter(['3952']),\n    new AndFilter([\n      new ObjectTypesFilter(['news', 'events']),\n      new CategoriesFilter(['15949']),\n      new GroupsFilter(['16811']),\n      new SitesFilter(['3952']),\n      new QueryFilter('myField:myValue'),\n    ]),\n    new OrFilter([\n      new ObjectTypesFilter(['news', 'events']),\n      new CategoriesFilter(['15949']),\n      new GroupsFilter(['16811']),\n      new SitesFilter(['3952']),\n      new QueryFilter('myField:myValue'),\n    ]),\n    new NotFilter(\n      new ObjectTypesFilter(['news', 'events'])\n    ),\n    new QueryFilter('myField:myValue')\n  ]);\n</code></pre>"},{"location":"develop/bundles/search/#filter-key","title":"Filter key","text":"<p>A <code>key</code> can also be specified for filters. This is only necessary if the filter only influences the facet search. The key is then used for the faceted search to identify the filters that must not be taken into account. See Facetes.</p>"},{"location":"develop/bundles/search/#facetes","title":"Facetes","text":"<p>A faceted search, also known as faceted filtering, is a search technique that can be applied to various use cases to allow users to easily refine and navigate search results. It works by dividing search results into different categories or facets that are representative features or attributes of the information found.</p> <p>The facet type is required to define a facet. This can be, for example, the object type and the possible values of the facet type whose results are to be returned.</p> <p>The following filters are available here:</p> Facet Class Description <code>ObjectTypesFacet</code> Object types describe the different types of pages that are used in the website. These can be, for example, news pages, events, normal content pages or any other types that are part of the project. <code>ContentSectionsFacet</code> Content section types are types of sections that are included in a page. These can be text sections, image sections and all others that the project provides for the website. For example, a search can be defined in which all pages containing a YouTube video can be found. <code>CategoriesFacet</code> The CMS can be used to define any number of category trees that can be used to categorize articles. <code>GroupsFacet</code> In the CMS, articles are organized in hierarchical groups. For example, all articles in a rubric are managed in substructures of the rubric group. The groups filter can be used to restrict the search to groups. The hierarchy of the groups is also taken into account so that all articles in a group are found, even if they are contained in further nested subgroups. <code>SitesFacet</code> Several websites can be managed within the CMS. These can be several main websites, but also microsites that are subordinate to a main website. The Sites filter can be used to restrict the search to a single site. For example, you can define a search that only returns hits from a microsite. Without this filter, a search for the main website can be realized, for example, in which the pages of the microsites are also found. <code>SourceFacet</code> The source indicates which indexer was used to add the entry to the index <code>SourceFacet</code> The source indicates which indexer was used to add the entry to the index <code>ContentTypeQuery</code> Facete about the content type of the entry <code>RelativeDateRangeFacet</code> Facet over a date range. This can be a single value. If a <code>gap</code> is specified, the facet contains several values. In each case, the number of hits in the time window specified with <code>gap</code> within the specified time period <code>SpatialDistanceRangeFacet</code> This facet indicates the number of hits within a certain geo-radius. <code>FacetMultiQuery</code> This facet contains a list of <code>FacetQuery</code> objects and combines them into a facet. This is useful if you want to combine several queries into one facet. This filter should only be used in absolute exceptions where the fields of the current schema must be specified directly. <p>Warning</p> <p><code>FacetQuery</code> and <code>FacetMultiQuery</code>: If the schema is changed, the specified queries for these filters may no longer work.</p> <p>A <code>key</code> must also be specified for facets. This is required so that the results of the facet can be accessed in the search result via the key.</p> <p>The facet can be defined as follows via the builder:</p> <pre><code>$builder = new SearchQueryBuilder();\n$builder-&gt;index('myindex-www')\n  -&gt;text('chocolate')\n  -&gt;facet([\n    new ObjectTypesFacet('objectType', ['news', 'events']),\n    new ContentSectionsFacet('contentSection', ['text', 'image']),\n    new CategoriesFacet('categories', ['15949']),\n    new GroupsFacet('groups', ['16811']),\n    new SitesFacet('sites', ['3952']),\n    new FacetQuery('myField', 'myValue'),\n    new FacetMultiQuery('myMultiField', [\n      new FacetQuery('myFieldA', 'myValue'),\n      new FacetQuery('myFieldB', 'myValue'),\n    ]),\n</code></pre> <p>Usually, you also want to filter according to a facet. However, the facet results should not be affected by the filter. A <code>key</code> can be specified for the filter for this purpose. This key is used for the facet as an exclude filter. This means that the corresponding filter is not taken into account when determining the facet.</p> <p>Here is an example with a filter that contains a key</p> <pre><code>$builder = new SearchQueryBuilder();\n$builder-&gt;index('myindex-www')\n  -&gt;text('chocolate')\n  -&gt;filter([\n    new ObjectTypesFilter(['news', 'events'], 'objectType'),\n  ])\n  -&gt;facet([\n    new ObjectTypesFacet('objectTypeFacet', ['news', 'events'], 'objectType')\n  ]);\n</code></pre>"},{"location":"develop/bundles/search/#archive-search","title":"Archive search","text":"<p>The indexed resources can be marked as \"archived\". This flag ensures that these resources are not normally included in the search. This can be used for news, for example, to include only the latest news in the general search. For a special search, such as a news archive search, the <code>archive</code> flag can be used to also find archived resources.</p> <pre><code>$builder = new SearchQueryBuilder();\n$builder-&gt;archive(true);\n</code></pre>"},{"location":"develop/bundles/search/#boosting","title":"Boosting","text":"<p>Boosting makes it possible to increase the relevance of certain documents in the search results. This can be achieved by customizing query parameters, such as adding boosting factors to specific fields or applying custom functions. In this way, search results can be specifically influenced to place more relevant results at the top.</p> <p>The following parameters can be used to influence the result:</p> Name Description <code>queryFields</code> This parameter specifies the fields to be searched and their relative importance. It is a list of fields, optionally with boost factors that indicate how heavily each field should be weighted when matching search terms. For example, qf=title^2.0 description means that the title field is twice as important as the description field. <code>phraseFields</code> This parameter increases the importance of whole phrases (word sequences) in the specified fields. It is used to increase the relevance of documents in which the search terms appear as phrases in these fields. For example, pf=title^1.5 content increases the relevance of documents in which the search terms appear as a phrase in the title field more than in the content field. <code>boostQueries</code> This parameter allows additional query clauses that increase the relevance score of documents that match these clauses. These clauses do not affect whether a document matches the main query, but increase the score of documents that match them. For example, <code>contenttype:(text/html*)^10</code> would increase the relevance score of HTML documentserh\u00f6hen. <code>boostFunctions</code> This parameter applies function-based boosts to the relevance score. These are mathematical functions that adjust the score based on field values or other criteria. For example, <code>if(termfreq(sp_objecttype,'news'),scale(sp_date,0,12),scale(sp_date,10,11)</code> could be used to score older news articles less highly <code>tie</code> (Tie-Breaker-Multiplikator) This parameter combine the best match points from multiple fields. The tie parameter adjusts how much lower scores affect the overall score. A higher tie value means that the lower scores have more influence on the final score. For example, tie=0.1 could be used to give the secondary fields some influence in the scoring process, preventing only the best matches from dominating. <p>Setting the boosting parameters requires in-depth knowledge of how the search index works and its schema. If no boosting is specified, the default values of Sitepark are used, which have already proven themselves in many projects.</p> <pre><code>$builder = new SearchQueryBuilder();\n$builder-&gt;boosting(new Boosting(\n  queryFields: [\n    \"sp_title^1.4\",\n    \"keywords^1.2\",\n    \"description^1.0\",\n    \"title^1.0\",\n    \"url^0.9\",\n    \"content^0.8\"\n  ],\n  phraseFields: [\n    \"sp_title^1.5\",\n    \"description^1\",\n    \"content^0.8\"\n  ],\n  boostQueries: [\n    \"sp_objecttype:searchTip^100\",\n    \"contenttype:(text/html*)^10\"\n  ],\n  boostFunctions: [\n    \"if(termfreq(sp_objecttype,'news'),scale(sp_date,0,12),scale(sp_date,10,11))\"\n  ],\n  tie: 0.1\n));\n</code></pre> <p>Warning</p> <p>If the scheme is changed, the specified boosting may no longer work.</p>"},{"location":"develop/bundles/search/#result","title":"Result","text":"<p>The search returns a <code>SearchResult</code> object, which can be used to read the results.</p> <p>The result provides the list of resources found that can be iterated over.</p> <pre><code>foreach ($result as $resource) {\n  echo $resource-&gt;getLocation() . \"\\n\";\n}\n</code></pre> <p>If facets have also been defined in the query, these can also be read out:</p> <pre><code>foreach ($result-&gt;facetGroups as $facetGroup) {\n  echo $facetGroup-&gt;key . \"\\n\";\n  foreach ($facetGroup-&gt;facets as $facet) {\n    echo $facet-&gt;key . ' (' . $facet-&gt;hits . \")\\n\";\n  }\n}\n</code></pre>"},{"location":"develop/bundles/search/#searching-more-like-this","title":"Searching (More like this)","text":"<p>A \"More-Like-This\" search is a technique in which a source document or item is used as a reference point to find similar documents in the search index. It is based on extracting characteristics from the source object and searching for other objects that have similar characteristics in order to present relevant results to the user.</p> <p>The <code>MoreLikeThisSearcher</code> service is available for this. The <code>moreLikeThis()</code> method expects a <code>MoreLikeThisQuery</code> object with which the query can be defined.</p> <p>The search returns a <code>SearchResult</code> object with which the results can be read.</p> <p>The result returns the list of resources found, which can be iterated over.</p> <pre><code>foreach ($result as $resource) {\n  echo $resource-&gt;getLocation() . \"\\n\";\n}\n</code></pre>"},{"location":"develop/bundles/search/#suggest","title":"Suggest","text":"<p>A \"suggest search\" is a search function that automatically displays suggestions or auto-completions to users as they enter search queries.</p> <p>The <code>Suggest</code> service is available for this. The <code>moreLikeThis()</code> method expects a <code>SuggestQuery</code> object with which the query can be defined.</p> <p>The search returns a <code>SuggestResult</code> object with which the results can be read.</p> <pre><code>foreach ($result as $suggest) {\n  echo $suggest-&gt;term . ' (' . $suggest-&gt;hits . \")\\n\";\n}\n</code></pre> <p>Filters can also be specified for the suggest search and the archive flag can be set. However, there is no builder for the suggest search; the filter and archive flag may have to be specified directly in the constructor.</p>"},{"location":"develop/bundles/search/#use-as-a-symony-service","title":"Use as a Symony service","text":"<p>To use the search service in a Symfony project, the service can be injected in a separate service.</p> <p>Service IDs are available for the respective search service for this purpose:</p> Service-Id Service-Interface <code>atoolo_search.search</code> <code>Atoolo\\Search\\Search</code> <code>atoolo_search.suggest</code> <code>Atoolo\\Search\\Suggest</code> <code>atoolo_search.more_like_this</code> <code>Atoolo\\Search\\MoreLikeThis</code> <p>Mit Hilfe des Autowiring-Features von Symfony kann der Service in einem eigenen Service verwendet werden.</p> <pre><code>use Atoolo\\Search\\Search;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;\n\nclass MyService\n{\n    public function __construct(\n        #[Autowire(service: 'atoolo_search.search')]\n        private readonly Search $search\n    ) {\n    }\n\n    public function doSomething(): void\n    {\n        $builder = new SearchQueryBuilder();\n        $builder-&gt;text('test');\n\n        $result = $this-&gt;search-&gt;search($builder-&gt;build());\n    }\n}\n</code></pre>"},{"location":"develop/bundles/search/#command-line-interface","title":"Command line interface","text":"<p>This component also contains Symfony commands that can be integrated into Symfony projects. <code>services.xml</code></p> <p>The commands are currently provided via the GraphQL bundle. To do this, the bundle must be integrated into the Symfony project.</p> <p>The commands provided by Atoolo require the environment variable <code>RESOURCE_ROOT</code> in the rules, which defines in which directory the resources are located or which resource channel is currently to be used.</p> <p>The environment variable can be set manually, but can also be determined automatically if <code>bin/console</code> is called via the resource channel path, e.g.</p> <pre><code>/var/www/example.com/www/app/bin/console ...\n</code></pre> <p>or</p> <pre><code>cd /var/www/example.com/www/\napp/bin/console ...\n</code></pre> <p>The following commands are then available via <code>bin/console</code>:</p> Command Description <code>search:dump-index-document</code> Dump a index document <code>search:indexer</code> Fill a search index <code>search:indexer:update-internal-resources</code> Update internal resources in search index <code>search:mlt</code> Performs a more-like-this search <code>search:search</code> Performs a search <code>search:suggest</code> Performs a suggest search"},{"location":"develop/components/","title":"Atoolo Components","text":"<p>Atoolo components are individual, preferably independent libraries that cover a defined functional area.</p>"},{"location":"develop/components/#installation","title":"Installation","text":"<p>Use Composer to install any of the Atoolo Components in your PHP project:</p> <pre><code>composer require atoolo/[component]\n</code></pre>"},{"location":"develop/components/#all-atoolo-components","title":"All Atoolo Components","text":"Name Description <code>atoolo/runtime</code> Composer plugin for initializing bootstrapping logic such as initialization and requirement validation."},{"location":"develop/components/runtime/","title":"Runtime Component","text":"<p>Composer plugin for initializing bootstrapping logic such as initialization and requirement validation.</p>"},{"location":"develop/components/runtime/#sources","title":"Sources","text":"<p>The sources can be accessed via the GibHub project https://github.com/sitepark/atoolo-runtime.</p>"},{"location":"develop/components/runtime/#installation","title":"Installation","text":"<p>Use Composer to install this component in your PHP project:</p> <pre><code>composer require atoolo/runtime\n</code></pre>"},{"location":"develop/components/runtime/#motivation","title":"Motivation","text":""},{"location":"develop/components/runtime/#phpini","title":"<code>php.ini</code>","text":"<p>In a project, it may be necessary to set certain <code>php.ini</code> settings for the project to function correctly. An example of this could be the time zone, as PHP does not use the system time zone, but sets its own.</p> <p>These settings can be made in the <code>php.ini</code> file. On Debian-based systems, the PHP configurations are located in a directory such as <code>/etc/php/8.3/</code>. There is a separate directory for each PHP minor version.</p> <p>If the settings are made under this directory, it should be noted that after a PHP Minor update the settings are transferred to the new configuration directory. This can be difficult if individual settings have been made in different files and it is no longer possible to recognize which settings have been made.</p> <p>On Debian systems, the configurations for <code>fpm</code> and <code>cli</code> are also separated. They are located under the directories <code>/etc/php/8.3/fpm</code> and <code>/etc/php/8.3/cli</code>. A <code>bin/console</code> command is also provided for Symfony projects. Here it may be necessary that the configurations for <code>cli</code> and <code>fpm</code> are identical and it must be noted that the configuration must be carried out twice. Here it can be difficult to synchronize the configurations.</p> <p>To avoid these problems, the <code>atoolo/runtime</code> package can be used to store ini settings in the project, which are then set at runtime. This ensures that the settings are always correct and are not forgotten.</p>"},{"location":"develop/components/runtime/#process-user","title":"Process user","text":"<p>If the message bus system is used for Symfony projects, there are workers that wait for messages. These workers are separate processes that also write files, depending on the use case. It may be necessary for the worker process to be executed with a specific user so that the files can also be read by other processes, such as the <code>fpm</code> process. The same applies to processes that are executed via the console. For example, the <code>bin/console</code> command in Symfony projects. Here, too, it should be possible to ensure that the process is executed with a specific user.</p> <p>The <code>atoolo/runtime</code> package can also be used for this. It can define users for the project and validate that the processes are executed with the correct user.</p>"},{"location":"develop/components/runtime/#umask","title":"umask","text":"<p>If different system users need to have access to files, this can be solved in such a way that the users are in a common group. It must then be ensured that the files also have read and write permissions for the group. This can be achieved by setting the umask so that the files can also be read and written for the group. In this case, the umask would have to be set to <code>0002</code>.</p> <p>The <code>atoolo/runtime</code> package can also be used for this. An umask can be defined for the project, which is then set at runtime so that all new files created by PHP have the corresponding rights.</p>"},{"location":"develop/components/runtime/#http-client-via-proxy","title":"HTTP client via proxy","text":"<p>If an HTTP client is used in the project, it may be necessary to use a proxy.</p> <p>On Linux systems, the proxy to be used is often set as an environment variable in the <code>/etc/environment</code> file. However, this file is not taken into account by FPM, for example. The Worker processes started by Supervisor do not take this file into account either.</p> <p>One possibility would be to configure the individual services in the <code>systemd</code> configuration via <code>EnvironmentFile</code>. However, this will not survive a PHP-FPM update to a new PHP minor version, for example, as the configuration file for Debian systems is <code>/etc/systemd/system/multi-user.target.wants/php8.3-fpm.service</code>. It is easy to forget to adjust the configuration after an update.</p> <p>The <code>atoolo/runtime</code> package therefore offers the option of defining an environment file in the project, which is then read in with every request and console execution. This ensures that, for example, the proxy settings are always correct.</p>"},{"location":"develop/components/runtime/#usage","title":"Usage","text":"<p>The necessary configurations for the project are stored in the <code>composer.json</code> file. The <code>extra</code> area is used for this. The settings for the runtime of the project can be stored below <code>atoolo.runtime</code>.</p> <p><code>composer.json</code></p> <pre><code>{\n  \"extra\": {\n    \"atoolo\": {\n      \"runtime\": {\n        ...\n      }\n    }\n  }\n}\n</code></pre> <p>The configurations are read from all dependencies and the project.</p> <p>Changes to the Atoolo runtime configuration do not take effect immediately. A <code>composer dump-autoload</code> must be executed for the changes to take effect. See also Functionality.</p> <p>As the settings are made at runtime, the settings are reset with every request or console executions. Errors that occur due to incorrect configurations or failed validation affect all requests and console executions.</p> <p>The configuration can also be carried out via <code>composer config ...</code>, for example.</p> <p>Example for setting the configuration via <code>composer config</code>:</p> <pre><code>composer config --json extra.atoolo.runtime \\\n'{'\\\n'    \"env\": {'\\\n'        \"file\": \"/etc/environment\"'\\\n'    },'\\\n'    \"ini\": {'\\\n'        \"set\": {'\\\n'            \"date.timezone\": \"Europe/Berlin\"'\\\n'        }'\\\n'    },'\\\n'    \"umask\": \"0002\",'\\\n'    \"users\": ['\\\n'        \"www-data\",'\\\n'        \"{SCRIPT_OWNER}\"'\\\n'    ]'\\\n'}'\ncomposer dump-autoload\n</code></pre>"},{"location":"develop/components/runtime/#iniset","title":"<code>ini.set</code>","text":"<p>The <code>php.ini</code> settings can be stored in the <code>ini.set</code> section. The name of the <code>php.ini</code> parameter is used as the key and the value as the value.</p> <p>Example for setting the time zone: <code>composer.json</code></p> <pre><code>{\n  \"extra\": {\n    \"atoolo\": {\n      \"runtime\": {\n        \"ini\": {\n          \"set\": {\n            \"date.timezone\": \"Europe/Berlin\"\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>If the same keys with different values are set via the dependent packages and the project, the execution is aborted and an error message is issued.</p>"},{"location":"develop/components/runtime/#users","title":"<code>users</code>","text":"<p>Users can be specified as an array in the <code>users</code> section. For each request or console execution, the system checks whether the current process is being executed with one of the users. If this is not the case, an error is output and the process is terminated.</p> <p>There is also a placeholder <code>{SCRIPT_OWNER}</code>, which can be used if you want to check whether the user of the process is identical to the owner of the currently executed script. In Symfony projects, the script is usually <code>public/index.php</code> for requests and <code>bin/console</code> for console executions.</p> <p>This placeholder means that the user is also valid in the development environment, for example, if the executing user is identical to the user via which the project was checked out.</p> <p>Example for setting users: <code>composer.json</code></p> <pre><code>{\n  \"extra\": {\n    \"atoolo\": {\n      \"runtime\": {\n        \"users\": [\"www-data\", \"SCRIPT_OWNER\"]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/components/runtime/#umask_1","title":"<code>umask</code>","text":"<p>The umask can be set in the <code>umask</code> section. The value is a string that is converted to an octal number. This ensures that the file permissions are set correctly for all requests and console executions.</p> <pre><code>{\n  \"extra\": {\n    \"atoolo\": {\n      \"runtime\": {\n        \"umask\": \"0002\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/components/runtime/#envfile","title":"<code>env.file</code>","text":"<p>This can be used to specify an environment file such as <code>/etc/environment</code>. This is read in with every request and console execution. The values are saved in <code>$_ENV</code> and <code>$_SERVER</code>. Existing values are not overwritten.</p> <pre><code>{\n  \"extra\": {\n    \"atoolo\": {\n      \"runtime\": {\n        \"env\": {\n          \"file\": \"/etc/environment\"\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>If the same Variable with different values are set via the dependent packages and the project, the execution is aborted and an error message is issued.</p>"},{"location":"develop/components/runtime/#functionality","title":"Functionality","text":"<p>The <code>atoolo/runtime</code> package is a Composer plugin that is executed before the <code>autoload</code> process. The configurations are read from all dependencies and the project. All settings are determined and a file <code>vendor/atoolo_runtime.php</code> is created. This file is automatically included in the <code>autoload</code> configuration of <code>composer.json</code>. See also Composer Autoloading Files.</p> <p><code>composer.json</code></p> <pre><code>{\n  \"autoload\": {\n    \"files\": [\"vendor/atoolo_runtime.php\"]\n  }\n}\n</code></pre> <p>The <code>atoolo/runtime</code> is executed before the actual project is executed.</p> <p>However, this also means that changes to the Atoolo runtime configuration do not take effect immediately. A <code>composer dump-autoload</code> must be executed for the changes to take effect.</p>"},{"location":"develop/components/runtime/#extensions","title":"Extensions","text":""},{"location":"develop/components/runtime/#runtimeexecutable","title":"RuntimeExecutable","text":"<p>The <code>atoolo/runtime</code> package can be extended with additional functionality. For this purpose, the interface <code>Atoolo\\Runtime\\Executor\\RuntimeExecutor</code> is available. This interface must be implemented and the implementation must be registered in the project.</p> <pre><code>declare(strict_types=1);\n\nnamespace Example;\n\nuse Atoolo\\Runtime\\Executor\\RuntimeExecutor;\n\nclass MyExecutor implements RuntimeExecutor\n{\n    /**\n     * @param RuntimeOptions $options\n     */\n    public function execute(string $projectDir, array $options): void\n    {\n      foreach ($options as $package =&gt; $packageOptions) {\n        if (!isset($packageOptions['myoptions'])) {\n          continue;\n        }\n        // Do something\n      }\n    }\n}\n</code></pre> <p>The executor must be registered in <code>composer.json</code> for it to be executed.</p> <p><code>composer.json</code></p> <pre><code>\"extra\": {\n    \"atoolo\" : {\n        \"runtime\" : {\n            \"executor\" : [\n                \"Example\\\\MyExecutor\"\n            ]\n        }\n    }\n}\n</code></pre>"},{"location":"develop/components/runtime/#runtime-class","title":"Runtime class","text":"<p>The <code>atoolo/runtime</code> package can be extended with additional functionality. For this purpose, the class <code>Atoolo\\Runtime\\Runtime</code> is available. This class must be extended and the implementation must be registered in the project.</p> <pre><code>declare(strict_types=1);\n\nnamespace Example;\n\nuse Atoolo\\Runtime\\AtooloRuntime;\n\nclass MyAtooloRuntime extends AtooloRuntime\n{\n    public function run(): void\n    {\n        parent::run();\n        // Do something\n    }\n}\n</code></pre> <p>For the class to be executed, it must be registered in <code>composer.json</code>.</p> <pre><code>\"extra\": {\n    \"atoolo\" : {\n        \"runtime\" : {\n            \"class\" : \"Example\\\\MyAtooloRuntime\"\n        }\n    }\n}\n</code></pre>"},{"location":"develop/components/runtime/#runtime-template","title":"Runtime template","text":"<p>Atoolo-Execution is executed via the file <code>vendor/atoolo_runtime.php</code>. See also Functionality. This file is created via a Template. The template can be overwritten to implement additional functionalities.</p> <p>The template can be stored in the project for this purpose. The path to the template must be specified in <code>composer.json</code>.</p> <p><code>composer.json</code></p> <pre><code>\"extra\": {\n    \"atoolo\" : {\n        \"runtime\" : {\n            \"template\" : \"src/my_atoolo_runtime.template\"\n        }\n    }\n}\n</code></pre>"},{"location":"develop/form/","title":"Form API","text":"<p>The Form API is used to display forms defined by the CMS on the website and to provide functions for processing the form data.</p>"},{"location":"develop/form/#form-definition","title":"Form definition","text":"<p>Forms can be defined within the CMS with the help of a form editor. These definitions are provided to the frontend in JSON Forms format to the frontend. The task of the frontend is to display the forms according to these definitions, validate form data and send the completed forms to the Form API.</p> <p>The forms defined by the CMS are stored in resources (see also Resource Bundle). The content of a website is also contained within the resources. These are divided into individual components. A form is a component.</p> <p>The Form API can be used to retrieve the form definitions of a website. The corresponding form is localized via the URL and the definition is returned.</p> <p>The URL consists of the path</p> <p><code>/api/form/{lang}/{resource-path}/{componentId}</code></p> <code>lang</code> Language code for the language in which the form should be displayed. This parameter is optional. If it is not specified, the default language of the website is used. <code>resource-path</code> Path to the resource that contains the form. This path can also contain <code>/</code>. <code>componentId</code> ID of the component that contains the form within the specified resource. <p>curl example:</p> <pre><code>curl \"https://www.example.com/api/form/en/contact/form-1\"\n</code></pre> <p>The response contains the form definition in JSON format:</p> <pre><code>{\n  \"component\" : \"form-1\",\n  \"schema\" : { ... },\n  \"uischema\" : { ... },\n  \"data\" : { ... },\n  \"buttons\" : {\n    \"submit\" : \"Send\",\n  },\n  \"messages\" : {\n    \"success\": {\n      \"headline\": \"Confirmation\",\n      \"text\": \"Thank you for your inquiry.\"\n    }\n  }\n}\n</code></pre> <code>component</code> ID of the component for the form. <code>schema</code> JSON schema which is used to define the form data. The input data is also validated against the schema. <code>uischema</code> UI Schema which describes the layout of the form. <code>data</code> Preset data for the form. The form is pre-filled with this data. <code>buttons</code> Contains the labeling of the form buttons. <code>messages</code> Contains texts for messages that are displayed for the form. E.g. when the form is successfully sent."},{"location":"develop/form/#json-schema","title":"JSON Schema","text":"<p>The JSON schema defines the structure of the form data. It is used to validate the input data on the frontend and server side. The schema of a field also influences how the field is displayed in the frontend. For example, a field of type 'string' is displayed as a text field, while a field of type 'boolean' is displayed as a checkbox.</p> <p>See also JSON Schema.</p> <p>Individual error messages can be specified via the form editor. These must be evaluated by the frontend validator. See also Validation.</p> <p>The errors are transferred in the following form:</p> <pre><code>{\n  \"type\": \"object\",\n  \"required\": [\"foo\", \"bar\"],\n  \"properties\": {\n    \"foo\": { \"type\": \"integer\" },\n    \"bar\": { \"type\": \"string\" }\n  },\n  \"errorMessage\": {\n    \"required\": {\n      \"foo\": \"should have an integer property \\\"foo\\\"\",\n      \"bar\": \"should have a string property \\\"bar\\\"\"\n    }\n  }\n}\n</code></pre> <p>See also Messages for keywords</p>"},{"location":"develop/form/#ui-schema","title":"UI Schema","text":"<p>The UI schema is used to define how the form is displayed in the frontend. It contains information about how the fields of the form should be arranged and displayed. The UI schema is independent of the JSON schema and makes it possible to influence the display of the form without having to change the JSON schema.</p> <p>The form editor is used to define the form on the CMS page. The editor generates the JSON schema and the UI schema. The standard layouts and controls of JSON Forms are used.</p> <p>However, there are also extended controls for which a separate renderer and validator must be implemented on the frontend side.</p> <p>The layouts and their properties are described on the Layouts page.</p> <p>The controls and their properties are described on the Controls page.</p> <p>The form editor also defines a UI schema element <code>Annotation</code>, which is not included in the standard. This can be used to place annotations and notes in the form.</p> <p>The annotaions are described on the Annotations page.</p>"},{"location":"develop/form/#submit-processing","title":"Submit processing","text":"<p>The Form API provides an endpoint for sending form data. The URL is:</p> <p><code>/api/form/{lang}/{resource-path}/{componentId}</code></p> <p>The form data is sent as a POST request to this URL. The data is sent as JSON in the request body.</p> <p>curl example:</p> <pre><code>curl \"https://www.example.com/api/form/en/contact/form-1\" \\\n  --header \"Content-Type: application/json\" \\\n  --request POST \\\n  --data '{\"field-1\": \"value-1\", \"field-2\": \"value-2\"}'\n</code></pre> <p>The processing of the form can be very individual. The form data passes through several submit processors. Which processors are used is either stored centrally or determined for each form.</p> <p>The following processors can be used:</p> <code>IpLimiter</code> Limits the submits from an IP address in a certain period of time. <code>IpBlocker</code> Blocks submits from stored IP addresses. <code>SubmitLimiter</code> Limits the number of submits of a form in a certain period of time. <code>JsonSchemaValidator</code> Validates the form data against the JSON schema of the form. <code>EmailSender</code> Sends the form data by e-mail to an e-mail address specified by the form editor. All other data required for the email, such as the subject line, is also stored via the form editor."},{"location":"develop/form/#captcha","title":"Captcha","text":"<p>We deliberately do not use Captcha support at all. Ensuring the accessibility of a website is part of Sitepark's basic understanding.</p> <p>Captchas effectively exclude certain groups of people from using the form. Visual and auditory captchas are inaccessible for people with visual or hearing impairments, and motor or cognitive impairments also often make it difficult to solve the tasks. Even alternative captcha methods do not offer complete accessibility and therefore contradict the basic principle of providing unrestricted access to all users.</p>"},{"location":"develop/form/#spam-protection","title":"Spam protection","text":"<p>The elimination of captchas makes spam protection an even more important task. The Form API therefore offers various mechanisms to protect against spam.</p>"},{"location":"develop/form/#ip-blockings","title":"IP blockings","text":"<p>It is possible to block IP addresses using IP lists. For example, known IP lists that are regularly updated can be used for this purpose. Furthermore, IP addresses of cloud providers can be used, as the form api is intended exclusively for use on websites and not as an open interface for external applications and therefore it should never be a regular case that form data is sent via the IP address of a cloud provider.</p>"},{"location":"develop/form/#ip-limiter","title":"IP-Limiter","text":"<p>The IP limiter limits the number of submissions from an IP address in a certain period of time. This mechanism prevents a botnet or a single attacker from flooding the form with a large number of requests.</p>"},{"location":"develop/form/#spam-detection","title":"Spam-Detection","text":"<p>Spam detection can be carried out based on the content of the form data.</p>"},{"location":"develop/form/#no-confirmation-e-mail","title":"No confirmation e-mail","text":"<p>Emails are never sent to the sender of the form or to an email address submitted via the form. This is to prevent the Form API from being misused as a spam relay.</p>"},{"location":"develop/form/#use-of-external-services","title":"Use of external services","text":"<ul> <li>Fail2Ban to detect attacks and block them.</li> </ul>"},{"location":"develop/form/#conclusion","title":"Conclusion","text":"<p>These mechanisms cannot guarantee 100% protection against spam. However, it is possible to minimize the probability of spam attacks and reduce their impact. This is the price that is paid to ensure that the forms are accessible to as many people as possible.</p>"},{"location":"develop/form/#cross-site-request-forgery-csrf","title":"Cross-Site Request Forgery (CSRF)","text":"<p>The Form API has no state. Attack vectors that aim to manipulate data via an active session are not possible with the Form API. CSRF is therefore not relevant for the Form API.</p>"},{"location":"develop/form/#breaking-changes","title":"Breaking changes","text":"<p>Should the Form API change in a way that is not backward compatible, these changes are called \"Breaking Changes\" and may involve removing or renaming fields, arguments, or other parts of the schema.</p> <p>These are communicated via the version numbers (semantic versioning) of the corresponding bundles.</p> <p>A versioning strategy within the URL is not used. The reason for this is that the Form API should only be used within the website context. It is not intended as an open interface for external applications.</p>"},{"location":"develop/form/annotations/","title":"Annotations","text":"<p>The form editor defines an additional UI schema element <code>Annotation</code> that is not included in the standard. This allows annotations and notes to be placed in the form.</p> JSON SchemaUI Schema <p>As an annotation does not contain any input fields, it is not defined in the JSON schema.</p> <pre><code>{\n  \"type\": \"Annotation\",\n  \"htmlLabel\": {\n      \"text\": \"Note with &lt;strong&gt;html&lt;/strong&gt;\"\n  }\n}\n</code></pre> <code>htmlLabel.text</code> The text of the annotation. HTML tags can be used here."},{"location":"develop/form/controls/","title":"Controls","text":"<p>Controls are the building blocks of forms. They are the elements that allow users to interact with the form. Controls can be simple, like a text input, or complex, like a date picker.</p> <p>The controls that can be used in the forms are described below.</p> <p>The indicator that should be used to define the tester for the renderer is also specified for each control type. The indicator is derived from various attributes of the JSON schema and the UI schema. See also Custom Renderers</p>"},{"location":"develop/form/controls/#text-field","title":"Text field","text":"<p>A simple input field.</p> JSON SchemaUI SchemaIndicator <pre><code>{\n  \"type\": \"string\",\n  \"title\": \"Firstname\"\n}\n</code></pre> <pre><code>{\n  \"type\": \"Control\",\n  \"scope\": \"#/properties/firstname\",\n  \"label\": \"Firstname\",\n  \"options\": {\n    \"autocomplete\": \"name\",\n    \"spaceAfter\": true\n  }\n}\n</code></pre> <code>autocomplete</code> The <code>autocomplete</code> attribute specifies whether a form field should have autocomplete enabled. This is not to be confused with the <code>autocomplete</code> attribute for <code>enum</code> and <code>oneOf</code> for the Autocomplete Renderer. This attribute can be used to set the HTML <code>autocomplete</code> attribute as described here. The React standard renderer does not evaluate this. <code>spaceAfter</code> Ensures that a space is inserted after the input field. The React standard renderer does not evaluate this. <p>JSON-Schema: <code>type: \"string\"</code></p>"},{"location":"develop/form/controls/#email-field","title":"Email field","text":"<p>A input field for email addresses.</p> JSON SchemaUI SchemaIndicator <pre><code>{\n  \"type\": \"string\",\n  \"title\": \"E-Mail\",\n  \"format\": \"email\"\n}\n</code></pre> <pre><code>{\n  \"type\": \"Control\",\n  \"scope\": \"#/properties/email\",\n  \"label\": \"E-Mail\",\n  \"options\": {\n    \"autocomplete\": \"email\",\n    \"spaceAfter\": true,\n    \"asReplyTo\": true\n  }\n}\n</code></pre> <code>autocomplete</code> The <code>autocomplete</code> attribute specifies whether a form field should have autocomplete enabled. This is not to be confused with the <code>autocomplete</code> attribute for <code>enum</code> and <code>oneOf</code> for the Autocomplete Renderer. This attribute can be used to set the HTML <code>autocomplete</code> attribute as described here. The React standard renderer does not evaluate this. <code>spaceAfter</code> Ensures that a space is inserted after the input field. The React standard renderer does not evaluate this. <code>asReplyTo</code> The \"asReplyTo\" attribute is used to specify that the email address should be used as the reply address. This is not a standard attribute of the JSON schema, but does not have to be evaluated on the frontend side. This attribute is only relevant if the <code>EmailSender</code> form processor is used. <p>JSON-Schema: <code>type: \"string\"</code> and <code>format: \"email\"</code></p>"},{"location":"develop/form/controls/#phone-field","title":"Phone field","text":"<p>A input field for email addresses.</p> JSON SchemaUI SchemaIndicator <pre><code>{\n  \"type\": \"string\",\n  \"title\": \"Phone number\",\n  \"format\": \"phone\"\n}\n</code></pre> <pre><code>{\n  \"type\": \"Control\",\n  \"scope\": \"#/properties/email\",\n  \"label\": \"Phone number\",\n  \"options\": {\n    \"autocomplete\": \"tel\",\n    \"spaceAfter\": true\n  }\n}\n</code></pre> <code>autocomplete</code> The <code>autocomplete</code> attribute specifies whether a form field should have autocomplete enabled. This is not to be confused with the <code>autocomplete</code> attribute for <code>enum</code> and <code>oneOf</code> for the Autocomplete Renderer. This attribute can be used to set the HTML <code>autocomplete</code> attribute as described here. The React standard renderer does not evaluate this. <code>spaceAfter</code> Ensures that a space is inserted after the input field. The React standard renderer does not evaluate this. <p>JSON-Schema: <code>type: \"string\"</code> and <code>format: \"phone\"</code></p>"},{"location":"develop/form/controls/#number-field","title":"Number field","text":"<p>A input field for Numbers.</p> JSON SchemaUI SchemaIndicator <pre><code>{\n  \"type\": \"integer\",\n  \"title\": \"Age\"\n}\n</code></pre> <pre><code>{\n  \"type\": \"Control\",\n  \"scope\": \"#/properties/age\",\n  \"label\": \"Age\",\n  \"options\": {\n    \"autocomplete\": \"off\",\n    \"spaceAfter\": true\n  }\n}\n</code></pre> <code>autocomplete</code> The <code>autocomplete</code> attribute specifies whether a form field should have autocomplete enabled. This is not to be confused with the <code>autocomplete</code> attribute for <code>enum</code> and <code>oneOf</code> for the Autocomplete Renderer. This attribute can be used to set the HTML <code>autocomplete</code> attribute as described here. The React standard renderer does not evaluate this. <code>spaceAfter</code> Ensures that a space is inserted after the input field. The React standard renderer does not evaluate this. <p>JSON-Schema: <code>type: \"integer\"</code></p>"},{"location":"develop/form/controls/#date","title":"Date","text":"<p>A input field for Dates.</p> JSON SchemaUI SchemaIndicator <pre><code>{\n  \"type\": \"string\",\n  \"title\": \"Date\",\n  \"format\": \"date\"\n}\n</code></pre> <code>format</code> The <code>format</code> must be set to <code>date</code>. The date is expected in the format <code>YYYY-MM-DD</code>. <pre><code>{\n  \"type\": \"Control\",\n  \"scope\": \"#/properties/date\",\n  \"label\": \"Date\",\n  \"options\": {\n    \"autocomplete\": \"off\",\n    \"spaceAfter\": true\n  }\n}\n</code></pre> <code>autocomplete</code> The <code>autocomplete</code> attribute specifies whether a form field should have autocomplete enabled. This is not to be confused with the <code>autocomplete</code> attribute for <code>enum</code> and <code>oneOf</code> for the Autocomplete Renderer. This attribute can be used to set the HTML <code>autocomplete</code> attribute as described here. The React standard renderer does not evaluate this. <code>spaceAfter</code> Ensures that a space is inserted after the input field. The React standard renderer does not evaluate this. <p>JSON-Schema: <code>type: \"string\"</code> and <code>format: \"date\"</code></p>"},{"location":"develop/form/controls/#time","title":"Time","text":"<p>A input field for Times.</p> JSON SchemaUI SchemaIndicator <pre><code>{\n  \"type\": \"string\",\n  \"title\": \"Time\",\n  \"format\": \"time\"\n}\n</code></pre> <code>format</code> The <code>format</code> must be set to <code>time</code>. The date is expected in the format <code>hh:mm:ss.sTZD</code>. Input Status <code>\"10:05:08\"</code> valid <code>\"10:05:08.5\"</code> valid <code>\"10:05:08-02:30\"</code> valid <code>\"10:05:08Z\"</code> valid <code>\"45:60:62\"</code> invalid <code>\"10:05\"</code> invalid <pre><code>{\n  \"type\": \"Control\",\n  \"scope\": \"#/properties/time\",\n  \"label\": \"Time\",\n  \"options\": {\n    \"autocomplete\": \"off\",\n    \"spaceAfter\": true\n  }\n}\n</code></pre> <code>autocomplete</code> The <code>autocomplete</code> attribute specifies whether a form field should have autocomplete enabled. This is not to be confused with the <code>autocomplete</code> attribute for <code>enum</code> and <code>oneOf</code> for the Autocomplete Renderer. This attribute can be used to set the HTML <code>autocomplete</code> attribute as described here. The React standard renderer does not evaluate this. <code>spaceAfter</code> Ensures that a space is inserted after the input field. The React standard renderer does not evaluate this. <p>JSON-Schema: <code>type: \"string\"</code> and <code>format: \"time\"</code></p>"},{"location":"develop/form/controls/#date-time","title":"Date-Time","text":"<p>A input field for Date with Time.</p> JSON SchemaUI SchemaIndicator <pre><code>{\n  \"type\": \"string\",\n  \"title\": \"Time\",\n  \"format\": \"date-time\"\n}\n</code></pre> <code>format</code> The <code>format</code> must be set to <code>time</code>. The date is expected in the format <code>YYYY-MM-DDThh:mm:ss.sTZD</code>. Input Status <code>\"1970-01-01T10:05:08\"\"</code> valid <code>\"1970-01-01T10:05:08.10\"</code> valid <code>\"1970-01-01T10:05:08+01:00\"</code> valid <code>\"1970-01-01\"</code> invalid <code>\"1970-01-01T10:05\"</code> invalid <pre><code>{\n  \"type\": \"Control\",\n  \"scope\": \"#/properties/datetime\",\n  \"label\": \"Date and Time\",\n  \"options\": {\n    \"autocomplete\": \"off\",\n    \"spaceAfter\": true\n  }\n}\n</code></pre> <code>autocomplete</code> The <code>autocomplete</code> attribute specifies whether a form field should have autocomplete enabled. This is not to be confused with the <code>autocomplete</code> attribute for <code>enum</code> and <code>oneOf</code> for the Autocomplete Renderer. This attribute can be used to set the HTML <code>autocomplete</code> attribute as described here. The React standard renderer does not evaluate this. <code>spaceAfter</code> Ensures that a space is inserted after the input field. The React standard renderer does not evaluate this. <p>JSON-Schema: <code>type: \"string\"</code> and <code>format: \"date-time\"</code></p>"},{"location":"develop/form/controls/#multiline-text-field","title":"Multiline text field","text":"<p>A input field for multiline text.</p> JSON SchemaUI SchemaIndicator <pre><code>{\n  \"type\": \"string\",\n  \"title\": \"Supplementary remarks\"\n}\n</code></pre> <pre><code>{\n  \"type\": \"Control\",\n  \"scope\": \"#/properties/remarks\",\n  \"label\": \"Supplementary remarks\",\n  \"options\": {\n    \"multi\": true,\n    \"autocomplete\": \"off\",\n    \"spaceAfter\": true\n  }\n}\n</code></pre> <code>multi</code> Indicates that this is a multi-line text field. <code>autocomplete</code> The <code>autocomplete</code> attribute specifies whether a form field should have autocomplete enabled. This is not to be confused with the <code>autocomplete</code> attribute for <code>enum</code> and <code>oneOf</code> for the Autocomplete Renderer. This attribute can be used to set the HTML <code>autocomplete</code> attribute as described here. The React standard renderer does not evaluate this. <code>spaceAfter</code> Ensures that a space is inserted after the input field. The React standard renderer does not evaluate this. <ul> <li>JSON-Schema: <code>type: \"string\"</code></li> <li>UI-Schema: <code>options.multi: true</code></li> </ul>"},{"location":"develop/form/controls/#rich-text-field","title":"Rich text field","text":"<p>Input field that can contain HTML.</p> <p>This is not included in the JSON From standard. The validator and renderer must be implemented on the frontend side.</p> JSON SchemaUI SchemaIndicator <pre><code>{\n  \"type\": \"string\",\n  \"title\": \"Description\",\n  \"format\": \"html\",\n  \"allowedElements\": [ \"p\", \"strong\", \"em\", \"li\", \"ul\", \"ol\" ]\n}\n</code></pre> <code>format</code> The <code>format</code> must be set to <code>html</code>. This is not a standard JSON schema format. <code>allowedElements</code> The accepted HTML elements are specified as an array. This is not included in the JSON schema standard. The validator must be implemented on the frontend side. <pre><code>{\n  \"type\": \"Control\",\n  \"scope\": \"#/properties/description\",\n  \"label\": \"Description\",\n  \"options\": {\n    \"htmleditor\": true,\n    \"spaceAfter\": true\n  }\n}\n</code></pre> <code>htmleditor</code> Indicates that an HTML editor is to be used here. <code>spaceAfter</code> Ensures that a space is inserted after the input field. The React standard renderer does not evaluate this. <ul> <li>JSON-Schema: <code>type: \"string\"</code> and <code>format: \"html\"</code></li> <li>UI-Schema: <code>options.htmleditor: true</code></li> </ul>"},{"location":"develop/form/controls/#checkbox-field","title":"Checkbox field","text":"<p>A input field for Dates.</p> JSON SchemaUI SchemaIndicator <pre><code>{\n  \"type\": \"boolean\",\n  \"title\": \"Accept terms and conditions\"\n}\n</code></pre> <pre><code>{\n  \"type\": \"Control\",\n  \"scope\": \"#/properties/acceptTermsAndConditions\",\n  \"label\": \"Accept terms and conditions\",\n  \"options\": {\n    \"spaceAfter\": true\n  }\n}\n</code></pre> <code>spaceAfter</code> Ensures that a space is inserted after the input field. The React standard renderer does not evaluate this. <p>JSON-Schema: <code>type: \"boolean\"</code></p>"},{"location":"develop/form/controls/#checkbox-field-with-html-label","title":"Checkbox field with HTML label","text":"<p>A input field for Checkbox with HTML label.</p> <p>This is not included in the JSON From standard. The renderer must be implemented on the frontend side.</p> JSON SchemaUI SchemaIndicator <pre><code>{\n  \"type\": \"boolean\",\n  \"title\": \"Data protection notice accepted\"\n}\n</code></pre> <pre><code>{\n  \"type\": \"Control\",\n  \"scope\": \"#/properties/dataProtectionNoticeAccepted\",\n  \"htmlLabel\": {\n    \"text\" : \"I agree that my details and data will be processed to answer my request in accordance with the &lt;a href=\\\"/privacy-policy\\\"&gt;privacy policy&lt;/a&gt;.\"\n  },\n  \"options\": {\n    \"spaceAfter\": true\n  }\n}\n</code></pre> <code>htmlLabel.text</code> Contains the text of the label. HTML tags can be used here. <code>spaceAfter</code> Ensures that a space is inserted after the input field. The React standard renderer does not evaluate this. <ul> <li>JSON-Schema: <code>type: \"boolean\"</code></li> <li>UI-Schema: <code>htmlLabel.text: \"...\"</code></li> </ul>"},{"location":"develop/form/controls/#checkbox-group","title":"Checkbox group","text":"<p>A input field for Checkbox group.</p> JSON SchemaUI SchemaIndicator <pre><code>{\n  \"type\": \"array\",\n  \"title\": \"Your favorite pets\",\n  \"items\": {\n    \"oneOf\": [\n      {\n        \"const\" =&gt; \"dog\",\n        \"title\" =&gt; \"Dog\"\n      },\n      {\n        \"const\" =&gt; \"cat\",\n        \"title\" =&gt; \"Cat\"\n      },\n      {\n        \"const\" =&gt; \"mouse\",\n        \"title\" =&gt; \"Mouse\"\n      }\n    ]\n  },\n  \"uniqueItems\": true\n}\n</code></pre> <pre><code>{\n  \"type\": \"Control\",\n  \"scope\": \"#/properties/favoritePets\",\n  \"label\": \"Your favorite pets\",\n  \"options\": {\n    \"spaceAfter\": true\n  }\n}\n</code></pre> <code>spaceAfter</code> Ensures that a space is inserted after the input field. The React standard renderer does not evaluate this. <p>JSON-Schema: <code>type: \"array\"</code> and <code>items.oneOf: [...]</code></p>"},{"location":"develop/form/controls/#radio-buttons","title":"Radio buttons","text":"<p>A input field for Checkbox group.</p> JSON SchemaUI SchemaIndicator <pre><code>{\n  \"type\": \"array\",\n  \"title\": \"Your favorite pet\",\n  \"oneOf\": [\n    {\n      \"const\" =&gt; \"dog\",\n      \"title\" =&gt; \"Dog\"\n    },\n    {\n      \"const\" =&gt; \"cat\",\n      \"title\" =&gt; \"Cat\"\n    },\n    {\n      \"const\" =&gt; \"mouse\",\n      \"title\" =&gt; \"Mouse\"\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  \"type\": \"Control\",\n  \"scope\": \"#/properties/favoritePets\",\n  \"label\": \"Your favorite pets\",\n  \"options\": {\n    \"format\": \"radio\",\n    \"spaceAfter\": true\n  }\n}\n</code></pre> <code>spaceAfter</code> Ensures that a space is inserted after the input field. The React standard renderer does not evaluate this. <ul> <li>JSON-Schema: <code>type: \"array\"</code> and <code>oneOf: [...]</code></li> <li>UI-Schema: <code>options.format: \"radio\"</code></li> </ul>"},{"location":"develop/form/controls/#single-select","title":"Single Select","text":"<p>A input field for Checkbox group.</p> JSON SchemaUI SchemaIndicator <pre><code>{\n  \"type\": \"array\",\n  \"title\": \"Your favorite pet\",\n  \"oneOf\": [\n    {\n      \"const\" =&gt; \"dog\",\n      \"title\" =&gt; \"Dog\"\n    },\n    {\n      \"const\" =&gt; \"cat\",\n      \"title\" =&gt; \"Cat\"\n    },\n    {\n      \"const\" =&gt; \"mouse\",\n      \"title\" =&gt; \"Mouse\"\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  \"type\": \"Control\",\n  \"scope\": \"#/properties/favoritePets\",\n  \"label\": \"Your favorite pets\",\n  \"options\": {\n    \"spaceAfter\": true\n  }\n}\n</code></pre> <code>spaceAfter</code> Ensures that a space is inserted after the input field. The React standard renderer does not evaluate this. <ul> <li>JSON-Schema: <code>type: \"array\"</code> and <code>oneOf: [...]</code></li> </ul>"},{"location":"develop/form/controls/#upload-field","title":"Upload Field","text":"<p>A simple input field.</p> JSON SchemaUI SchemaIndicator <pre><code>{\n  \"type\": \"string\",\n  \"title\": \"File upload\",\n  \"format\": \"data-url\",\n  \"maxFileSize\": 2000000,\n  \"acceptedFileNames\": [\n    \"*.png\",\n    \"*.jpg\"\n  ],\n  \"acceptedContentTypes\": [\n    \"image/*\"\n  ]\n}\n</code></pre> <p>Upload files are stored as a Base64 string in the JSON object. This is not included in the JSON schema standard. The validator must be implemented on the frontend side.</p> <code>format</code> The <code>format</code> must be set to <code>data-url</code>. This is not a standard JSON schema format. The Data URI schema is used here. The file name is expected as an additional parameter (<code>name=image.png</code>). Example: <pre><code>{\n  \"image\": \"data:image/png;name=image.png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABjElEQVR42mNk\n}\n</code></pre> <code>maxFileSize</code> Maximum file size in bytes. <code>acceptedFileNames</code> Pattern for the file names that are accepted. <code>acceptedContentTypes</code> The accepted content types are specified as an array and can contain wildcards such as <code>*</code> and <code>?</code>. E.g. <code>image/*</code> or <code>image/jpeg</code>. <pre><code>{\n  \"type\": \"Control\",\n  \"label\": \"Image\",\n  \"scope\": \"#/properties/image\",\n  \"options\": {\n    \"spaceAfter\": true\n  }\n}\n</code></pre> <code>spaceAfter</code> Ensures that a space is inserted after the input field. The React standard renderer does not evaluate this. <p>JSON-Schema: <code>type: \"string\"</code> and <code>format: \"data-url\"</code></p>"},{"location":"develop/form/controls/#required-fields","title":"Required Fields","text":"<p>Required fields are defined within the JSON schema. See Required Properties.</p>"},{"location":"develop/form/controls/#rules","title":"Rules","text":"<p>Rules allow for dynamic aspects for a form, e.g. by hiding or disabling UI schema elements.</p> <p>No rules are currently supported by the form editor.</p>"},{"location":"develop/form/layouts/","title":"Layouts","text":"<p>Layout elements in the UI Schema contain other UI Schema elements like controls or other layouts and serve the purpose of defining the layout of those, e.g. a layout could arrange all its contained UI Schema Elements into a horizontal alignment.</p> <p>See also UI Schema.</p> <p>The form editor currently only uses the following layout:</p> <p>The input fields can be combined into individual groups in the form editor. These groups are arranged in a vertical layout.</p> <pre><code>- VerticalLayout\n  - Group\n    - Control\n    - Control\n    - ...\n  - Group\n    - Control\n    - Control\n    - ...\n  ...\n</code></pre> <p>The form editor also provides a contact block. This is arranged below the group and contains additional layout levels for the arrangement of the contact data fields.</p> <pre><code>- VerticalLayout\n  - Group\n    - ...\n    - Group (Start of the contact block)\n      - HorizontalLayout (E.g. for the first name and surname field, which should be next to each other.)\n        - Control (First name)\n        - Control (Surname)\n      - ...\n  ...\n</code></pre>"},{"location":"develop/form/layouts/#group","title":"Group","text":"<p>For Group there is an additional option <code>hideLabel</code>. This can be used to specify that the label of the group should not be displayed. However, for accessibility reasons, for example, it may be useful to have the label anyway.</p> <pre><code>{\n  \"type\": \"Group\",\n  \"label\": \"Group\",\n  \"elements\": [\n    {\n      \"type\": \"Control\",\n      \"scope\": \"#/properties/name\"\n    }\n  ],\n  \"options\": {\n    \"hideLabel\": true\n  }\n}\n</code></pre>"},{"location":"develop/graphql/","title":"GraphQL API","text":"<p>GraphQL is a data query and manipulation language developed by Facebook. It allows applications to request precisely the data they need, avoiding over-fetching of information. GraphQL offers a flexible and efficient way to access APIs, granting clients control over data retrieval and enabling the bundling of multiple queries into a single request. This makes GraphQL particularly appealing for modern web applications and mobile apps.</p>"},{"location":"develop/graphql/#work-with-graphql","title":"Work with GraphQL","text":"<p>If you are new to the GraphQL API, see Getting Started with the GraphQL API.</p> <p>You can view the available resources in the GraphQL API reference. The reference is automatically generated from the GitLab GraphQL schema and written to a Markdown file.</p> <p>The GraphQL API endpoint is located at <code>/api/graphql</code>.</p> <p>The GraphQL Schema Language Cheat Sheet is also helpful.</p>"},{"location":"develop/graphql/#graphql-api-reference","title":"GraphQL API reference","text":"<p>The documentation of the GraphQL API resources is automatically generated based on the GraphQL schema and varies depending on the used bundles.</p>"},{"location":"develop/graphql/#breaking-changes","title":"Breaking changes","text":"<p>The GraphQL API is versionless and changes to the API are primarily backward-compatible.</p> <p>Should the GraphQL API change in a way that is not backward compatible, these changes are called \"Breaking Changes\" and may involve removing or renaming fields, arguments, or other parts of the schema. When a Breaking Change is created, there will be a transition period where the old from will continue to be supported and marked deprecated. Until a time when the parts marked as deprecated are removed.</p>"},{"location":"develop/graphql/error-handling/","title":"Error handling","text":"<p>The response of a GraphQL query always contains a <code>data</code> field in case of success. In the event of an error, the <code>data</code> field is not set; instead, an <code>errors</code> field containing a list of errors is returned.</p>"},{"location":"develop/graphql/error-handling/#example-of-a-failed-request","title":"Example of a failed request","text":"<pre><code>mutation webAccountAuthenticationWithPassword {\n  webAccountAuthenticationWithPasswordXXX(\n    username: \"peterpan\"\n    password: \"develop\"\n    setJwtCookie: true\n  ) {\n    status\n    user {\n      id\n      username\n      firstName\n      lastName\n      email\n      roles\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"errors\": [\n    {\n      \"message\": \"Cannot query field \\\"webAccountAuthenticationWithPasswordXXX\\\" on type \\\"RootMutation\\\". Did you mean \\\"webAccountAuthenticationWithPassword\\\"?\",\n      \"locations\": [\n        {\n          \"line\": 2,\n          \"column\": 3\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"develop/graphql/getting-started/","title":"Getting started","text":"<p>This guide shows the integration and basic usage of the GraphQL API.</p>"},{"location":"develop/graphql/getting-started/#requirements","title":"Requirements","text":"<p>A Symfony 6.4 project with Symfony-Flex is required. In this project the GraphQL endpoint is set up.</p>"},{"location":"develop/graphql/getting-started/#install","title":"Install","text":"<p>For GraphQl integration the <code>overblog/GraphQLBundle</code> Symfony bundle is used.</p> <p>First add the Sitepark Flex Repository before installing the bundle.</p> <p>See: Sitepark Flex Repository</p> <p>The installation is then carried out via <code>composer require</code>.</p> <pre><code>composer require atoolo/graphql-search-bundle\n</code></pre>"},{"location":"develop/graphql/getting-started/#usage","title":"Usage","text":""},{"location":"develop/graphql/getting-started/#basics","title":"Basics","text":"<p>To learn the basics of GraphQL, \"Introduction to GraphQL\" is a good place to start.</p>"},{"location":"develop/graphql/getting-started/#commandline","title":"Commandline","text":"<p>You can run GraphQL queries in a curl query in the command line on your local computer. A GraphQL query can be issued as a POST request to `/graphql with the query as the payload.</p> <p>With the fictitious endpoint <code>www.example.com</code>, the GraphQL endpoint can be reached at the following URL.</p> <pre><code>curl \"https://www.example.com/api/graphql/\" --fail \\\n    --header \"Content-Type: application/json\" \\\n    --request POST \\\n    --data '{\"query\" : \"{ ping }\"}'\n</code></pre>"},{"location":"develop/graphql/getting-started/#clients","title":"Clients","text":"<p>Because GraphQL is a communication pattern, there are many tools to help you get started working which support GraphQL in all sorts of languages.</p> <p>See e.g. here</p>"},{"location":"develop/graphql/getting-started/#altair-graphql-client","title":"Altair GraphQL Client","text":"<p>Altair GraphQL Client is a GraphQL client that allows you to interact with GraphQL servers. It provides a user-friendly interface for creating, executing, and debugging queries. Altair supports features such as automatic code completion, syntax highlighting, and real-time query execution. It is a valuable tool for working with GraphQL APIs, streamlining the development process, and improving query accuracy.</p> <p>It is also available as a browser extension.</p>"},{"location":"develop/graphql/getting-started/#graphiql","title":"GraphiQL","text":"<p>GraphiQL is an interactive development environment for GraphQL that allows developers to easily create, execute and test GraphQL queries. It provides a user-friendly interface with features such as automatic code completion and real-time query execution. GraphiQL helps developers explore API endpoints and develop and debug queries efficiently. It is a valuable tool for working with GraphQL APIs, streamlining the development process and improving query accuracy.</p> <p>GraphiQL can be installed as a desktop app, for example. See GraphQL-Playground.</p> <p>With the fictitious endpoint <code>www.example.com</code> the GraphQL Playground needs the URL.</p> <p><code>https://www.example.com/api/graphql/</code></p> <p>The ending slash is necessary and must not be omitted.</p>"},{"location":"develop/graphql/reference/","title":"Schema Types","text":""},{"location":"develop/graphql/reference/#query-rootquery","title":"Query (RootQuery)","text":"Field Argument Type Description indexerStatus IndexerStatus! suggest SuggestResult! input SuggestInput! ping String! search SearchResult! input SearchInput! moreLikeThis SearchResult! input MoreLikeThisInput!"},{"location":"develop/graphql/reference/#mutation-rootmutation","title":"Mutation (RootMutation)","text":"Field Argument Type Description index IndexerStatus! indexUpdate IndexerStatus! paths [String!]!   List of resource paths that are to be updated.   indexRemove Boolean! idList [String!]   list of id's of the entries to be deleted   indexAbort Boolean! webAccountAuthenticationWithPassword AuthenticationResult! username String! password String! setJwtCookie Boolean! webAccountUnsetJwtCookie Boolean!"},{"location":"develop/graphql/reference/#objects","title":"Objects","text":""},{"location":"develop/graphql/reference/#articleteaser","title":"ArticleTeaser","text":"<p>An article teaser is a short summary or preview designed to pique the reader's interest by highlighting the main points or most exciting aspects of an article.</p> Field Argument Type Description url \u26a0\ufe0f String   Teaser URL  <p>\u26a0\ufe0f DEPRECATED</p>   Use field 'link' instead   link Link   Teaser Link   date DateTime   Teaser date   headline String   Teaser headline   text String   Teaser text   kicker String   Teaser kicker text   asset Asset   Teaser asset can be e.g. pictures or videos   variant String   The asset variant is used to decide which image format is to be returned.   symbolicAsset Asset   symbolic asset associated with the teaser   variant String   The asset variant is used to decide which image format is to be returned.   features [TeaserFeature!]!   additional, context dependent teaser features indicating information about the underling resource"},{"location":"develop/graphql/reference/#authenticationresult","title":"AuthenticationResult","text":"Field Argument Type Description status AuthenticationStatus! user User!"},{"location":"develop/graphql/reference/#copyrightdetails","title":"CopyrightDetails","text":"Field Argument Type Description original Link author Link license Link"},{"location":"develop/graphql/reference/#eventteaser","title":"EventTeaser","text":"<p>Event teaser</p> Field Argument Type Description url \u26a0\ufe0f String   Teaser URL  <p>\u26a0\ufe0f DEPRECATED</p>   Use field 'link' instead   link Link   Teaser Link   headline String   Teaser headline   text String   Teaser text   kicker String   Teaser kicker text   asset Asset   Teaser asset can be e.g. pictures or videos   variant String!   The teaser variant is used to decide which image format is to be returned.   symbolicAsset Asset   symbolic asset associated with the teaser   variant String   The asset variant is used to decide which image format is to be returned.   schedulings [Scheduling!]!   schedulings   iCalUrl String   Downlaod url for the event scheduling as an .ics file"},{"location":"develop/graphql/reference/#facet","title":"Facet","text":"Field Argument Type Description key String! hits Int!"},{"location":"develop/graphql/reference/#facetgroup","title":"FacetGroup","text":"Field Argument Type Description key String! facets [Facet!]!"},{"location":"develop/graphql/reference/#geo","title":"Geo","text":"Field Argument Type Description primary GeoPoint secondary GeoJson distance Float"},{"location":"develop/graphql/reference/#geopoint","title":"GeoPoint","text":"Field Argument Type Description lng Float! lat Float!"},{"location":"develop/graphql/reference/#hierarchy","title":"Hierarchy","text":"Field Argument Type Description root Resource! primaryParent Resource primaryPath [Resource!] children [Resource!]"},{"location":"develop/graphql/reference/#image","title":"Image","text":"Field Argument Type Description copyright String copyrightDetails CopyrightDetails caption String description String alternativeText String original ImageSource! characteristic ImageCharacteristic sources [ImageSource!]! static \u26a0\ufe0f ImageSource! <p>\u26a0\ufe0f DEPRECATED</p>   'static' might be a reserved keyword. Use field 'staticImage' instead   staticImage ImageSource!"},{"location":"develop/graphql/reference/#imagesource","title":"ImageSource","text":"Field Argument Type Description variant String! url String! width Int! height Int! mediaQuery String"},{"location":"develop/graphql/reference/#indexerstatus","title":"IndexerStatus","text":"Field Argument Type Description startTime DateTime endTime DateTime lastUpdate DateTime total Int processed Int skipped Int updated Int errors Int statusLine String"},{"location":"develop/graphql/reference/#link","title":"Link","text":"Field Argument Type Description url String! label String accessibilityLabel String description String opensNewWindow Boolean! isExternal Boolean!"},{"location":"develop/graphql/reference/#mediateaser","title":"MediaTeaser","text":"Field Argument Type Description url \u26a0\ufe0f String   Teaser URL  <p>\u26a0\ufe0f DEPRECATED</p>   Use field 'link' instead   link Link   Teaser Link   headline String text String kicker String contentType String! contentLength Int! asset Asset   Teaser asset can be e.g. pictures or videos   variant String!   The asset variant is used to decide which image format is to be returned.   symbolicAsset Asset   symbolic asset associated with the teaser   variant String   The asset variant is used to decide which image format is to be returned.   features [TeaserFeature!]!   additional, context dependent teaser features indicating information about the underling resource"},{"location":"develop/graphql/reference/#newsteaser","title":"NewsTeaser","text":"<p>An news teaser is a short summary or preview designed to pique the reader's interest by highlighting the main points or most exciting aspects of an article.</p> Field Argument Type Description url \u26a0\ufe0f String   Teaser URL  <p>\u26a0\ufe0f DEPRECATED</p>   Use field 'link' instead   link Link   Teaser Link   date DateTime   News Teaser date   headline String   News Teaser headline   text String   News Teaser text   kicker String   Teaser kicker text   asset Asset   Teaser asset can be e.g. pictures or videos   variant String!   The teaser variant is used to decide which image format is to be returned.   symbolicAsset Asset   symbolic asset associated with the teaser   variant String   The asset variant is used to decide which image format is to be returned.   features [TeaserFeature!]!   additional, context dependent teaser features indicating information about the underling resource"},{"location":"develop/graphql/reference/#onlineservice","title":"OnlineService","text":"Field Argument Type Description link Link!"},{"location":"develop/graphql/reference/#onlineservicefeature","title":"OnlineServiceFeature","text":"Field Argument Type Description label String onlineServices [OnlineService!]!"},{"location":"develop/graphql/reference/#resource","title":"Resource","text":"Field Argument Type Description id ID! name String! location String! objectType String! contentSectionTypes [String!] teaser Teaser! navigation Hierarchy! kicker String date DateTime geo Geo asset Asset variant String symbolicAsset Asset variant String explain ResultExplain"},{"location":"develop/graphql/reference/#resultexplain","title":"ResultExplain","text":"Field Argument Type Description score Float type String field String description String details [ResultExplain!]"},{"location":"develop/graphql/reference/#scheduling","title":"Scheduling","text":"Field Argument Type Description start DateTime! end DateTime rRule String isFullDay Boolean! hasStartTime Boolean! hasEndTime Boolean!"},{"location":"develop/graphql/reference/#searchresult","title":"SearchResult","text":"Field Argument Type Description total Int! queryTime Int! offset Int! limit Int! results [Resource!]! facetGroups [FacetGroup!]! spellcheck Spellcheck"},{"location":"develop/graphql/reference/#spellcheck","title":"Spellcheck","text":"Field Argument Type Description suggestions [SpellcheckSuggestion!]! collation String!"},{"location":"develop/graphql/reference/#spellchecksuggestion","title":"SpellcheckSuggestion","text":"Field Argument Type Description original SpellcheckWord! suggestion SpellcheckWord!"},{"location":"develop/graphql/reference/#spellcheckword","title":"SpellcheckWord","text":"Field Argument Type Description word String! frequency Int!"},{"location":"develop/graphql/reference/#suggestresult","title":"SuggestResult","text":"Field Argument Type Description suggestions [Suggestion!]! queryTime Int!"},{"location":"develop/graphql/reference/#suggestion","title":"Suggestion","text":"Field Argument Type Description term String! hits Int!"},{"location":"develop/graphql/reference/#svg","title":"Svg","text":"Field Argument Type Description copyright String copyrightDetails CopyrightDetails caption String description String url String"},{"location":"develop/graphql/reference/#user","title":"User","text":"Field Argument Type Description id ID! username String! firstName String lastName String! email String roles [String!]!"},{"location":"develop/graphql/reference/#inputs","title":"Inputs","text":""},{"location":"develop/graphql/reference/#absolutedaterangeinputfacet","title":"AbsoluteDateRangeInputFacet","text":"Field Type Description from DateTime! to DateTime! gap DateInterval"},{"location":"develop/graphql/reference/#absolutedaterangeinputfilter","title":"AbsoluteDateRangeInputFilter","text":"Field Type Description from DateTime to DateTime"},{"location":"develop/graphql/reference/#inputboosting","title":"InputBoosting","text":"Field Type Description queryFields [String!] phraseFields [String!] boostQueries [String!] boostFunctions [String!] tie Float"},{"location":"develop/graphql/reference/#inputfacet","title":"InputFacet","text":"Field Type Description key String! excludeFilter [String!] objectTypes [String!] contentSectionTypes [String!] categories [String!] sites [String!] sources [String!] contentTypes [String!] groups [String!] absoluteDateRange AbsoluteDateRangeInputFacet relativeDateRange RelativeDateRangeInputFacet spatialDistanceRange SpatialDistanceRangeInputFacet query String queryTemplate QueryTemplateInput"},{"location":"develop/graphql/reference/#inputfilter","title":"InputFilter","text":"Field Type Description key String ids [String!] objectTypes [String!] contentSectionTypes [String!] teaserProperty TeaserPropertyInputFilter categories [String!] sites [String!] sources [String!] contentTypes [String!] groups [String!] absoluteDateRange AbsoluteDateRangeInputFilter relativeDateRange RelativeDateRangeInputFilter geoLocated Boolean spatialOrbital SpatialOrbitalInputFilter spatialArbitraryRectangle SpatialArbitraryRectangleInputFilter and [InputFilter!] or [InputFilter!] not InputFilter query String queryTemplate QueryTemplateInput"},{"location":"develop/graphql/reference/#inputgeopoint","title":"InputGeoPoint","text":"Field Type Description lng Float! lat Float!"},{"location":"develop/graphql/reference/#inputsortcriteria","title":"InputSortCriteria","text":"Field Type Description name SortDirection date SortDirection natural SortDirection score SortDirection spatialDist SortDirection spatialPoint InputGeoPoint"},{"location":"develop/graphql/reference/#morelikethisinput","title":"MoreLikeThisInput","text":"Field Type Description id String! context SearchContextInput lang String filter [InputFilter!] limit Int archive Boolean"},{"location":"develop/graphql/reference/#querytemplateinput","title":"QueryTemplateInput","text":"Field Type Description query String! variables Json!"},{"location":"develop/graphql/reference/#relativedaterangeinputfacet","title":"RelativeDateRangeInputFacet","text":"Field Type Description base DateTime   Defaults to the current datetime if null   baseOffset SignedDateInterval before DateInterval   Sets the lower date boundary. Implicitely directed toward the past.   after DateInterval   Sets the upper date boundary. Implicitely directed toward the future.   from SignedDateInterval   Sets the lower date boundary   to SignedDateInterval   Sets the upper date boundary   gap DateInterval roundStart DateRangeRound roundEnd DateRangeRound"},{"location":"develop/graphql/reference/#relativedaterangeinputfilter","title":"RelativeDateRangeInputFilter","text":"Field Type Description base DateTime   Defaults to the current datetime if null   baseOffset SignedDateInterval before DateInterval   Sets the lower date boundary. Implicitely directed toward the past.   after DateInterval   Sets the upper date boundary. Implicitely directed toward the future.   from SignedDateInterval   Sets the lower date boundary   to SignedDateInterval   Sets the upper date boundary   roundStart DateRangeRound roundEnd DateRangeRound"},{"location":"develop/graphql/reference/#searchcontextinput","title":"SearchContextInput","text":"Field Type Description urlBasePath String resourceLocation String options SearchContextOptionsInput"},{"location":"develop/graphql/reference/#searchcontextoptionsinput","title":"SearchContextOptionsInput","text":"Field Type Description sameNavigation Boolean"},{"location":"develop/graphql/reference/#searchinput","title":"SearchInput","text":"Field Type Description text String offset Int limit Int lang String context SearchContextInput defaultQueryOperator QueryOperator sort [InputSortCriteria!] filter [InputFilter!] facets [InputFacet!] spellcheck Boolean archive Boolean timeZone DateTimeZone boosting InputBoosting distanceReferencePoint InputGeoPoint explain Boolean"},{"location":"develop/graphql/reference/#spatialarbitraryrectangleinputfilter","title":"SpatialArbitraryRectangleInputFilter","text":"Field Type Description lowerLeftCorner InputGeoPoint! upperRightCorner InputGeoPoint!"},{"location":"develop/graphql/reference/#spatialdistancerangeinputfacet","title":"SpatialDistanceRangeInputFacet","text":"Field Type Description point InputGeoPoint! from Float! to Float!"},{"location":"develop/graphql/reference/#spatialorbitalinputfilter","title":"SpatialOrbitalInputFilter","text":"Field Type Description distance Float! centerPoint InputGeoPoint! mode SpatialOrbitalMode"},{"location":"develop/graphql/reference/#suggestinput","title":"SuggestInput","text":"Field Type Description text String! limit Int lang String filter [InputFilter!] archive Boolean"},{"location":"develop/graphql/reference/#teaserpropertyinputfilter","title":"TeaserPropertyInputFilter","text":"Field Type Description image Boolean imageCopyright Boolean headline Boolean text Boolean"},{"location":"develop/graphql/reference/#enums","title":"Enums","text":""},{"location":"develop/graphql/reference/#authenticationstatus","title":"AuthenticationStatus","text":"Value Description SUCCESS PARTIAL FAILURE"},{"location":"develop/graphql/reference/#daterangeround","title":"DateRangeRound","text":"Value Description START_OF_DAY START_OF_PREVIOUS_DAY END_OF_DAY END_OF_PREVIOUS_DAY START_OF_MONTH START_OF_PREVIOUS_MONTH END_OF_MONTH END_OF_PREVIOUS_MONTH START_OF_YEAR START_OF_PREVIOUS_YEAR END_OF_YEAR END_OF_PREVIOUS_YEAR"},{"location":"develop/graphql/reference/#imagecharacteristic","title":"ImageCharacteristic","text":"Value Description NORMAL INFOGRAPHIC DECORATIVE_IMAGE DECORATIVE_IMAGE_NOT_CUT"},{"location":"develop/graphql/reference/#queryoperator","title":"QueryOperator","text":"Value Description AND OR"},{"location":"develop/graphql/reference/#sortdirection","title":"SortDirection","text":"Value Description ASC DESC"},{"location":"develop/graphql/reference/#spatialorbitalmode","title":"SpatialOrbitalMode","text":"Value Description GREAT_CIRCLE_DISTANCE BOUNDING_BOX"},{"location":"develop/graphql/reference/#scalars","title":"Scalars","text":""},{"location":"develop/graphql/reference/#boolean","title":"Boolean","text":"<p>The <code>Boolean</code> scalar type represents <code>true</code> or <code>false</code>.</p>"},{"location":"develop/graphql/reference/#dateinterval","title":"DateInterval","text":"<p>The scalar type <code>DateInterval</code> represents a date interval duration string. It is specified in ISO-8601 format (e.g. <code>P3Y6M4DT12H30M5S</code>).</p>"},{"location":"develop/graphql/reference/#datetime","title":"DateTime","text":"<p>The scalar type <code>DateTime</code> represents a date and time string. It is specified with the UTC time zone in ISO-8601 format (e.g. <code>2024-05-22T10:13:00Z</code>).</p>"},{"location":"develop/graphql/reference/#datetimezone","title":"DateTimeZone","text":"<p>The scalar type <code>DateTimeZone</code> represents a timezone string. It is specified in the IANA timezone database format (e.g. <code>America/New_York</code>).</p>"},{"location":"develop/graphql/reference/#float","title":"Float","text":"<p>The <code>Float</code> scalar type represents signed double-precision fractional values as specified by IEEE 754. </p>"},{"location":"develop/graphql/reference/#geojson","title":"GeoJson","text":""},{"location":"develop/graphql/reference/#id","title":"ID","text":"<p>The <code>ID</code> scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as <code>\"4\"</code>) or integer (such as <code>4</code>) input value will be accepted as an ID.</p>"},{"location":"develop/graphql/reference/#int","title":"Int","text":"<p>The <code>Int</code> scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. </p>"},{"location":"develop/graphql/reference/#json","title":"Json","text":""},{"location":"develop/graphql/reference/#signeddateinterval","title":"SignedDateInterval","text":"<p>The scalar type <code>SignedDateInterval</code> represents a date interval duration string that additionally allows for a leading minus sign (as specified in ISO 8601-2:2019).</p>"},{"location":"develop/graphql/reference/#string","title":"String","text":"<p>The <code>String</code> scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.</p>"},{"location":"develop/graphql/reference/#interfaces","title":"Interfaces","text":""},{"location":"develop/graphql/reference/#asset","title":"Asset","text":"Field Argument Type Description copyright String copyrightDetails CopyrightDetails caption String description String <p>Possible Types: Image, Svg</p>"},{"location":"develop/graphql/reference/#teaser","title":"Teaser","text":"Field Argument Type Description url \u26a0\ufe0f String   Teaser URL  <p>\u26a0\ufe0f DEPRECATED</p>   Use field 'link' instead   link Link   Teaser Link   <p>Possible Types: ArticleTeaser, MediaTeaser, NewsTeaser, EventTeaser</p>"},{"location":"develop/graphql/reference/#teaserfeature","title":"TeaserFeature","text":"Field Argument Type Description label String <p>Possible Types: OnlineServiceFeature</p>"},{"location":"develop/graphql/customization/","title":"Project-specific customizations","text":"<p>This section contains information about customizing the GraphQL API for your project. It includes information about customizing the schema, customizing the resolvers, and adding custom queries.</p> <p>The schema is the structure of the GraphQL API. It defines the types, queries, and mutations that are available to clients. You can customize the schema by adding new types and queries or by modifying existing ones.</p>"},{"location":"develop/graphql/customization/#add-custom-teaser","title":"Add custom teaser","text":"<p>For customer-specific object types, it is sometimes necessary to create your own teaser types. GraphQL schema can then be extended for this purpose.</p> <p>First, the new teaser type must be entered in the GraphQL configuration. To do this, the file <code>config/packages/graphql.yml</code> is adapted.</p> <p>The configuration file should look like this:</p> <p><code>config/packages/graphql.yml</code></p> <pre><code>overblog_graphql:\n  definitions:\n    schema:\n      query: RootQuery\n      mutation: RootMutation\n      types: [CustomTeaser] # (1)\n    mappings:\n      types:\n        - types: [yaml, graphql]\n          dir: \"%kernel.project_dir%/vendor/atoolo/graphql-search-bundle/src/Resources/ chema/defaults\"\n          suffix: ~\n        - types: [yaml, graphql] # (2)\n          dir: \"%kernel.project_dir%/config/graphql/types\"\n          suffix: ~\n</code></pre> <ol> <li> The new teaser types are entered here.</li> <li> The configuration directory in which the schema for the teaser is stored is specified here.</li> </ol> <p>There are various ways to define the schema. See also here. For example, a GraphQL schema file can be created directly in which the schema is defined. This can look like this, for example:</p> <p><code>config/graphql/types/schema.types.graphql</code></p> <pre><code>type CustomTeaser implements Teaser {\n  customField: String\n}\n</code></pre> <p>To ensure that the <code>CustomTeaser</code> is also used with a corresponding object type, a <code>TeaserResolver</code> must be created. This can then look as follows:</p> <p><code>src/GraphQL/Resolver/CustomTeaserResolver.php</code></p> <pre><code>use Atoolo\\GraphQL\\Search\\Resolver\\TeaserResolver;\nuse Atoolo\\GraphQL\\Search\\Types\\Teaser;\nuse Atoolo\\Resource\\Resource;\nuse App\\GraphQL\\Type\\CustomTeaser;\n\nclass CustomTeaserResolver implements TeaserResolver\n{\n    public function accept(Resource $resource): bool\n    {\n        return $resource-&gt;getObjectType() === 'customObjectType';\n    }\n\n    public function resolve(Resource $resource): Teaser\n    {\n        return new CustomTeaser(\n          // ... custom fields\n        );\n    }\n}\n</code></pre> <p>This still has to be registered as a service:</p> <p><code>config/services.yaml</code></p> <pre><code>services:\n  App\\GraphQL\\Resolver\\CustomTeaserResolver:\n    tags:\n      - { name: \"atoolo.graphql.teaserResolver\", priority: 5 }\n</code></pre> <p>The values of the teaser can also be returned for individual fields via resolver methods. This can be useful, for example, if the determination is complex and should only be executed if the field is actually queried.</p> <p>The <code>Resolver</code> interface must also be implemented for this:</p> <pre><code>use Atoolo\\GraphQL\\Search\\Resolver\\Resolver;\nuse Atoolo\\GraphQL\\Search\\Resolver\\TeaserResolver;\nuse Atoolo\\GraphQL\\Search\\Types\\Teaser;\nuse Atoolo\\Resource\\Resource;\nuse App\\GraphQL\\Type\\CustomTeaser;\n\nclass CustomTeaserResolver implements TeaserResolver, Resolver\n{\n    public function accept(Resource $resource): bool\n    {\n        return $resource-&gt;getObjectType() === 'customObjectType';\n    }\n\n    public function resolve(Resource $resource): Teaser\n    {\n        return new CustomTeaser(\n          // ... custom fields\n        );\n    }\n\n    public function getSomeField(CustomTeaser $teaser): string\n    {\n        return 'some value';\n    }\n}\n</code></pre> <p>Additional tagging of the service is necessary here:</p> <p><code>config/services.yaml</code></p> <pre><code>services:\n  App\\GraphQL\\Resolver\\CustomTeaserResolver:\n    tags:\n      - { name: \"atoolo.graphql.teaserResolver\", priority: 5 }\n      - { name: \"atoolo.graphql.resolver\", priority: 10 } # (1)\n</code></pre> <ol> <li> Additional tagging</li> </ol>"},{"location":"develop/graphql/customization/#extending-base-teaser-type","title":"Extending base teaser type","text":"<p>You can extend the base <code>Teaser</code> type to add custom fields to the teaser type. Changes to the basic teaser type affect all teaser types that extend the 'Teaser' type.</p> <p>To make it possible to extend the basic teaser types, the basic teasers are defined as decorators. Therefore, the configuration in the customer project normally looks like this:</p> <pre><code>overblog_graphql:\n  definitions:\n    mappings:\n      types:\n        - types: [yaml, graphql]\n          dir: \"%kernel.project_dir%/vendor/atoolo/graphql-search-bundle/src/Resources/ chema/defaults\"\n          suffix: ~\n</code></pre> <p>This configuration is used to define the default teaser types that the decorators use. See also the documentation for Inheritance and the Decorators section there.</p> <p>Normally, the definition of the article teaser looks like this, for example: <code>vendor/atoolo/graphql-search-bundle/src/Resources/schema/defaults/ArticleTeaser.defaulttype.yaml</code></p> <pre><code>ArticleTeaser:\n  type: \"object\"\n  inherits: [ArticleTeaserDecorator]\n</code></pre> <p>If one or more teasers are to be customized, the default types can no longer be used. All files from <code>vendor/atoolo/graphql-search-bundle/src/Resources/schema/defaults/ArticleTeaser.defaulttype.yaml</code> must be copied to <code>config/graphql/types/</code> and the desired teasers adapted.</p> <p>It is also necessary to change the configuration in <code>config/packages/graphql.yml</code>:</p> <pre><code>overblog_graphql:\n  definitions:\n    mappings:\n      types:\n        # - types: [yaml, graphql]\n        #   dir: \"%kernel.project_dir%/vendor/atoolo/graphql-search-bundle/src/Resources/ chema/defaults\"\n        #   suffix: ~\n        - types: [yaml, graphql]\n          dir: \"%kernel.project_dir%/config/graphql/types\"\n          suffix: ~\n</code></pre> <p>A new field can now be added to the basic teaser, for example:</p> <p><code>config/graphql/types/Teaser.defaulttype.yaml</code></p> <pre><code>Teaser:\n  type: interface\n  inherits: [TeaserDecorator]\n  config:\n    fields:\n      customfield:\n        type: \"String\"\n        description: General Custom-Field\n</code></pre> <p>To be able to return the value of the new field, a <code>Resolver</code> must be created. This can then look as follows:</p> <p><code>src/GraphQL/Resolver/TeaserResolver.php</code></p> <pre><code>use Atoolo\\GraphQL\\Search\\Resolver\\Resolver;\nuse Atoolo\\GraphQL\\Search\\Types\\ArticleTeaser;\nuse Atoolo\\GraphQL\\Search\\Types\\MediaTeaser;\n\nclass ExtendedTeaserResolver implements Resolver\n{\n    public function getCustomfield(\n        ArticleTeaser|MediaTeaser $teaser,\n    ): ?string {\n        return '';\n    }\n}\n</code></pre> <p>All teaser types that have the new field must be listed in the method signature via a union type. In this case, these are <code>ArticleTeaser</code> and <code>MediaTeaser</code>.</p> <p>This still has to be registered as a service:</p> <p><code>config/services.yaml</code></p> <pre><code>services:\n  App\\GraphQL\\Resolver\\ExtendedTeaserResolver:\n    tags:\n      - { name: \"atoolo.graphql.resolver\", priority: 10 }\n</code></pre>"},{"location":"develop/graphql/customization/#custom-query","title":"Custom query","text":"<p>To add a custom query, a new query type must be created. The easiest way to do this is via PHP 8 attributes. See also Annotations &amp; PHP 8 attributes</p>"},{"location":"develop/graphql/search/","title":"Search","text":"<p>The GraphQL query <code>search</code> can be used to search for resources. The aim of this GraphQL query is to fulfill the requirements for a search within the website. The focus here is on full-text searches, filters and facets.</p>"},{"location":"develop/graphql/search/#search-in-a-index","title":"Search in a index","text":"<p>The search is performed using a full-text index. The IES takes care of filling and updating the index. There is a separate index for each publication channel. For translated publication channels, there is a separate index for each language.</p> <p>For each query via <code>selectResources</code>, the index to be searched must be specified via the input parameter <code>index</code>.</p>"},{"location":"develop/graphql/search/#full-text-search","title":"Full text search","text":"<p>To find resources using a full-text search, the text is specified using the input parameter <code>text</code>. The index is searched for the text and the corresponding hits are returned. The search is performed word by word. If several words (separated by spaces) are entered, an 'OR' search is carried out by default and the hits must contain at least one of the words. An <code>OR</code> search can also be carried out. To do this, the input parameter <code>queryDefaultOperator</code> must be specified with <code>OR</code>:</p> <pre><code>query {\n  search(input: {\n    text: \"cacao coffee\"\n    queryDefaultOperator: OR\n  }) {\n    ...\n  }\n}\n</code></pre> <p>Example:</p> <pre><code>query {\n  search(input: { text: \"chocolate\" }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n    }\n  }\n}\n</code></pre> <p>Quotation marks can be used to search for related phrases:</p> <pre><code>query {\n  search(input: {\n    text: \"cacao \\\"milk coffee\\\"\"\n  }) {\n    ...\n  }\n}\n</code></pre> <p>In order to force a word to be included in the search results, a <code>+</code> can be placed in front of the word:</p> <pre><code>query {\n  search(input: {\n    text: \"cacao coffee +milk\"\n  }) {\n    ...\n  }\n}\n</code></pre> <p>To exclude a word from the search results, a <code>-</code> can be placed in front of the word:</p> <pre><code>query {\n  search(input: {\n    text: \"cacao coffee -milk\"\n  }) {\n    ...\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/#multilingual-search","title":"Multilingual search","text":"<p>The IES supports multilingual resource channels. Editorial content is only ever written in one language and is automatically translated into the other languages by the CMS. A multilingual resource channel then contains several resources for an article, each of which is published in a different language. For the search, a separate full text index is created for each language, which also takes into account language-specific features such as stop words and stemming.</p> <p>If the publication channel is multilingual, the search is limited to a specific language. The language is specified using the input parameter <code>lang</code>. If no <code>lang</code> is specified, the search is carried out in the base language of the channel.</p> <p>Example:</p> <pre><code>query {\n  search(input: { text: \"chocolate\", lang: \"it\" }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n    }\n  }\n}\n</code></pre> <p>Of course, the search results are also in the respective language. Regardless of whether a full-text search or a filter is carried out.</p>"},{"location":"develop/graphql/search/#sorting","title":"Sorting","text":"<p>Sort criteria can be used to specify how the result should be sorted. Multiple sorting criteria can be specified, which are applied to the result one after the other. The second sort criterion is used if the first is the same and so on.</p> <p>If no sorting criterion is specified, the result is sorted by relevance. The <code>score</code> is used here, which is higher the more precisely the hit matches the search.</p> <p>The following sorting criteria are possible:</p> Search criteria Description <code>name</code> This is sorted by the name of the article. In some cases, the name is preceded by a numerical prefix to achieve the desired sorting in the CMS <code>date</code> In many cases, an editorial date can be set for the article that is used here. Otherwise it is the last modification date of the article. <code>natural</code> In most cases, a sort field is written to the index, which should describe the natural sorting of the entry. For normal articles, this is usually the heading. For news or events, however, it is the date, for example. This sort field is used in this case. <code>score</code> The score is determined during the search and describes how closely the individual hits match the search query. This sorting is useful for full-text searches in order to obtain the most accurate results first. Here it is sorted according to relevance. <code>spatialDist</code> The hits are sorted according to the distance to the reference point. The reference point is specified via an additional parameter <code>spatialPoint</code> <code>custom</code> This sort criterion allows you to use your own fields from the search index for sorting. <p>When specifying the search criteria, you must specify whether the sorting should be in ascending (<code>ASC</code>) or descending (<code>DESC</code>) order.</p> <p>The sorting criteria are specified as a list in the following form:</p> <pre><code>sort: [ { name: ASC }, { date: DESC }, ... ]\n</code></pre> <p>Here is an example of a search criteria:</p> <p>Examples:</p> <pre><code>query {\n  search(input: { text: \"chocolate\", sort: [{ name: ASC }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n    }\n  }\n}\n</code></pre> <p>Sort by distance to the reference point:</p> <pre><code>query {\n  search(\n    input: {\n      text: \"chocolate\"\n      sort: [\n        { spatialDist: ASC, spatialPoint: { lng: 7.6286691, lat: 51.9651620 } }\n      ]\n    }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n    }\n  }\n}\n</code></pre> <p>When specifying a <code>custom</code> sort criteria, the name of the field to be used for sorting must also be specified. This field must be present in the index.</p> <pre><code>query {\n  search(\n    input: {\n      text: \"chocolate\"\n      sort: [{ custom: { field: \"myfield\", direction: ASC } }]\n    }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n    }\n  }\n}\n</code></pre> <p>Warning</p> <p>If the schema is changed, the specified sort field for this sorting may no longer work.</p>"},{"location":"develop/graphql/search/#spellcheck","title":"Spellcheck","text":"<p>The Spellcheck feature can be used to correct spelling mistakes in the search query. This is particularly useful if the search query returns no or only a few hits. The corrected search query can then be executed again.</p> <p>The input parameter <code>spellcheck:true</code> activates the spell check. Correction suggestions and a corrected search query are then returned in the result.</p> <pre><code>query {\n  search(input: { text: \"chocate cofee\", spellcheck: true }) {\n    results {\n      id\n    }\n    spellcheck {\n      suggestions {\n        original {\n          word\n          frequency\n        }\n        suggestion {\n          word\n          frequency\n        }\n      }\n      collation\n    }\n  }\n}\n</code></pre> <p>The result could then look like this:</p> <pre><code>{\n  \"data\": {\n    \"search\": {\n      \"total\": 0,\n      \"spellcheck\": {\n        \"suggestions\": [\n          {\n            \"original\": {\n              \"word\": \"chocate\",\n              \"frequency\": 0\n            },\n            \"suggestion\": {\n              \"word\": \"choclate\",\n              \"frequency\": 20\n            }\n          },\n          {\n            \"original\": {\n              \"word\": \"cofee\",\n              \"frequency\": 0\n            },\n            \"suggestion\": {\n              \"word\": \"coffee\",\n              \"frequency\": 10\n            }\n          }\n        ],\n        \"collation\": \"choclate coffee\"\n      }\n    }\n  }\n}\n</code></pre> <p>The corrected words and the frequency of use in the index are returned under <code>suggestions</code>. <code>collation</code> contains the corrected search query.</p>"},{"location":"develop/graphql/search/#archive-search","title":"Archive search","text":"<p>The indexed resources can be marked as \"archived\". This flag ensures that these resources are not normally included in the search. This can be used for news, for example, to include only the latest news in the general search. For a special search, such as a news archive search, the <code>archive</code> flag can be used to also find archived resources.</p> <pre><code>query {\n  search(\n    input: {\n      text: \"chocolate\"\n      filter: [{ objectTypes: [\"news\"] }]\n      archive: true\n    }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/#date-ranges","title":"Date ranges","text":"<p>Date ranges can be used in the search to limit the search to a specific time period. Date range filters are used for this purpose.</p> <p>Facets are another area of application for data ranges. These can be used to determine how many hits are contained in a specific time period or how the hits are distributed over the different days, for example. Date range facets are used for this purpose.</p> <p>A date must always be specified for the UTC time zone and in the format ISO-8601 (e.g.<code>2024-05-22T10:13:00Z</code>).</p> <p>Date ranges can be defined over an absolute period or relatively based on a specific date.</p>"},{"location":"develop/graphql/search/#absolute-date-range","title":"Absolute date range","text":"<p>An absolute period is defined by two parameter:</p> <ul> <li>the start date (<code>from</code>)</li> <li>the end date (<code>to</code>)</li> </ul> <p>If the start or end date is not specified, the current date is used.</p> <p>Example of an absolute date range</p> <pre><code>{\n  absoluteDateRange: {\n    from: \"2024-05-21T22:00:00Z\",\n    to: \"2024-05-22T21:59:59Z\"\n  }\n}\n</code></pre> <p>At least the <code>from</code> or <code>to</code> date must be specified. If <code>from</code> is not specified, there is no lower limit. If <code>to</code> is not specified, there is no upper limit.</p> <p>Note</p> <p>A special case is the use of the absolute date range for facets. Here, a defined period must always be specified for which the facets are to be determined. <code>from</code> and <code>to</code> are mandatory here.</p>"},{"location":"develop/graphql/search/#relative-date-range","title":"Relative date range","text":"<p>A relative date range is specified using two intervals that are relative to a specific date:</p> <ul> <li>the <code>from</code> interval defines the lower boundary relative to a base date</li> <li>the <code>to</code> interval defines the upper boundary relative to a base date</li> </ul> <p>The interval must be specified in the format ISO-8601 Durations. Additionally, a leading minus sign is also allowed to define whether the interval is directed toward the past or the future (e.g. <code>-P1D</code> for one day in the past, <code>P1M</code> for one month in the future etc.).</p> <p>Note</p> <p>As of <code>atoolo/graphql-search-bundle 1.9.0</code>, the former fields <code>before</code> and <code>after</code> are deprecated because they are implicitly directed toward the past/future and do not allow for a direction to be set by the user.</p> <p>Optionally, a <code>base</code> can also be specified. This date is used as the basis for calculating the relative date. If no <code>base</code> is specified, the current date is used.</p> <p>Relative date ranges can only be exact to the day. Specifying a time such as \"P1DT1H\" will result in an error.</p> <p>The period defined via the <code>from</code> and <code>to</code> intervals is to the day. The period is therefore always rounded. See Round Date.</p> <p>The following examples illustrate the relative date ranges:</p> <p>Only everything from yesterday:</p> <pre><code>{\n  relativeDateRange: {\n    from: \"-P1D\"\n    roundStart : START_OF_DAY\n    roundEnd: END_OF_PREVIOUS_DAY # default end-date is 'now'\n  }\n}\n</code></pre> <p>Yesterday, today and tomorrow</p> <pre><code>{\n  relativeDateRange: {\n    from: \"-P1D\"\n    to: \"P1D\"\n  }\n}\n</code></pre> <p>Everything from the last 7 days and today:</p> <pre><code>{\n  relativeDateRange: {\n    from: \"-P7D\"\n    roundStart : START_OF_DAY\n    roundEnd: END_OF_DAY # default end-date is 'now'\n  }\n}\n</code></pre> <p>Everything this month, past and future</p> <pre><code>{\n  relativeDateRange: {\n    roundStart : START_OF_MONTH\n    roundEnd: END_OF_MONTH # default end-date is 'now'\n  }\n}\n</code></pre> <p>All in the last month:</p> <pre><code>{\n  relativeDateRange: {\n    from: \"-P1M\"\n    roundStart : START_OF_MONTH\n    roundEnd: END_OF_PREVIOUS_MONTH # default end-date is 'now'\n  }\n}\n</code></pre> <p>All in the seven days before Christmas Eve 2024 (Timezone Europe/Berlin):</p> <pre><code>{\n  relativeDateRange: {\n    base: \"2024-12-23T23:00:00Z\"\n    from: \"-P7D\"\n    roundEnd: END_OF_PREVIOUS_DAY\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/#round-date","title":"Round date","text":"<p>The smallest unit in which ranges can be defined is a day. Each date is therefore rounded (for current Timezone). How the date is to be rounded can be defined using the <code>roundStart</code> and <code>roundEnd</code> parameters. The possible values are:</p> Name Description <code>START_OF_DAY</code> The start of the day. The time is set to <code>00:00:00</code>. <code>START_OF_PREVIOUS_DAY</code> The start of the previous day. The time is set to <code>00:00:00</code> of the previous day. <code>END_OF_DAY</code> The end of the day. The time is set to <code>23:59:59</code>. <code>END_OF_PREVIOUS_DAY</code> The end of the previous day. The time is set to <code>23:59:59</code> of the previous day. <code>START_OF_MONTH</code> The start of the month. The date is set to the first day of the month the time is set to <code>00:00:00</code>. <code>START_OF_PREVIOUS_MONTH</code> The start of the previous month. The date is set to the first day of the previous month and the time is set to <code>00:00:00</code>. <code>END_OF_MONTH</code> The end of the month. The date is set to the last day of the month and the time is set to <code>23:59:59</code>. <code>END_OF_PREVIOUS_MONTH</code> The end of the previous month. The date is set to the last day of the previous month and the time is set to <code>23:59:59</code>. <code>START_OF_YEAR</code> The start of the year. The date is set to the first day of the year and the time is set to <code>23:59:59</code>. <code>START_OF_PREVIOUS_YEAR</code> The start of the previous year. The date is set to the first day of the previous year and the time is set to <code>23:59:59</code>. <code>END_OF_YEAR</code> The end of the year. The date is set to the last day of the year and the time is set to <code>23:59:59</code>. <code>END_OF_PREVIOUS_YEAR</code> The end of the previous year. The date is set to the last day of the previous year and the time is set to <code>23:59:59</code>. <p>If no rounding parameter is specified, <code>START_OF_DAY</code> is used for <code>roundStart</code> and <code>END_OF_DAY</code> for <code>roundEnd</code>.</p> <p>See also Timezone</p>"},{"location":"develop/graphql/search/#timezone","title":"Timezone","text":"<p>By default, all mathematical date expressions are evaluated relative to the Server time zone, but the timeZone parameter can be specified to override this behavior by performing all date-related additions and rounding relative to the specified time zone.</p> <p>The time zone is specified according to the standard IANA Time Zone Database is used. Examples are <code>Europe/Berlin</code>, <code>America/New_York</code> or <code>Asia/Tokyo</code>.</p> <p>This is relevant for Date ranges.</p> <p>Example:</p> <pre><code>query {\n  search(input: { timeZone: \"Europe/Berlin\", ... }) {\n    ...\n  }\n}\n</code></pre> <p>Note</p> <p>The time zone only affects the range of dates. The date specifications transferred in the GraphQL query and the date specifications returned in the results remain UTC.</p>"},{"location":"develop/graphql/search/#spatial-search","title":"Spatial search","text":"<p>A Spatial Search searches data based on spatial or geographical relationships rather than traditional text or number-based criteria. It takes into account coordinates and distances to find relevant results in a specific area or radius. This technique is often used in applications such as maps to filter and sort information according to its position in space.</p> <p>To enable searches based on geodata, the corresponding fields must be available in the index. This requires the individual resources to be provided with geo coordinates via the CMS.</p> <p>The GraphQL search supports the following features:</p> <ul> <li>Specification of the distance (in km) per hit to the reference point. See also Geo data</li> <li>Sorting of hits by distance to the reference point</li> <li>Filtering of hits by distance to the reference point using the Spatial orbital filter</li> <li>Filtering of hits that are located within a defined rectangle using the Spatial arbitrary rectangle filter</li> <li>Faceting of hits by distance to the reference point using the Spatial distance range facet</li> </ul> <p>Example:</p> <p>Query:</p> <pre><code>query search($geoPoint: InputGeoPoint!) {\n  search(\n    input: {\n      distanceReferencePoint: $geoPoint\n      sort: { spatialDist: ASC, spatialPoint: $geoPoint }\n      filter: [\n        {\n          key: \"geofilter\"\n          spatialOrbital: {\n            distance: 20.0\n            centerPoint: $geoPoint\n            mode: BOUNDING_BOX\n          }\n        }\n      ]\n      facets: [\n        {\n          key: \"geo\"\n          excludeFilter: [\"geofilter\"]\n          spatialDistanceRange: { point: $geoPoint, from: 0, to: 10 }\n        }\n      ]\n    }\n  ) {\n    total\n    results {\n      objectType\n      geo {\n        distance\n        primary {\n          lat\n          lng\n        }\n      }\n    }\n    facetGroups {\n      key\n      facets {\n        key\n        hits\n      }\n    }\n    queryTime\n  }\n}\n</code></pre> <p>Variable:</p> <pre><code>{\n  \"geoPoint\": {\n    \"lng\": 7.6286691,\n    \"lat\": 51.965162\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/#boosting","title":"Boosting","text":"<p>Boosting makes it possible to increase the relevance of certain documents in the search results. This can be achieved by customizing query parameters, such as adding boosting factors to specific fields or applying custom functions. In this way, search results can be specifically influenced to place more relevant results at the top.</p> <p>The following parameters can be used to influence the result:</p> Name Description <code>queryFields</code> This parameter specifies the fields to be searched and their relative importance. It is a list of fields, optionally with boost factors that indicate how heavily each field should be weighted when matching search terms. For example, qf=title^2.0 description means that the title field is twice as important as the description field. <code>phraseFields</code> This parameter increases the importance of whole phrases (word sequences) in the specified fields. It is used to increase the relevance of documents in which the search terms appear as phrases in these fields. For example, pf=title^1.5 content increases the relevance of documents in which the search terms appear as a phrase in the title field more than in the content field. <code>boostQueries</code> This parameter allows additional query clauses that increase the relevance score of documents that match these clauses. These clauses do not affect whether a document matches the main query, but increase the score of documents that match them. For example, <code>contenttype:(text/html*)^10</code> would increase the relevance score of HTML documentserh\u00f6hen. <code>boostFunctions</code> This parameter applies function-based boosts to the relevance score. These are mathematical functions that adjust the score based on field values or other criteria. For example, <code>if(termfreq(sp_objecttype,'news'),scale(sp_date,0,12),scale(sp_date,10,11)</code> could be used to score older news articles less highly <code>tie</code> (Tie-Breaker-Multiplikator) This parameter combine the best match points from multiple fields. The tie parameter adjusts how much lower scores affect the overall score. A higher tie value means that the lower scores have more influence on the final score. For example, tie=0.1 could be used to give the secondary fields some influence in the scoring process, preventing only the best matches from dominating. <p>Setting the boosting parameters requires in-depth knowledge of how the search index works and its schema. If no boosting is specified, the default values of Sitepark are used, which have already proven themselves in many projects.</p> <p>Example:</p> <pre><code>query {\n  search(input: {\n     ...\n     boosting: {\n      queryFields: [\n        \"sp_title^1.4\",\n        \"keywords^1.2\",\n        \"description^1.0\",\n        \"title^1.0\",\n        \"url^0.9\",\n        \"content^0.8\"\n      ]\n      phraseFields: [\n        \"sp_title^1.5\",\n        \"description^1\",\n        \"content^0.8\"\n      ]\n      boostQueries: [\n        \"sp_objecttype:searchTip^100\",\n        \"contenttype:(text/html*)^10\"\n      ]\n      boostFunctions: [\n        \"if(termfreq(sp_objecttype,'news'),scale(sp_date,0,12),scale(sp_date,10,11))\"\n      ]\n      tie: 0.1\n    }\n  }) {\n    ...\n  }\n}\n</code></pre> <p>Warning</p> <p>The boosting parameters are matched to the fields of the index. If changes are made to the index schema, the boosting parameters must be adjusted accordingly.</p>"},{"location":"develop/graphql/search/#search-results","title":"Search results","text":"<p>The search results can be output using the <code>SearchResult</code> type. In this case, <code>results</code> returns a list of <code>Resource</code> objects. This can be used to query further data. See also:</p> <ul> <li>Resolve resource</li> <li>Resolve navigation hierarchy</li> <li>Resolve teaser</li> </ul>"},{"location":"develop/graphql/search/#advanced-search","title":"Advanced search","text":"<p>Additional input parameters are available for extended search functionalities, which can be used with the search. These are described on the following pages.</p> <ul> <li>Filtered search</li> <li>Faceted search</li> <li>Resolve teaser</li> <li>Resolve navigation hierarchy</li> </ul>"},{"location":"develop/graphql/search/#explain","title":"Explain","text":"<p>The <code>explain</code> parameter can be used to output detailed information about the search. This can be used to analyze the search and to identify possible sources of error.</p> <p>It helps to understand why certain hits are returned and why they are returned in the corresponding order.</p> <pre><code>query {\n  search(input: {\n    text: \"section\"\n    explain: true\n  }) {\n    results {\n      name\n      explain {\n        score\n        type\n        description\n        details {\n          score\n          type\n          description\n          details {\n            ...\n          }\n        }\n      }\n  }\n}\n</code></pre> <p>Depending on how precise the analysis is to be, a corresponding number of levels of <code>details</code> can be returned.</p> <p>A result can look like this, for example:</p> <pre><code>{\n  \"data\": {\n    \"search\": {\n      \"total\": 26,\n      \"results\": [\n        {\n          \"name\": \"Section with Tabs\",\n          \"explain\": {\n            \"score\": 24.873642,\n            \"type\": \"sum\",\n            \"details\": [\n              {\n                \"score\": 3.9798312,\n                \"type\": \"max\",\n                \"description\": \"max plus 0.1 times others of:\",\n                \"details\": [\n                  {\n                    \"score\": 1.4506807,\n                    \"type\": \"weight\",\n                    \"field\": \"sp_title\",\n                    \"details\": [\n                      {\n                        \"score\": 1.4506807,\n                        \"type\": \"score\",\n                        \"description\": \"score(freq=1.0), computed as boost * idf * tf from:\",\n                        \"details\": [\n                          {\n                            \"description\": \"boost\"\n                          },\n                          {\n                            \"description\": \"idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:\"\n                          },\n                          {\n                            \"description\": \"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\"\n                          }\n                        ]\n                      }\n                    ]\n                  },\n                  {\n                    \"score\": 1.0478733,\n                    \"type\": \"weight\",\n                    \"field\": \"title\",\n                    \"details\": [\n                      {\n                        \"score\": 1.0478733,\n                        \"type\": \"score\",\n                        \"description\": \"score(freq=1.0), computed as boost * idf * tf from:\",\n                        \"details\": [\n                          {\n                            \"description\": \"idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:\"\n                          },\n                          {\n                            \"description\": \"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\"\n                          }\n                        ]\n                      }\n                    ]\n                  },\n                  {\n                    \"score\": 3.7299757,\n                    \"type\": \"weight\",\n                    \"field\": \"content\",\n                    \"details\": [\n                      {\n                        \"score\": 3.7299757,\n                        \"type\": \"score\",\n                        \"description\": \"score(freq=3.0), computed as boost * idf * tf from:\",\n                        \"details\": [\n                          {\n                            \"description\": \"boost\"\n                          },\n                          {\n                            \"description\": \"idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:\"\n                          },\n                          {\n                            \"description\": \"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\"\n                          }\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                \"score\": 10,\n                \"type\": \"boosting\",\n                \"description\": \"contenttype:text/html*^10.0\",\n                \"details\": []\n              },\n              {\n                \"score\": 10.893811,\n                \"type\": \"function\",\n                \"description\": \"FunctionQuery(if(termfreq(sp_objecttype,news),scale(date(sp_date),0.0,12.0),scale(date(sp_date),10.0,11.0))), product of:\",\n                \"details\": [\n                  {\n                    \"score\": 10.893811,\n                    \"type\": \"boosting\",\n                    \"field\": null,\n                    \"details\": []\n                  },\n                  {\n                    \"score\": 1,\n                    \"type\": \"boost\",\n                    \"field\": null,\n                    \"details\": []\n                  }\n                ]\n              }\n            ]\n          }\n        },\n        ...\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/faceted-search/","title":"Faceted search","text":"<p>A faceted search, also known as faceted filtering, is a search technique that can be applied to various use cases to allow users to easily refine and navigate search results. It works by dividing search results into different categories or facets that are representative features or attributes of the information found.</p> <p>The facet type is required to define a facet. This can be, for example, the object type and the possible values of the facet type whose results are to be returned.</p> <p>This can look like this, for example:</p> <pre><code>facets: [\n  {\n    key: \"articletypes\",\n    objectTypes: [\"content\", \"news\"]\n  }\n]\n</code></pre> <p>The specification of a <code>key</code> is necessary so that the facet can be identified in the result, as it is possible to specify several facets.</p> <p>A facet is defined here via the object type. The possible values <code>content</code> and <code>news</code> indicate that the number of possible hits is returned for these two values.</p> <p>With <code>facetGroups</code> in <code>SearchResult</code> the results of the facets can be output.</p> <pre><code>facetGroups {\n  key\n  facets {\n    key\n    hits\n  }\n}\n</code></pre> <p>A result could look like this, for example:</p> <pre><code>{\n  \"facetGroups\": [\n    {\n      \"key\": \"articletypes\",\n      \"facets\": [\n        {\n          \"key\": \"content\",\n          \"hits\": 664\n        },\n        {\n          \"key\": \"news\",\n          \"hits\": 1633\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>This indicates that a search filtered by <code>objectTypes:content</code> would return <code>664</code> hits. A search with the filter on <code>objectTypes:news</code> would return <code>1633</code> hits.</p> <p>The facets are determined on the basis of the search. One problem with this is that if, for example, the filter <code>objectTypes:content</code> is used, the search result no longer contains any hits of the type <code>news</code> and therefore the result of the facet for <code>news</code> is <code>0</code>.</p> <p>To solve this problem, you can specify for each facet which filter should not be taken into account so that the result is not distorted.</p> <p>This is done via the <code>excludeFilter</code> parameter. This parameter refers to the <code>key</code> of a filter. This can look like this, for example.</p> <pre><code>search(\n  input: {\n    filter: [{ key: \"articletypefilter\", objectTypes: [\"content\"] }]\n    facets: [\n      {\n        key: \"articletypes\",\n        objectTypes: [\"content\", \"news\"],\n        excludeFilter: [\"articletypefilter\"]\n      }\n    ]\n  }\n)\n</code></pre> <p>Here, <code>excludeFilter: [\"articletypefilter\"]</code> is used to refer to the filter <code>key: \"articletypefilter\"</code>. When determining this facet, the filter <code>articletypefilter</code> is no longer taken into account. This means that the values of the facet can be taken into account correctly, even though the filter is used for the search.</p> <p>A complete GraphQL Query could then look like this:</p> <pre><code>query {\n  search(\n    input: {\n      filter: [{ key: \"articletypefilter\", objectTypes: [\"content\"] }]\n      facets: [\n        {\n          key: \"articletypes\"\n          objectTypes: [\"content\", \"news\"]\n          excludeFilter: [\"articletypefilter\"]\n        }\n      ]\n    }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n    }\n    facetGroups {\n      key\n      facets {\n        key\n        hits\n      }\n    }\n  }\n}\n</code></pre> <p>Any number of facets can be specified. An example could look like this:</p> <pre><code>query {\n  search(\n    input: {\n      filter: [\n        { key: \"articletypefilter\", objectTypes: [\"content\"] }\n        { key: \"sitefilter\", sites: [\"3952\"] }\n      ]\n      facets: [\n        {\n          key: \"articlefacet\"\n          objectTypes: [\"content\", \"news\"]\n          excludeFilter: \"articletypefilter\"\n        }\n        {\n          key: \"sitefacet\"\n          sites: [\"3952\", \"4551\", \"7462\", \"1463\"]\n          excludeFilter: [\"sitefilter\"]\n        }\n      ]\n    }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n    }\n    facetGroups {\n      key\n      facets {\n        key\n        hits\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/faceted-search/#object-type-facet","title":"Object type facet","text":"<p>Object types describe the different types of pages that are used in the website. These can be, for example, news pages, events, normal content pages or any other types that are part of the project.</p> <pre><code>query {\n  search(input: { facets: [{ key: \"mykey\", objectTypes: [\"news\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n    }\n    facetGroups {\n      key\n      facets {\n        key\n        hits\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/faceted-search/#content-section-types-facet","title":"Content section types facet","text":"<p>Content section types are types of sections that are included in a page. These can be text sections, image sections and all others that the project provides for the website. For example, a facet can be defined in which it is possible to determine how many search hits contain a YouTube video.</p> <pre><code>query {\n  search(\n    input: { facets: [{ key: \"mykey\", contentSectionTypes: [\"youtube\"] }] }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n    }\n    facetGroups {\n      key\n      facets {\n        key\n        hits\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/faceted-search/#categories-facet","title":"Categories facet","text":"<p>The CMS can be used to define any number of category trees that can be used to categorise articles. These categories can be facetted via their ID. The hierarchy of the category is also taken into account. This means that if you facet a category that has subcategories, the articles that are linked to the subcategory are also taken into account.</p> <pre><code>query {\n  search(input: { facets: [{ key: \"mykey\", categories: [\"15949\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n    }\n    facetGroups {\n      key\n      facets {\n        key\n        hits\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/faceted-search/#groups-facet","title":"Groups facet","text":"<p>In the CMS, articles are organised in hierarchical groups. For example, all articles in a category are managed in substructures of the category group. The number of hits can be determined using the group facet. The hierarchy of the groups is also taken into account so that all articles in a group are included, even if they are contained in other nested subgroups.</p> <pre><code>query {\n  search(input: { facets: [{ key: \"mykey\", groups: [\"16811\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/faceted-search/#sites-facet","title":"Sites facet","text":"<p>Several websites can be managed within the CMS. These can be several main websites, but also microsites that are subordinate to a main website. The Sites facet can be used to determine the number of hits within a site.</p> <pre><code>query {\n  search(input: { facets: [{ key: \"mykey\", sites: [\"3952\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/faceted-search/#content-types-facet","title":"Content types facet","text":"<p>This can be used to facet the content type, e.g. <code>application/pdf</code> or <code>text/html; charset=UTF-8</code>.</p> <pre><code>query {\n  search(\n    input: {\n      facets: [\n        {\n          key: \"mykey\"\n          contentTypes: [\"application/pdf\", \"text/html; charset=UTF-8\"]\n        }\n      ]\n    }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/faceted-search/#sources-facet","title":"Sources facet","text":"<p>This facet can be used to determine the number of hits for a specific source. The source indicates which indexer was used to transfer the data to the index. For resources that are editorially maintained by the CMS, the source is <code>internal</code>.</p> <pre><code>query {\n  search(input: { facets: [{ key: \"mykey\", sources: [\"internal\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/faceted-search/#date-range-facet","title":"Date range facet","text":"<p>An editorial date can be maintained for articles. This date can be used for the search to filter articles. If there is no editorial date, the creation date of the article is used. Depending on the article type, a list of dates can also be maintained. This is the case for events, for example. Repeat dates are also possible here. All dates are then taken into account in the date range facet.</p> <p>Facets can also be defined using a time range. Two entries are required for this:</p> <p>There are two ways in which a date range facet can be used.</p> <ol> <li>to determine the number of all results within a certain period of time.</li> <li>to determine the number of results divided into time periods within a certain time period, e.g. the number of results within a month divided into days.</li> </ol> <p>To determine the number of all results within a certain period, the period must be specified via Date ranges.</p> <p>If the result is to be divided into time periods, a <code>gap</code> must also be specified. This specifies the date periods in which the results are to be subdivided. <code>gap</code> must be specified in ISO-8601 Duration format (e.g.<code>P1M</code>).</p>"},{"location":"develop/graphql/search/faceted-search/#examples","title":"Examples","text":""},{"location":"develop/graphql/search/faceted-search/#absolute-date-range-facet","title":"Absolute date range facet","text":"<p>Example of absolute date range facets for the year <code>2022</code> (Timezone Europe/Berlin) divided into months:</p> <pre><code>query {\n  search(\n    input: {\n      facets: [\n        {\n          key: \"month\"\n          absoluteDateRange: {\n            from: \"2021-12-31T23:00:00Z\"\n            to: \"2022-12-30T23:00:00Z\"\n            gap: \"P1M\"\n          }\n        }\n      ]\n    }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n    facetGroups {\n      key\n      facets {\n        key\n        hits\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/faceted-search/#absolute-relative-range-facet","title":"Absolute relative range facet","text":"<p>Example of relative date range facets for the last, current and next year divided into months:</p> <pre><code>query {\n  search(\n    input: {\n      facets: [\n        {\n          key: \"month\"\n          relativeDateRange: {\n            from: \"-P1Y\"\n            to: \"P1Y\"\n            gap: \"P1M\"\n            roundStart: START_OF_YEAR\n            roundEnd: END_OF_YEAR\n          }\n        }\n      ]\n    }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n    facetGroups {\n      key\n      facets {\n        key\n        hits\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/faceted-search/#facets-for-date-range-selection","title":"Facets for Date range selection","text":"<p>One use case is the selection of a date range according to predefined ranges. E.g.</p> <ul> <li>Today</li> <li>Next 7 days</li> <li>This month</li> <li>This and nex month</li> </ul> <p>The facet search can be used to determine how many hits are contained in the date periods.</p> <pre><code>query relativeDateRangeFacetsearch($filter: RelativeDateRangeInputFilter) {\n  search(\n    input: {\n      filter: [{ key: \"dateFilter\", relativeDateRange: $filter }]\n      facets: [\n        {\n          key: \"today\"\n          relativeDateRange: { to: \"P1D\", roundEnd: END_OF_PREVIOUS_DAY }\n          excludeFilter: [\"dateFilter\"]\n        }\n        {\n          key: \"next7days\"\n          relativeDateRange: { to: \"P7D\", roundEnd: END_OF_PREVIOUS_DAY }\n          excludeFilter: [\"dateFilter\"]\n        }\n        {\n          key: \"thisMonth\"\n          relativeDateRange: { to: \"P1M\", roundEnd: END_OF_PREVIOUS_MONTH }\n          excludeFilter: [\"dateFilter\"]\n        }\n        {\n          key: \"thisAndNextMonth\"\n          relativeDateRange: { to: \"P1M\", roundEnd: END_OF_MONTH }\n          excludeFilter: [\"dateFilter\"]\n        }\n      ]\n    }\n  ) {\n    total\n    results {\n      objectType\n      name\n      id\n    }\n    facetGroups {\n      key\n      facets {\n        key\n        hits\n      }\n    }\n    queryTime\n  }\n}\n</code></pre> <p>Depending on which filter is selected, the corresponding filter value must be transferred. This is transferred here as the variable <code>filter</code>:</p> <p>If \"Today\" is selected:</p> <pre><code>{\n  \"filter\": {\n    \"to\": \"P1D\",\n    \"roundEnd\": \"END_OF_PREVIOUS_DAY\"\n  }\n}\n</code></pre> <p>If \"Next 7 days\" is selected:</p> <pre><code>{\n  \"filter\": {\n    \"to\": \"P7D\",\n    \"roundEnd\": \"END_OF_PREVIOUS_DAY\"\n  }\n}\n</code></pre> <p>If \"This month\" is selected:</p> <pre><code>{\n  \"filter\": {\n    \"to\": \"P1M\",\n    \"roundEnd\": \"END_OF_PREVIOUS_MONTH\"\n  }\n}\n</code></pre> <p>If \"This and nex month\" is selected:</p> <pre><code>{\n  \"filter\": {\n    \"to\": \"P1M\",\n    \"roundEnd\": \"END_OF_MONTH\"\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/faceted-search/#facets-for-day-by-day-paging","title":"Facets for Day-by-day Paging","text":"<p>One use case for event searches is that day-by-day paging is used when events are to be searched for within a certain period of time.</p> <p>In this case, only the events for one day are displayed and the user can then query the hits on a day-by-day basis.</p> <pre><code>query relativeDateRangeFacetsearch($currentPageDate: DateTime) {\n  search(\n    input: {\n      filter: [\n        {\n          key: \"currentPageDateFilter\"\n          relativeDateRange: {\n            base: $currentPageDate\n            to: \"P1D\"\n            roundEnd: END_OF_PREVIOUS_DAY\n          }\n        }\n      ]\n      facets: [\n        {\n          key: \"pageDates\"\n          absoluteDateRange: {\n            from: \"2024-05-01T00:00:00+02:00\"\n            to: \"2024-05-20T00:00:00+02:00\"\n            gap: \"P1D\"\n          }\n          excludeFilter: [\"currentPageDateFilter\"]\n        }\n      ]\n    }\n  ) {\n    total\n    results {\n      id\n      objectType\n      teaser {\n        url\n        ... on ArticleTeaser {\n          date\n          kicker\n          headline\n        }\n      }\n      name\n      id\n    }\n    facetGroups {\n      key\n      facets {\n        key\n        hits\n      }\n    }\n    queryTime\n  }\n}\n</code></pre> <p>Variable:</p> <pre><code>{\n  \"currentPageDate\": \"2024-05-03T22:00:00Z\"\n}\n</code></pre>"},{"location":"develop/graphql/search/faceted-search/#spatial-distance-range-facet","title":"Spatial distance range facet","text":"<p>The spatial distance range facet can be used to determine the number of hits within a certain distance from a reference point.</p> <p>Diese Facette ben\u00f6tigt folgtende Parmameter:</p> <code>point</code> <p>The reference point from which the distance is to be determined. This point is specified as a longitude and latitude point.</p> <code>from</code> <p>The minimum distance from the reference point. This is specified in km.</p> <code>to</code> <p>The maximun distance from the reference point. This is specified in km.</p> <pre><code>query {\n  search(\n    input: {\n      facets: [\n        {\n          key: \"mykey\"\n          spatialDistanceRange: {\n            point: { lat: 51.9650398, lng: 7.6260621 }\n            from: 0\n            to: 10\n          }\n        }\n      ]\n    }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n    facetGroups {\n      key\n      facets {\n        key\n        hits\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/faceted-search/#query-facet","title":"Query facet","text":"<p>This facet accepts a query that is passed directly to the search engine. This filter should only be used in absolute exceptions where the fields of the current schema must be specified directly.</p> <p>Warning</p> <p>If the schema is changed, the specified queries for these facet may no longer work.</p> <pre><code>query {\n  search(\n    input: { facets: [{ key: \"mykey\", query: \"sp_objecttype:content\" }] }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/faceted-search/#query-template-facet","title":"Query template facet","text":"<p>Like the \"Query facet\", the \"Query template facet\" also accepts a query that is passed directly to the search engine.</p> <p>The difference is that here a query is defined with placeholders and the variables to be used are specified separately. The use case is when the query is not defined directly by the frontend, but is specified by the PHP backend via an HTML data attribute and the frontend should only use the user input.</p> <p>The query is defined with placeholders in the form <code>{myvar}</code>. The variables are then passed separately via the <code>variables</code> attribute.</p> <p>Warning</p> <p>If the schema is changed, the specified queries for these facet may no longer work.</p> <pre><code>query {\n  search(\n    input: {\n      facets: [\n        {\n          key: \"mykey\"\n          query: \"sp_objecttype:{myvar}\"\n          variables: { myvar: \"content\" }\n        }\n      ]\n    }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/","title":"Filtered search","text":"<p>Filters can be used to give the user of the website the possibility to narrow down his search by certain criteria that are offered to him. Filters can also be used to limit the search in general if the results can only be returned from a certain area. The IES recognizes various criteria that can be used for this purpose.</p> <p>The filters are specified via the input attribute <code>filter</code> in the form</p> <pre><code>filter: [\n   { filtertype: [ filtervalue, ... ] }\n}\n</code></pre> <p>specified. Any number of filters can be defined. The individual filters are <code>AND</code>-linked so that they continue to narrow down the search results.</p> <p>A filter can also be used multiple times to create an AND filter with two identical filters.</p> <pre><code>filter: [\n  { categories:[\"4749\"] },\n  { categories:[\"4767\"] }\n]\n</code></pre> <p>For almost all filters, a list of values can be specified according to which this filter should be filtered. These filter values are applied as <code>OR</code> filters. For an <code>OR</code> filter, the values can be summarized in a filter.</p> <pre><code>filter: [\n  { categories:[\"4749\", \"4767\"] }\n]\n</code></pre> <p>The example below filters for news articles that are linked to a specific category.</p> <pre><code>filter: [\n   { objectType: [\"news\"] },\n   { categories: [\"15949\"] }\n}\n</code></pre> <p>In the example below, the filter is applied to news articles that are linked to at least one of the two categories.</p> <pre><code>filter: [\n   { objectType: [\"news\"] },\n   { categories: [\"15949\", \"14961\"] }\n}\n</code></pre> <p>For more complex filter logic see Complex filter</p>"},{"location":"develop/graphql/search/filtered-search/#object-type-filter","title":"Object type filter","text":"<p>Object types describe the different types of pages that are used in the website. These can be, for example, news pages, events, normal content pages or any other types that are part of the project.</p> <pre><code>query {\n  search(input: { filter: [{ objectTypes: [\"news\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#content-section-types-filter","title":"Content section types filter","text":"<p>Content section types are types of sections that are included in a page. These can be text sections, image sections and all others that the project provides for the website. For example, a search can be defined in which all pages containing a YouTube video can be found.</p> <pre><code>query {\n  search(input: { filter: [{ contentSectionTypes: [\"youtube\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#teaser-property-filter","title":"Teaser property filter","text":"<p>Search results are often displayed as teasers. For certain teaser lists, it may be necessary for certain teaser properties to be present. The teaser property filter can be used to find teasers that have certain properties.</p> <p>One or more properties can be specified. These are applied as <code>AND</code> filters.</p> <p>The following properties can be filtered</p> Property Value Description <code>image</code> <code>true</code>, <code>false</code> The teaser must have an image, or may not have an image <code>imageCopyright</code> <code>true</code>, <code>false</code> The teaser image must have a copyright or must not have a copyright <code>headline</code> <code>true</code>, <code>false</code> The teaser must have a headline, or may not have a headline <code>text</code> <code>true</code>, <code>false</code> The teaser must have a teaser text, or may not have a teaser text <pre><code>query {\n  search(input: { filter: [{ teaserProperty: { image: true } }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#categories-filter","title":"Categories filter","text":"<p>The CMS can be used to define any number of category trees that can be used to categorize articles. These categories can be filtered using their ID. The hierarchy of the category is also taken into account. This means that if you filter by a category that has subcategories, the articles that are linked to the subcategory are also found.</p> <pre><code>query {\n  search(input: { filter: [{ categories: [\"15949\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#groups-filter","title":"Groups filter","text":"<p>In the CMS, articles are organized in hierarchical groups. For example, all articles in a rubric are managed in substructures of the rubric group. The groups filter can be used to restrict the search to groups. The hierarchy of the groups is also taken into account so that all articles in a group are found, even if they are contained in further nested subgroups.</p> <pre><code>query {\n  search(input: { filter: [{ groups: [\"16811\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#sites-filter","title":"Sites filter","text":"<p>Several websites can be managed within the . These can be several main websites, but also microsites that are subordinate to a main website. The Sites filter can be used to restrict the search to a single site. For example, you can define a search that only returns hits from a microsite. Without this filter, a search for the main website can be realized, for example, in which the pages of the microsites are also found.</p> <pre><code>query {\n  search(input: { filter: [{ sites: [\"3952\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#ids-filter","title":"Ids filter","text":"<p>This filter can be used to search for a list of resources with specific IDs.</p> <pre><code>query {\n  search(input: { filter: [{ ids: [\"1212\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#content-types-filter","title":"Content types filter","text":"<p>This filter can be used to search for a list of resources with specific Content-Type like <code>application/pdf</code> or <code>text/html*</code>. For the content type <code>text/html</code>, the asterisk <code>*</code> should also be appended, as the content type <code>text/html</code> can also contain other parameters such as the charset (<code>text/html; charset=UTF-8</code>).</p> <pre><code>query {\n  search(input: { filter: [{ contentTypes: [\"text/html*\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#source-filter","title":"Source filter","text":"<p>This filter can be used to search for a list of resources with specific sources. Source is the ID of the indexer via which the resources were transferred to the index. For editorial data, the CMS, the source is always <code>internal</code>.</p> <pre><code>query {\n  search(input: { filter: [{ sources: [\"internal\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#date-range-filter","title":"Date range filter","text":"<p>An editorial date can be maintained for articles. This date can be used for the search to filter articles. If there is no editorial date, the creation date of the article is used. Depending on the article type, a list of dates can also be maintained. This is the case for events, for example. Repeat dates are also possible here. All dates are then taken into account in the date range filter.</p> <p>Date range filters can be defined as absolute date ranges or as relative date ranges. See Date Ranges for a detailed description of how these can be defined.</p> <p>Example of a date range filter with absolute date values:</p> <pre><code>query {\n  search(\n    input: {\n      filter: [\n        {\n          absoluteDateRange: {\n            from: \"2024-05-21T22:00:00Z\"\n            to: \"2024-05-22T21:59:59Z\"\n          }\n        }\n      ]\n    }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre> <p>Example of a date range filter with relative date values based on the current date:</p> <pre><code>query {\n  search(\n    input: { filter: [{ relativeDateRange: { from: \"-P1D\", to: \"P1M\" } }] }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#geo-located-filter","title":"Geo located Filter","text":"<p>If the search results are to be displayed on a map, it can be useful to only receive results that also have a geolocation. With the <code>geoLocatedFilter</code>, only those results can be returned that have a geolocation.</p> <pre><code>query {\n  search(input: { filter: [{ geoLocated: true }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n      geo {\n        primary {\n          lat\n          lng\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#spatial-orbital-filter","title":"Spatial orbital Filter","text":"<p>The spatial orbital filter can be used to search for resources that are located within a certain area. The filter is defined by a center point and a radius.</p> <p>The spatial orbital filter expects the following parameters:</p> <code>distance</code> <p>The radius of the circle in kilometers.</p> <code>centerPoint</code> <p>The center point of the circle. The point is defined by the latitude and longitude.</p> <code>mode</code> <p>The mode of the filter. The mode can be <code>GREAT_CIRCLE_DISTANCE</code> or <code>BOUNDING_BOX</code>.</p>"},{"location":"develop/graphql/search/filtered-search/#great-circle-distance","title":"Great circle distance","text":"<p>With the Great circle distance, you can retrieve results based on the spatial distance from a specific point. It can also be seen as creating a circular filter. This filter returns all results within a circle with the specified radius around the starting point.</p> <p></p> <pre><code>query {\n  search(\n    input: {\n      filter: [\n        {\n          spatialOrbital: {\n            distance: 20.0\n            centerPoint: { lat: lng: 7.6286691, lat: 51.9651620 }\n            mode: GREAT_CIRCLE_DISTANCE\n          }\n        }\n      ]\n    }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#bounding-box","title":"Bounding box","text":"<p>The \"Bounding box\" filter is very similar to the \"Great circle distance\" filter, except that it uses the bounding box of the calculated circle. See the blue frame in the diagram below.</p> <p>The rectangular shape is faster to calculate and is therefore sometimes used as an alternative to \"Great circle distance\" when it is acceptable to return points outside the radius.</p> <p></p> <pre><code>query {\n  search(\n    input: {\n      filter: [\n        {\n          spatialOrbital: {\n            distance: 2.0\n            centerPoint: { lng: 7.6286691, lat: 51.9651620 }\n            mode: BOUNDING_BOX\n          }\n        }\n      ]\n    }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#spatial-arbitrary-rectangle-filter","title":"Spatial Arbitrary rectangle Filter","text":"<p>Sometimes the spatial search must find everything in a rectangular area, e.g. the area covered by a map that the user is currently looking at. In this case, Spatial orbital filter is not sufficient.</p> <p>In this case, the Arbitrary rectangle filter can be used to specify the lower left corner as the start of the range and the upper right corner as the end of the range.</p> <code>lowerLeftCorner</code> <p>The lower left corner of the rectangle. The point is defined by the latitude and longitude.</p> <code>upperRightCorner</code> <p>The upper right corner of the rectangle. The point is defined by the latitude and longitude.</p> <p></p> <pre><code>query {\n  search(\n    input: {\n      filter: [\n        {\n          spatialArbitraryRectangle: {\n            lowerLeftCorner: { lat: 51.9635354, lng: 7.6217852 }\n            upperRightCorner: { lat: 51.9711239, lng: 7.6407538 }\n          }\n        }\n      ]\n    }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      name\n      location\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#complex-filter","title":"Complex filter","text":"<p>Complex filter queries can be constructed by combining one or more queries using <code>and</code>, <code>or</code> or <code>not</code> queries.</p> <p>An <code>and</code> or <code>or</code> query expects a list of filters.</p>"},{"location":"develop/graphql/search/filtered-search/#and","title":"And","text":"<pre><code>filter: [{ and : [\n  { objectTypes: [\"news\"] },\n  { sites: [\"3952\"] }\n]}]\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#or","title":"Or","text":"<pre><code>filter: [{ or : [\n  { objectTypes: [\"news\"] },\n  { sites: [\"3952\"] }\n]}]\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#not","title":"Not","text":"<p><code>not</code> expects a filter definition</p> <pre><code>filter: [{ not : {\n  objectTypes: [\"news\"]\n}}]\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#combined","title":"Combined","text":"<p>These can be combined as required:</p> <pre><code>filter: [{ and : [\n  { objectTypes: [\"news\"] },\n  {\n    or : [\n      { groups: [\"16811\"] },\n      { groups: [\"16812\"] },\n      { and : [\n          { categories: [\"15949\"] },\n          { not : {\n            categories: [\"15950\"]\n          } }\n      ] }\n    ]\n  },\n  { sites: [\"3952\"] }\n]}]\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#query-filter","title":"Query filter","text":"<p>This filter accepts a query that is passed directly to the search engine. This filter should only be used in absolute exceptions where the fields of the current schema must be specified directly.</p> <p>Warning</p> <p>If the schema is changed, the specified queries for these filters may no longer work.</p> <pre><code>filter: [{\n  query : \"sp_objecttype:content\"\n}]\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#query-template-filter","title":"Query template filter","text":"<p>Like the \"Query filter\", the \"Query template filter\" also accepts a query that is passed directly to the search engine.</p> <p>The difference is that here a query is defined with placeholders and the variables to be used are specified separately. The use case is when the query is not defined directly by the frontend, but is specified by the PHP backend via an HTML data attribute and the frontend should only use the user input.</p> <p>The query is defined with placeholders in the form <code>{myvar}</code>. The variables are then passed separately via the <code>variables</code> attribute.</p> <pre><code>This filter should only be used in absolutely exceptional cases when the fields of the current schema must be specified directly.\n\n!!! warning\n\n    If the schema is changed, the specified queries for these filters may no longer work.\n\n```graphql\nfilter: [{\n  query : \"sp_objecttype:{myvar}\"\n  variables: {\n    myvar: \"content\"\n  }\n}]\n</code></pre>"},{"location":"develop/graphql/search/filtered-search/#filter-key","title":"Filter key","text":"<p>A <code>key</code> can also be specified for filters. This is only necessary if the filter only influences the facet search. The key is then used for the faceted search to identify the filters that must not be taken into account. See Facet search</p> <pre><code>filter: [\n   { key: \"articletypes\", objectType: [\"news\"] }\n}\n</code></pre>"},{"location":"develop/graphql/search/indexing/","title":"Indexing","text":"<p>Indexing, i.e. filling and updating the search index, is triggered internally and is therefore not publicly accessible.</p>"},{"location":"develop/graphql/search/indexing/#reindex-all-documents","title":"Reindex all documents","text":"<p>One use case is to recreate the entire index. The mutation <code>index</code> is used for this.</p> <pre><code>mutation {\n  index {\n    statusLine\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/indexing/#updating-individual-documents","title":"Updating individual documents","text":"<p>If new articles are created or updated in the CMS, they must also be created or updated in the index. This is also done via the mutation <code>indexUpdate</code>. The paths of the resources to be updated are passed via an array.</p> <pre><code>mutation {\n  indexUpdate([\"news/438237.php\", \"events/43212.php\"]) {\n    statusLine\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/indexing/#get-indexing-status","title":"Get Indexing status","text":"<p>While the indexer is indexing the documents, the current status can be queried using the query <code>indexerStatus</code>. For example, to show how many documents have already been indexed.</p> <pre><code>query {\n  indexerStatus {\n    statusLine\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/indexing/#remove-documents","title":"Remove documents","text":"<p>The mutation <code>indexRemove</code> is used to remove documents from the index. The corresponding documents are removed from the index by specifying <code>idList</code>, which is used to specify a list of resource IDs.</p> <pre><code>mutation {\n  indexRemove(idlist: [\"438237\", \"43212\"])\n}\n</code></pre>"},{"location":"develop/graphql/search/indexing/#abort-indexing","title":"Abort indexing","text":"<p>Indexing can be canceled. A check is made after each chunk as to whether the process should be aborted. The mutation <code>indexAbort</code> is used to ensure that indexing is interrupted.</p> <pre><code>mutation {\n  indexAbort\n}\n</code></pre>"},{"location":"develop/graphql/search/more-like-this/","title":"More like this","text":"<p>A \"More-Like-This\" search is a technique in which a source document or item is used as a reference point to find similar documents in the search index. It is based on extracting characteristics from the source object and searching for other objects that have similar characteristics in order to present relevant results to the user.</p> <p>A more-like-this search can be carried out as follows.</p> <pre><code>query {\n  moreLikeThis(input: { id: \"1211\" }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n    }\n  }\n}\n</code></pre> <p>You can also use filters for more-like-this.</p> <p>Just like the search, the more-like-this-search result returns a <code>SearchResult</code> object. See also Search results</p>"},{"location":"develop/graphql/search/resolve-navigation-hierarchy/","title":"Resolve navigation hierarchy","text":"<p>Articles can be linked to each other via a hierarchy of any depth. Navigation is a specific type of hierarchy. The navigation field provides a <code>Hierarchy</code> object that can be used to navigate through the levels.</p> <p>The methods of <code>Hierarchy</code> always return a <code>Resource</code> object or a list of <code>Resource</code> objects which can then be used to navigate further in the hierarchy.</p>"},{"location":"develop/graphql/search/resolve-navigation-hierarchy/#get-the-root","title":"Get the root","text":"<p>The <code>root</code> field is used to obtain the root of the navigation.</p> <pre><code>query {\n  search(input: { filter: [{ groups: [\"1195\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      navigation {\n        root {\n          id\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/resolve-navigation-hierarchy/#get-the-parent","title":"Get the parent","text":"<p>The <code>parent</code> field is used to determine the parent resource in the navigation hierarchy.</p> <pre><code>\n</code></pre> <pre><code>query {\n  search(input: { filter: [{ groups: [\"1195\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      navigation {\n        children {\n          id\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/resolve-navigation-hierarchy/#get-the-path","title":"Get the path","text":"<p>The path describes all higher-level parents up to the root element. The returned list provides the root resource as the first resource, followed by all resources that form the navigation path. The last resource in the list is the resource that should be used to determine the path.</p> <pre><code>query {\n  search(input: { filter: [{ key: \"musterseiten\", groups: [\"1195\"] }] }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      navigation {\n        path {\n          id\n          location\n          navigation {\n            children {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/resolve-resource/","title":"Resolve resource","text":"<p>The resource is the root object of the individual search hits. The necessary data can be queried from there.</p> <p>See also</p> <ul> <li>Resolve navigation hierarchy</li> <li>Resolve teaser</li> </ul> <p>The main data of the resource are:</p> <code>id</code> <p>The unique identifier of the resource.</p> <code>name</code> <p>The name of the resource.</p> <code>location</code> <p>The location of the resource. This is the Path where the resource is stored.</p> <code>objectType</code> <p>The type of the resource.</p> <code>contentSectionTypes</code> <p>A list of the Content Section Types contained in the resource.</p> <code>ticker</code> <p>A ticker is a short text that cat displayed in the search results to provide a brief overview of the content.</p> <code>date</code> <p>The date of the resource. This can have different meanings depending on the object type. For normal articles this is an editorial date, for events the date of the event, for news the date of publication, etc.</p> <code>asset</code> <p>An asset is a media file that can be displayed in the search results. This can be an image, a video, etc.</p> <code>symbolicImage</code> <p>A symbolic image is a small image that can be displayed in the search results, if no asset is available.</p> <code>geo</code> <p>The geographical location of the resource. See also Geo data</p>"},{"location":"develop/graphql/search/resolve-resource/#geo-data","title":"Geo data","text":"<p>The geo data indicates the geographical location of the resource. This data can be used in the search to filter or sort the results according to geographical criteria. The geo data consists of up to three fields</p> <code>primary</code> <p>The primary geographical location of the resource. This is used for the search and is returned as a longitude and latitude point.</p> <code>secondary</code> <p>It is possible to define secondary geo-elements via the CMS. These can be used for display on a map, for example. These are returned as a FeatureCollection in GeoJSON format.</p> <code>distance</code> <p>The distance of the primary geo-position to a reference point. This reference point must be specified in the search with <code>distanceReferencePoint</code>.</p> <pre><code>query {\n  search(\n    input: {\n      text: \"chocolate\"\n      distanceReferencePoint: { lng: 7.6286691, lat: 51.9651620 }\n    }\n  ) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      geo {\n        distance\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/resolve-teaser/","title":"Resolve teaser","text":"<p>A teaser is a short preview or introduction that serves to arouse the interest of the target group. Typically, a teaser is used to hint at upcoming content, such as an article, news, or event. The purpose of a teaser is to grab people's attention and encourage them to learn more or consume the full content when it is available. Teasers can use text, images, videos or other media formats to pique the curiosity of the target audience.</p> <p>Depending on the type of page, a teaser can also be highly customized and contain special data that can only be provided by this type of page. For example, the teaser for a person's page can contain their first and last name and their contact details.</p> <p>Due to this property of a teaser, the data cannot be mapped via a single object type. The teaser types listed here cannot be complete, as project-specific teasers can also be defined depending on the project.</p> <p>The 'teaser' field is used to determine the teaser of a resource.</p> <pre><code>query {\n  search(input: { text: \"movie\" }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      teaser {\n        __typename\n        url\n      }\n    }\n  }\n}\n</code></pre> <p>In this case, <code>__typename</code> and <code>url</code> are the only fields that are available for all teaser types. All other fields must be queried individually depending on the teaser type.</p> <p>This is solved in GraphQL with Inline Fragments.</p> <pre><code>query {\n  search(input: { text: \"movie\" }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      teaser {\n        __typename\n        url\n        ... on ArticleTeaser {\n          headline\n          text\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/search/resolve-teaser/#articleteaser","title":"ArticleTeaser","text":"<p>The article teaser is the classic teaser that can contain a headline, a text and possibly an asset (e.g. an image).</p> <p>In the following example, the fields of the article teaser are read out and Fragments is also used.</p> <p>See also in the reference.</p> <pre><code>query {\n  search(input: { text: \"movie\" }) {\n    total\n    offset\n    queryTime\n    results {\n      id\n      teaser {\n        ...teaser\n      }\n    }\n  }\n}\n\nfragment teaser on Teaser {\n  __typename\n  url\n  ... on ArticleTeaser {\n    headline\n    text\n    kicker\n    asset(variant: \"teaser\") {\n      ...asset\n    }\n  }\n}\n\nfragment asset on Asset {\n  __typename\n  copyright\n  caption\n  description\n  ... on Image {\n    alternativeText\n    original {\n      ...imageSource\n    }\n    characteristic\n    sources {\n      ...imageSource\n    }\n  }\n}\n\nfragment imageSource on ImageSource {\n  variant\n  url\n  width\n  height\n  mediaQuery\n}\n</code></pre>"},{"location":"develop/graphql/search/suggest/","title":"Suggest","text":"<p>A \"suggest search\" is a search function that automatically displays suggestions or auto-completions to users as they enter search queries.</p> <p>A suggest search can be carried out as follows.</p> <pre><code>query {\n  suggest(input: { text: \"work\" }) {\n    queryTime\n    suggestions {\n      term\n      hits\n    }\n  }\n}\n</code></pre> <p>The suggestions that would lead to hits are returned as a result. <code>term</code> contains the suggested term, <code>hits</code> returns the number of times the term is contained in the index. This is not the number of search results that would be expected from a search with the term.</p> <pre><code>{\n  \"data\": {\n    \"suggest\": {\n      \"suggestions\": [\n        {\n          \"term\": \"work\",\n          \"hits\": 32\n        },\n        {\n          \"term\": \"workshop\",\n          \"hits\": 7\n        },\n        {\n          \"term\": \"working\",\n          \"hits\": 5\n        },\n        ...\n      ]\n    }\n  }\n}\n</code></pre> <p>The same filters can be specified for the suggest search as for a search. The suggest is usually used together with a full-text search. In this case, the filters for the search and the suggest should always be the same. This ensures that the suggestions only return the words that lead to hits for the search.</p> <pre><code>query {\n  suggest(input: { text: \"holid\", filter: [{ groups: [\"1195\"] }] }) {\n    queryTime\n    suggestions {\n      term\n      hits\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/web-account/","title":"WebAccount","text":"<p>The WebAccount is a central user account with which users can register and log in to a website. It is used for identification, authorization and personalization within a site.</p> <p>The basis for the WebAccount functionality is the WebAccount Bundle. This bundle provides a GraphQL API for user authentication and thus enables flexible integration into front-end applications.</p>"},{"location":"develop/graphql/web-account/#authentication","title":"Authentication","text":"<p>Authentication takes place via user name and password. See also: Webaccount authentication.</p> <pre><code>mutation {\n  webAccountAuthenticationWithPassword(\n    username: \"peterpan\"\n    password: \"tinkerbell\"\n    setJwtCookie: true\n  ) {\n    status\n    user {\n      id\n      username\n      firstName\n      lastName\n      email\n      roles\n    }\n  }\n}\n</code></pre> <p>The <code>setJwtCookie</code> option can be used to specify whether a JWT cookie should be set that is used for authentication in the application. If this option is set to <code>true</code>, a cookie with the name <code>WEB_ACCOUNT_TOKEN</code> is set, which contains the JWT token. This token can then be used in subsequent requests to identify and authenticate the user.</p>"},{"location":"develop/graphql/web-account/#authentication-successful","title":"Authentication successful","text":"<p>If authentication is successful, the <code>WEB_ACCOUNT_TOKEN</code> cookie is set and the response contains the status <code>SUCCESS</code> and the user data:</p> <pre><code>set-cookie WEB_ACCOUNT_TOKEN=eyJ0eXA...; expires=Fri, 29 Aug 2025 09:08:58 GMT; Max-Age=2592000; path=/; secure; httponly; samesite=strict\n</code></pre> <pre><code>{\n  \"data\": {\n    \"webAccountAuthenticationWithPassword\": {\n      \"status\": \"SUCCESS\",\n      \"user\": {\n        \"id\": \"100010100000002469\",\n        \"username\": \"peterpan\",\n        \"firstName\": \"Peter\",\n        \"lastName\": \"Pan\",\n        \"email\": \"pan@neverland.com\",\n        \"roles\": [\n          \"IES_ID_100010100000001012\",\n          \"IES_USRP_EDITORIAL\",\n          \"IES_ID_100010100000001028\",\n          \"USRP_INTERNETWEBSITE_PROTECTED\"\n        ]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"develop/graphql/web-account/#authentication-failed","title":"Authentication failed","text":"<pre><code>{\n  \"data\": {\n    \"webAccountAuthenticationWithPassword\": {\n      \"status\": \"FAILURE\"\n  }\n}\n</code></pre>"},{"location":"develop/graphql/web-account/#unset-jwt-cookie","title":"Unset JWT Cookie","text":"<p>To log out a user and unset the JWT cookie, you can use the following mutation:</p> <pre><code>mutation webAccountUnsetJwtCookie {\n  webAccountUnsetJwtCookie\n}\n</code></pre> <p>This mutation removes the <code>WEBACCOUNT_TOKEN</code> cookie from the user's browser by sending the <code>Set-Cookie</code> header with an expired date, effectively logging the user out of the application.</p> <pre><code>set-cookie WEB_ACCOUNT_TOKEN=deleted; expires=Tue, 30 Jul 2024 09:15:25 GMT; Max-Age=0; path=/; secure; httponly; samesite=strict\n</code></pre> <p>The JSON response is:</p> <pre><code>{\n  \"data\": {\n    \"webAccountUnsetJwtCookie\": true\n  }\n}\n</code></pre>"},{"location":"develop/ical/","title":"ICal API","text":"<p>The iCal API is used to retrieve iCalendar data from atoolo resources.</p>"},{"location":"develop/ical/#endpoints","title":"Endpoints","text":"<p>Currently, the iCal API consists of one endpoint. Given a resource, e.g. a resource that represents an event, this endpoint returns the corresponding scheduling data as an <code>.ics</code>-file:</p> <p><code>/api/ical/resource/{lang}/{resource-path}</code></p> <code>lang</code> Language code for the language in which the resource data should be displayed. This parameter is optional. If it is not specified, the default language of the website is used. <code>resource-path</code> Path to the resource whose ical data should be retrieved. This path can also contain <code>/</code>. <p>curl example:</p> <pre><code>curl \"https://www.example.com/api/ical/resource/en/path/to/resource\"\n</code></pre> <p>The response would be an <code>.ics</code>-file that could look like this:</p> <pre><code>BEGIN:VCALENDAR\nPRODID:-//atoolo/events-calendar-bundle//1.0/EN\nVERSION:2.0\nCALSCALE:GREGORIAN\nBEGIN:VEVENT\nUID:12345-0@www.example.com\nDTSTAMP:20250127T143240Z\nSUMMARY:Some Event\nURL:https://www.example.com/path/to/resource.php\nDTSTART;TZID=Europe/Berlin:20241210T000000\nDTEND;TZID=Europe/Berlin:20241210T235959\nEND:VEVENT\nEND:VCALENDAR\n</code></pre> <p>Keep in mind that if the requested resource has no scheduling data, the response will still consist of an <code>.ics</code>-file that, however, is empty, meaning it would have no <code>VEVENT</code> data. </p>"},{"location":"operate/","title":"Operate with Atoolo","text":"<p>For projects using the Atoolo suite, Atoolo offers a range of tools to support the operation of the application.</p> Chapter Description IES Webnode The IES Webnode, a server application installed on all web servers managed by IES, acts as the interface between the IES and the web servers Runtime check Atoolo provides a set of runtime checks to ensure that the application is running as expected. These checks can be used to monitor the application's health and to detect potential issues early on. Indexing Atoolo offers console tools via which the full text index can be created and updated. Worker Workers are required to process asynchronous tasks. These must be set up and configured in the system."},{"location":"operate/console-command/","title":"Console Command","text":""},{"location":"operate/console-command/#console-command","title":"Console Command","text":"<p>Symfony projects provide a console command with which a large number of commands can be executed. The Atoolo suite extends the commands.</p> <p>In Atoolo projects there is the special situation that a project can be used for several hosts. The contents of the websites of the virtual hosts are provided by the CMS in different resource channels. As a rule, an Atoolo command always refers to a resource channel. The command must therefore be made aware of the resource channel for which it is to be executed. As the application is linked to the resource channel, the command can also be executed in the resource channel directory.</p> <pre><code>/var/www/example.com/www/app/bin/console\n</code></pre> <p>This means that the command knows for which resource channel it is to be executed.</p> <p>When working on the server, commands may be executed as <code>root</code> users. Some commands write files and in this case would also create the files so that they belong to the <code>root</code> user. This can lead to problems if the files are to be read or written by the PHP process.</p> <p>If the Atoolo-Runtime-Checks are active, an error message is displayed here and the execution of the command is prevented. Therefore, the <code>www-data</code> user should always be used here.</p> <p>The <code>su</code> command can be used for this:</p> <pre><code>su www-data \\\n  -s /bin/bash \\\n  -c '/var/www/example.com/www/app/bin/console &lt;command&gt; &lt;arguments&gt;'\n</code></pre> <p><code>-s /bin/bash</code> is necessary because the user <code>www-data</code> has normally entered <code>/usr/sbin/nologin</code> as shell in <code>/etc/passwd</code>.</p>"},{"location":"operate/ies-webnode/","title":"IES Webnode","text":"<p>The IES webnode is a server application that is installed on all web servers that deliver websites managed by the IES. The IES webnode serves as the \"long arm\" of the IES and represents the interface between the IES and the web servers. The IES webnode is used, for example, to deploy the web applications that are required to operate the websites.</p>"},{"location":"operate/ies-webnode/#start-and-stop","title":"Start and stop","text":"<p>The IES webnode is started and stopped via the <code>systemd</code> service manager. The service is called <code>ies-webnode</code>.</p> <p>Start the IES webnode:</p> <pre><code>sudo systemctl start ies-webnode\n</code></pre> <p>Stop the IES webnode:</p> <pre><code>sudo systemctl stop ies-webnode\n</code></pre>"},{"location":"operate/ies-webnode/#update","title":"Update","text":"<p>The update file for the IES-Webnode is transferred via the IES on the web server when an update is initiated from the IES.</p> <p>The update must then be installed manually on the web server. To do this, the update script is executed on the web server.</p> <pre><code>sudo systemctl stop ies-webnode\nsudo ies-webnode update\nsudo systemctl start ies-webnode\n</code></pre>"},{"location":"operate/ies-webnode/#logs","title":"Logs","text":"<p>The IES-Webnode logs are stored in the directory <code>/var/log/sitepark/ies-webnode/</code>.</p>"},{"location":"operate/ies-webnode/#jwt-keys","title":"JWT Keys","text":"<p>The IES webnode provides a private and a public key with which the PHP applications can sign and verify JWTs. The keys are stored outside the web applications and are therefore retained even when the applications are updated.</p> <p>The keys are stored in the file <code>/srv/sitepark/ies-webnode/config/jwt</code>.</p>"},{"location":"operate/ies-webnode/#realm-properties-file","title":"Realm-Properties-File","text":"<p>The <code>realm.properties</code> file is used for simple user administration. A user <code>api</code> with a randomly generated password is stored there during installation. The IES authenticates itself to the IES Webnode via this user.</p> <p>The file is stored in the directory <code>/srv/sitepark/ies-webnode/config/</code>.</p>"},{"location":"operate/ies-webnode/#format-of-the-file","title":"Format of the file","text":"<p>The <code>realm.properties</code> file consists of key-value pairs, each of which defines a user and their associated properties. The file uses the simple text format and typically looks like this:</p> <pre><code># Comments start with a #\n# Custom entries consist of username, password and roles\n\n# Username: user\n# Password: password\n# Roles: role1, role2\nuser=password,role1,role2\n\n# Example:\napi=password,api\nadmin=password,api,admin\nuser1=password,user\n</code></pre> <p>Explanation of the individual parts</p> <ol> <li>Comments: Lines beginning with a # are comments and are ignored by the system.</li> <li>User-defined entries: Each entry in the file defines a user.    The user name precedes the <code>=</code>. The <code>=</code> is followed by the password and the roles, separated by commas.</li> </ol>"},{"location":"operate/indexing/","title":"Indexing","text":"<p>Atoolo offers console tools via which the full text index can be created and updated.</p> <p>The following command is used to create a completely new index:</p> <pre><code>/var/www/example.com/www/app/bin/console search:indexer\n</code></pre> <p>There may be several sources in a project that are used to fill the index. If this is the case, you are asked for which source the data should be re-indexed.</p>"},{"location":"operate/runtime-check/","title":"Runtime check","text":"<p>Atoolo provides a set of runtime checks to ensure that the application is running as expected. These checks can be used to monitor the application's health and to detect potential issues early on.</p> <p>There are two levels of runtime checks. The first level checks whether the basic requirements are met. These include</p> <ul> <li>PHP version: The minimum PHP version required is stored in the application. This is compared with the currently installed PHP version.</li> <li>PHP extensions: The PHP extensions required are stored in the application. These are compared with the currently installed PHP extensions.</li> <li>Process user: The process user that may be used for execution is stored in the application. This is compared with the currently used process user.</li> </ul> <p>These first-level runtime checks are carried out for every request and every CLI command before the application is started. If one of these checks fails, an error is thrown and the application is not started.</p> <p>The second level of runtime checks checks further requirements. These include</p> <ul> <li>Workers: Checks whether the workers are set up and can process asynchronous tasks.</li> <li>Indexing: It is checked whether indexing is set up and the full-text search works.</li> <li>Other application-specific checks, which can also vary depending on the application.</li> </ul> <p>The runtime checks of the second level are carried out by CLI command or by request.</p>"},{"location":"operate/runtime-check/#check-via-cli-command","title":"Check via CLI Command","text":"<pre><code>su www-data \\\n  -s /bin/bash \\\n  -c '/var/www/example.com/www/app/bin/console runtime:check'\n</code></pre> <p>(See also Console Command)</p> <p>The check via the CLI command can also be helpful to check whether the project still works after a PHP update. On a Debian-based system this could look like this:</p> <p>Assume the project is running with PHP version <code>8.2</code> and is to be updated to <code>8.3</code>. In this case, PHP <code>8.3</code> can be installed on the system first without activating it.</p> <p>Then a new PHP executable <code>/usr/bin/php8.3</code> is available. Also <code>php-fpm</code> is installed with PHP <code>8.3</code>. After starting the service, the socket <code>/run/php/php8.3-fpm.sock</code> is available.</p> <p>Now the <code>runtime:check</code> command has been executed with PHP <code>8.3</code> before the project is converted.</p> <pre><code>su www-data \\\n  -s /bin/bash \\\n  -c '/usr/bin/php8.3 /var/www/example.com/www/app/bin/console runtime:check \\\n    --fpm-socket /run/php/php8.3-fpm.sock \\\n    --skip worker'\n</code></pre> <p><code>--skip worker</code> is necessary because the worker is a separate process and the runtime check only reads and evaluates the status file created by the worker and does not execute the checks with the new PHP version.</p> <p>After activating the new PHP version and restarting the worker, <code>runtime:check</code> can then be executed to display the worker checks as well.</p>"},{"location":"operate/runtime-check/#check-via-http-request","title":"Check via HTTP-Request","text":"<pre><code>curl -H \"Authorization: Bearer ${JWT}\" https://www.example.com/api/runtime-check\n</code></pre> <p>A <code>JWT</code> (Json Web Token) is required for the request. This can be created via a command line call. It is also necessary that a corresponding user has been created in the <code>realm.properties</code> file. The user must be assigned the role <code>SYSTEM_AUDITOR</code>.</p> <p><code>realm.properties</code></p> <pre><code>systemauditor: secure-password,SYSTEM_AUDITOR\n</code></pre> <p>Once the user has been created, the JWT can be created.</p> <pre><code>su www-data \\\n  -s /bin/bash \\\n  -c '/var/www/example.com/www/app/bin/console \\\n    lexik:jwt:generate-token \\\n    --user-class \"Atoolo\\Security\\Entity\\User\" \\\n    --ttl 3600 \\\n    systemauditor'\n</code></pre> <p><code>--ttl 3600</code> sets the token to expire in one hour.</p>"},{"location":"operate/worker/","title":"Worker","text":"<p>Workers are required to process asynchronous tasks. These must be set up and configured in the system.</p> <p>The workers are set up with the help of Supervisor. Supervisor is a process control system that enables processes to be monitored and restarted if necessary.</p> <pre><code>sudo apt-get install supervisor\n</code></pre> <p>The workers are configured in a configuration file that is stored in <code>/etc/supervisor/conf.d/</code>. For <code>www</code>, the configuration could look like this:</p> <p><code>/etc/supervisor/conf.d/www-worker.conf</code></p> <pre><code>[program:www-worker]\ncommand=/var/www/example.com/www/app/bin/console messenger:consume --all\nuser=www-data\nnumprocs=2\nredirect_stderr=true\nstdout_logfile=/path/to/log/dir/www-worker.out.log\nautostart=true\nautorestart=true\nprocess_name=%(program_name)s_%(process_num)02d\n</code></pre> <p>See <code>supervisorctl</code> for more information on how to manage Supervisor.</p>"}]}